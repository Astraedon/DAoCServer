<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GameServer</name>
    </assembly>
    <members>
        <member name="T:DOL.GS.Trainer.ThaneTrainer">
            <summary>
            Thane Trainer
            </summary>	
        </member>
        <member name="T:DOL.GS.GameTrainer">
            <summary>
            The mother class for all class trainers
            </summary>
        </member>
        <member name="T:DOL.GS.GameNPC">
            <summary>
            This class is the baseclass for all Non Player Characters like
            Monsters, Merchants, Guards, Steeds ...
            </summary>
        </member>
        <member name="T:DOL.GS.GameLiving">
            <summary>
            This class holds all information that each
            living object in the world uses
            </summary>
        </member>
        <member name="T:DOL.GS.GameObject">
            <summary>
            This class holds all information that
            EVERY object in the game world needs!
            </summary>
        </member>
        <member name="T:DOL.GS.IPoint3D">
            <summary>
            interface for classes that represent a point in 3d space
            </summary>
        </member>
        <member name="T:DOL.GS.IPoint2D">
            <summary>
            interface for classes that represent a point in 2d space
            </summary>
        </member>
        <member name="P:DOL.GS.IPoint2D.X">
            <summary>
            X
            </summary>
        </member>
        <member name="P:DOL.GS.IPoint2D.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="P:DOL.GS.IPoint3D.Z">
            <summary>
            Height Position
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.HEADING_CONST">
            <summary>
            This constant is used to calculate the heading quickly
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.m_ObjectState">
            <summary>
            The Object's state! This is needed because
            when we remove an object it isn't instantly
            deleted but the state is merely set to "Deleted"
            This prevents the object from vanishing when
            there still might be enumerations running over it.
            A timer will collect the deleted objects and free
            them at certain intervals.
            </summary>
        </member>
        <member name="M:DOL.GS.GameObject.Mod(System.String[])">
            <summary>
            Called when someone is trying to modify the object from in-game
            </summary>
            <param name="args">Arguments describing the requested action</param>
        </member>
        <member name="F:DOL.GS.GameObject.m_X">
            <summary>
            The Object's X inside the current Region
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.m_Y">
            <summary>
            The Object's Y inside the current Region
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.m_Z">
            <summary>
            The Object's Z inside the current Region
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.m_CurrentRegion">
            <summary>
            The Object's current Region
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.m_Heading">
            <summary>
            The direction the Object is facing
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.m_Realm">
            <summary>
            Holds the realm of this object
            </summary>
        </member>
        <member name="M:DOL.GS.GameObject.GetHeadingToSpot(System.Int32,System.Int32)">
            <summary>
            Calculates the heading this object needs to have to face the target spot
            </summary>
            <param name="tx">target x</param>
            <param name="ty">target y</param>
            <returns>the heading towards the target spot</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetHeadingToTarget(DOL.GS.IPoint3D)">
            <summary>
            Calculates the heading this object needs to have, to face the target
            </summary>
            <param name="target">IPoint3D target</param>
            <returns>the heading towards the target</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetAngleToTarget(DOL.GS.GameObject)">
            <summary>
            Returns the angle towards a target, clockwise
            </summary>
            <param name="target">the target</param>
            <returns>the angle towards the target</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetAngleToSpot(System.Int32,System.Int32)">
            <summary>
            Returns the angle towards a target spot in degrees, clockwise
            </summary>
            <param name="tx">target x</param>
            <param name="ty">target y</param>
            <returns>the angle towards the spot</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetSpotFromHeading(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates a spot into the heading direction
            </summary>
            <param name="distance">the distance to the spot</param>
            <param name="tx">contains the result X coordinate</param>
            <param name="ty">contains the result Y coordinate</param>
        </member>
        <member name="M:DOL.GS.GameObject.IsObjectInFront(DOL.GS.GameObject,System.Double)">
            <summary>
            determines wether a target object is front
            in front is defined as north +- viewangle/2
            </summary>
            <param name="target"></param>
            <param name="viewangle"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameObject.IsObjectInFront(DOL.GS.GameObject,System.Double,System.Boolean)">
            <summary>
            determines wether a target object is front
            in front is defined as north +- viewangle/2
            </summary>
            <param name="target"></param>
            <param name="viewangle"></param>
            <param name="rangeCheck"></param>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.GameObject.m_Level">
            <summary>
            The level of the Object
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.m_Name">
            <summary>
            The name of the Object
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.m_Model">
            <summary>
            The model of the Object
            </summary>
        </member>
        <member name="M:DOL.GS.GameObject.GetName(System.Int32,System.Boolean)">
            <summary>
            Returns name with article for nouns
            </summary>
            <param name="article">0=definite, 1=indefinite</param>
            <param name="firstLetterUppercase"></param>
            <returns>name of this object (includes article if needed)</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetPronoun(System.Int32,System.Boolean)">
            <summary>
            Pronoun of this object in case you need to refer it in 3rd person
            http://webster.commnet.edu/grammar/cases.htm
            </summary>
            <param name="firstLetterUppercase"></param>
            <param name="form">0=Subjective, 1=Possessive, 2=Objective</param>
            <returns>pronoun of this object</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetExamineMessages(DOL.GS.GamePlayer)">
            <summary>
            Adds messages to ArrayList which are sent when object is targeted
            </summary>
            <param name="player">GamePlayer that is examining this object</param>
            <returns>list with string messages</returns>
        </member>
        <member name="F:DOL.GS.GameObject.m_saveInDB">
            <summary>
            True if this object is saved in the DB
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.m_ObjectID">
            <summary>
            The objectID. This is -1 as long as the object is not added to a region!
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.m_InternalID">
            <summary>
            The internalID. This is the unique ID of the object in the DB!
            </summary>
        </member>
        <member name="M:DOL.GS.GameObject.SaveIntoDatabase">
            <summary>
            Saves an object into the database
            </summary>
        </member>
        <member name="M:DOL.GS.GameObject.LoadFromDatabase(DOL.Database.DataObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:DOL.GS.GameObject.DeleteFromDatabase">
            <summary>
            Deletes a character from the DB
            </summary>
        </member>
        <member name="M:DOL.GS.GameObject.Create(System.UInt16,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Creates this object in the gameworld
            </summary>
            <param name="regionID">region target</param>
            <param name="x">x target</param>
            <param name="y">y target</param>
            <param name="z">z target</param>
            <param name="heading">heading</param>
            <returns>true if created successfully</returns>
        </member>
        <member name="M:DOL.GS.GameObject.AddToWorld">
            <summary>
            Creates the item in the world
            </summary>
            <returns>true if object was created</returns>
        </member>
        <member name="M:DOL.GS.GameObject.RemoveFromWorld">
            <summary>
            Removes the item from the world
            </summary>
        </member>
        <member name="M:DOL.GS.GameObject.MoveTo(System.UInt16,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Moves the item from one spot to another spot, possible even
            over region boundaries
            </summary>
            <param name="regionID">new regionid</param>
            <param name="x">new x</param>
            <param name="y">new y</param>
            <param name="z">new z</param>
            <param name="heading">new heading</param>
            <returns>true if moved</returns>
        </member>
        <member name="M:DOL.GS.GameObject.Delete">
            <summary>
            Marks this object as deleted!
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.m_spawnTick">
            <summary>
            Holds the GameTick of when this object was added to the world
            </summary>
        </member>
        <member name="M:DOL.GS.GameObject.Interact(DOL.GS.GamePlayer)">
            <summary>
            This function is called from the ObjectInteractRequestHandler
            </summary>
            <param name="player">GamePlayer that interacts with this object</param>
            <returns>false if interaction is prevented</returns>
        </member>
        <member name="M:DOL.GS.GameObject.TakeDamage(DOL.GS.GameObject,DOL.GS.eDamageType,System.Int32,System.Int32)">
            <summary>
            This method is called whenever this living 
            should take damage from some source
            </summary>
            <param name="source">the damage source</param>
            <param name="damageType">the damage type</param>
            <param name="damageAmount">the amount of damage</param>
            <param name="criticalAmount">the amount of critical damage</param>
        </member>
        <member name="M:DOL.GS.GameObject.GetConLevel(DOL.GS.GameObject)">
            <summary>
            Calculate con-level against other object
            &lt;=-3 = grey
            -2 = green
            -1 = blue
            0 = yellow (same level)
            1 = orange
            2 = red
            &gt;=3 = violet
            </summary>
            <returns>conlevel</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetConLevel(System.Int32,System.Int32)">
            <summary>
            Calculate con-level against other compareLevel
            &lt;=-3 = grey
            -2 = green
            -1 = blue  (compareLevel is 1 con lower)
            0 = yellow (same level)
            1 = orange (compareLevel is 1 con higher)
            2 = red
            &gt;=3 = violet
            </summary>
            <returns>conlevel</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetPlayersInRadius(System.UInt16)">
            <summary>
            Gets all players close to this object inside a certain radius
            </summary>
            <param name="radiusToCheck">the radius to check</param>
            <returns>An enumerator</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetPlayersInRadius(System.Boolean,System.UInt16)">
            <summary>
            Gets all players close to this object inside a certain radius
            </summary>
            <param name="useCache">true may return a cached result, false not.</param>
            <param name="radiusToCheck">the radius to check</param>
            <returns>An enumerator</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetPlayersInRadius(System.UInt16,System.Boolean)">
            <summary>
            Gets all players close to this object inside a certain radius
            </summary>
            <param name="radiusToCheck">the radius to check</param>
            <param name="withDistance">if the objects are to be returned with distance</param>
            <returns>An enumerator</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetPlayersInRadius(System.Boolean,System.UInt16,System.Boolean)">
            <summary>
            Gets all players close to this object inside a certain radius
            </summary>
            <param name="useCache">true may return a cached result, false not.</param>
            <param name="radiusToCheck">the radius to check</param>
            <param name="withDistance">if the objects are to be returned with distance</param>
            <returns>An enumerator</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetNPCsInRadius(System.UInt16)">
            <summary>
            Gets all npcs close to this object inside a certain radius
            </summary>
            <param name="radiusToCheck">the radius to check</param>
            <returns>An enumerator</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetNPCsInRadius(System.Boolean,System.UInt16)">
            <summary>
            Gets all npcs close to this object inside a certain radius
            </summary>
            <param name="useCache">use the cache</param>
            <param name="radiusToCheck">the radius to check</param>
            <returns>An enumerator</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetNPCsInRadius(System.Boolean,System.UInt16,System.Boolean)">
            <summary>
            Gets all npcs close to this object inside a certain radius
            </summary>
            <param name="useCache">use the cache</param>
            <param name="radiusToCheck">the radius to check</param>
            <param name="withDistance">if the objects are to be returned with distance</param>
            <returns>An enumerator</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetItemsInRadius(System.UInt16)">
            <summary>
            Gets all items close to this object inside a certain radius
            </summary>
            <param name="radiusToCheck">the radius to check</param>
            <returns>An enumerator</returns>
        </member>
        <member name="M:DOL.GS.GameObject.GetItemsInRadius(System.UInt16,System.Boolean)">
            <summary>
            Gets all items close to this object inside a certain radius
            </summary>
            <param name="radiusToCheck">the radius to check</param>
            <param name="withDistance">if the objects are to be returned with distance</param>
            <returns>An enumerator</returns>
        </member>
        <member name="M:DOL.GS.GameObject.ReceiveItem(DOL.GS.GameLiving,DOL.Database.InventoryItem)">
            <summary>
            Called when the object is about to get an item from someone
            </summary>
            <param name="source">Source from where to get the item</param>
            <param name="item">Item to get</param>
            <returns>true if the item was successfully received</returns>
        </member>
        <member name="M:DOL.GS.GameObject.ReceiveItem(DOL.GS.GameLiving,System.String)">
            <summary>
            Called when the object is about to get an item from someone
            </summary>
            <param name="source">Source from where to get the item</param>
            <param name="templateID">templateID for item to add</param>
            <returns>true if the item was successfully received</returns>
        </member>
        <member name="M:DOL.GS.GameObject.ReceiveItem(DOL.GS.GameLiving,DOL.GS.GameInventoryItem)">
            <summary>
            Receive an item from a living
            </summary>
            <param name="source"></param>
            <param name="item"></param>
            <returns>true if player took the item</returns>
        </member>
        <member name="M:DOL.GS.GameObject.ReceiveMoney(DOL.GS.GameLiving,System.Int64)">
            <summary>
            Called when the object is about to get money from someone
            </summary>
            <param name="source">Source from where to get the money</param>
            <param name="money">array of money to get</param>
            <returns>true if the money was successfully received</returns>
        </member>
        <member name="M:DOL.GS.GameObject.ToString">
            <summary>
            Returns the string representation of the GameObject
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameObject.#ctor">
            <summary>
            Constructs a new empty GameObject
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.ObjectState">
            <summary>
            Returns the current state of the object.
            Object's with state "Deleted" should not be used!
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.X">
            <summary>
            Gets or Sets the Object's X Coordinate inside the current Region
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.Y">
            <summary>
            Gets or Sets the Object's Y Coordinate inside the current Region
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.Z">
            <summary>
            Gets or Sets the Object's Z Coordinate inside the current Region
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.Realm">
            <summary>
            Gets or Sets the current Realm of the Object
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.CurrentRegion">
            <summary>
            Gets or Sets the current Region of the Object
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.CurrentRegionID">
            <summary>
            Get's or sets the current Region by the ID
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.CurrentZone">
            <summary>
            Gets the current Zone of the Object
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.Heading">
            <summary>
            Gets the current direction the Object is facing
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.IsUnderwater">
            <summary>
            Checks if object is underwater
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.Level">
            <summary>
            Gets or Sets the current level of the Object
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.EffectiveLevel">
            <summary>
            Gets or Sets the effective level of the Object
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.Name">
            <summary>
            Gets or Sets the current Name of the Object
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.Model">
            <summary>
            Gets or Sets the current Model of the Object
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.ObjectID">
            <summary>
            Gets or Sets the current ObjectID of the Object
            This is done automatically by the Region and should
            not be done manually!!!
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.InternalID">
            <summary>
            Gets or Sets the internal ID (DB ID) of the Object
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.SaveInDB">
            <summary>
            Sets the state for this object on whether or not it is saved in the database
            </summary>
        </member>
        <member name="P:DOL.GS.GameObject.SpawnTick">
            <summary>
            Gets the GameTick of when this object was added to the world
            </summary>
        </member>
        <member name="T:DOL.GS.GameObject.eObjectState">
            <summary>
            Holds the current state of the object
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.eObjectState.Active">
            <summary>
            Active, visibly in world
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.eObjectState.Inactive">
            <summary>
            Inactive, currently being moved or stuff
            </summary>
        </member>
        <member name="F:DOL.GS.GameObject.eObjectState.Deleted">
            <summary>
            Deleted, waiting to be cleaned up
            </summary>
        </member>
        <member name="M:DOL.GS.GameObject.OIRData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.GameObject.OIRData.GetInRadius(DOL.GS.GameObject,DOL.GS.Region,DOL.GS.Zone.eGameObjectType,System.Int32,System.Int32,System.Int32,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            This function will check if the data cache must be recomputed or if we can use the cache
            </summary>
            <param name="p_obj">The GameObject object instance</param>
            <param name="p_useCache">use the cache</param>
            <param name="p_currentRegion">The current region</param>
            <param name="p_type">Type of object to retreive</param>
            <param name="p_X">X position in region</param>
            <param name="p_Y">Y position in region</param>
            <param name="p_Z">Z position in region</param>
            <param name="p_radius">Radius to check</param>
            <param name="p_withDistance">We want the distance</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameObject.OIRData.OIRElement.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.GameObject.OIRData.OIRElement.GetInRadius(System.Boolean,DOL.GS.Region,DOL.GS.Zone.eGameObjectType,System.Int32,System.Int32,System.Int32,System.UInt16,System.Boolean)">
            <summary>
            This function will check if the data cache must be recomputed or if we can use the cache
            </summary>
            <param name="mustUpdate">force the update of the list</param>
            <param name="p_currentRegion">The current region</param>
            <param name="p_type">Type of object to retreive</param>
            <param name="p_X">X position in region</param>
            <param name="p_Y">Y position in region</param>
            <param name="p_Z">Z position in region</param>
            <param name="p_radius">Radius to check</param>
            <param name="p_withDistance">We want the distance</param>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.GameLiving.LAST_ATTACK_DATA">
            <summary>
            Holds the Attack Data object of last attack
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.LAST_ENEMY_ATTACK_RESULT">
            <summary>
            Holds the property for the result the last enemy
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.LAST_ATTACK_TICK">
            <summary>
            Holds the property for game tick of last attack
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_rangeAttackState">
            <summary>
            The state of the ranged attack
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_rangeAttackType">
            <summary>
            The gtype of the ranged attack
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_activeQuiverSlot">
            <summary>
            Holds the quiverslot to be used
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_stunned">
            <summary>
            say if player is stun or not
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_mezzed">
            <summary>
            say if player is mez or not
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_diseasedCount">
            <summary>
            Holds disease counter
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.Disease(System.Boolean)">
            <summary>
            Sets disease state
            </summary>
            <param name="add">true if disease counter should be increased</param>
        </member>
        <member name="F:DOL.GS.GameLiving.m_turningDisabledCount">
            <summary>
            Holds the turning disabled counter
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.DisableTurning(System.Boolean)">
            <summary>
            Disables the turning for this living
            </summary>
            <param name="add"></param>
        </member>
        <member name="F:DOL.GS.GameLiving.m_xpGainers">
            <summary>
            List of objects that will gain XP after this living dies
            consists of GameObject -> damage(float)
            Damage in float because it might contain small amounts
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_activeWeaponSlot">
            <summary>
            Holds the weaponslot to be used
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_attackAction">
            <summary>
            AttackAction used for making an attack every weapon speed intervals
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_attackers">
            <summary>
            The objects currently attacking this living
            To be more exact, the objects that are in combat
            and have this living as target.
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_lastAttackTick">
            <summary>
            last attack tick
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_lastAttackedByEnemyTick">
            <summary>
            last attacked by enemy tick
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.GetStyleToUse">
            <summary>
            Decides which style living will use in this moment
            </summary>
            <returns>Style to use or null if none</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.AttackSpeed(DOL.Database.InventoryItem[])">
            <summary>
            Gets the current attackspeed of this living in milliseconds
            </summary>
            <param name="weapon">attack weapons</param>
            <returns>effective speed of the attack. average if more than one weapon.</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.AttackDamage(DOL.Database.InventoryItem)">
            <summary>
            Returns the Damage this Living does on an attack
            </summary>
            <param name="weapon">the weapon used for attack</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.UnstyledDamageCap(DOL.Database.InventoryItem)">
            <summary>
            Max. Damage possible without style
            </summary>
            <param name="weapon">attack weapon</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetWeaponStat(DOL.Database.InventoryItem)">
            <summary>
            calculates weapon stat
            </summary>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetArmorAF(DOL.GS.eArmorSlot)">
            <summary>
            calculate item armor factor influenced by quality, con and duration
            </summary>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetArmorAbsorb(DOL.GS.eArmorSlot)">
            <summary>
            Calculates armor absorb level
            </summary>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetKeepBonuses">
            <summary>
            Calculates keep bonuses
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetWeaponSkill(DOL.Database.InventoryItem)">
            <summary>
            Gets the weaponskill of weapon
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.AttackCriticalChance(DOL.Database.InventoryItem)">
            <summary>
            Returns the chance for a critical hit
            </summary>
            <param name="weapon">attack weapon</param>
        </member>
        <member name="M:DOL.GS.GameLiving.AttackDamageType(DOL.Database.InventoryItem)">
            <summary>
            Returns the damage type of the current attack
            </summary>
            <param name="weapon">attack weapon</param>
        </member>
        <member name="F:DOL.GS.GameLiving.m_attackState">
            <summary>
            Stores the attack state of this living
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.WeaponSpecLevel(DOL.Database.InventoryItem)">
            <summary>
            determines the spec level for current AttackWeapon
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.WeaponDamage(DOL.Database.InventoryItem)">
            <summary>
            Gets the weapondamage of currently used weapon
            </summary>
            <param name="weapon">the weapon used for attack</param>
        </member>
        <member name="F:DOL.GS.GameLiving.XPForLiving">
            <summary>
            Holds pre calculated experience values of the living for special levels
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.NoXPForLevel">
            <summary>
            Holds the level of target at which no exp is given
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.IsObjectGreyCon(DOL.GS.GameObject)">
            <summary>
            Checks whether object is grey con to this living
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.IsObjectGreyCon(DOL.GS.GameObject,DOL.GS.GameObject)">
            <summary>
            Checks whether target is grey con to source
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetExperienceValueForLevel(System.Int32)">
            <summary>
            Calculates the experience value of this living for special levels
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.MakeAttack(DOL.GS.GameObject,DOL.Database.InventoryItem,DOL.GS.Styles.Style,System.Double,System.Int32,System.Boolean)">
            <summary>
            This method is called to make an attack, it is called from the
            attacktimer and should not be called manually
            </summary>
            <param name="target">the target that is attacked</param>
            <param name="weapon">the weapon used for attack</param>
            <param name="style">the style used for attack</param>
            <param name="effectiveness">damage effectiveness (0..1)</param>
            <param name="interruptDuration">the interrupt duration</param>
            <param name="dualWield">indicates if both weapons are used for attack</param>
            <returns>the object where we collect and modifiy all parameters about the attack</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.StartInterruptTimer(System.Int32,DOL.GS.AttackData.eAttackType,DOL.GS.GameLiving)">
            <summary>
            Starts interrupt timer on this living
            </summary>
            <param name="duration">The full interrupt duration in milliseconds</param>
            <param name="attackType">The type of attack</param>
            <param name="attacker">The source of interrupts</param>
        </member>
        <member name="M:DOL.GS.GameLiving.OnInterruptTick(DOL.GS.GameLiving,DOL.GS.AttackData.eAttackType)">
            <summary>
            Does needed interrupt checks and interrupts this living
            </summary>
            <param name="attacker">the attacker that is interrupting</param>
            <param name="attackType">the attack type</param>
            <returns>true if interrupted successfully</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.CheckRangeAttackState(DOL.GS.GameObject)">
            <summary>
            Check the range attack state and decides what to do
            Called inside the AttackTimerCallback
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.CreateAttackAction">
            <summary>
            Creates an attack action for this living
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.StartWeaponMagicalEffect(DOL.GS.AttackData,DOL.Database.InventoryItem)">
            <summary>
            Starts the weapon proc if any
            </summary>
            <param name="ad"></param>
            <param name="weapon"></param>
        </member>
        <member name="M:DOL.GS.GameLiving.StartAttack(DOL.GS.GameObject)">
            <summary>
            Starts a melee attack on a target
            </summary>
            <param name="attackTarget">The object to attack</param>
        </member>
        <member name="M:DOL.GS.GameLiving.InterruptRangeAttack">
            <summary>
            Interrupts a Range Attack
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.StopAttack">
            <summary>
            Stops all attacks this gameliving is currently making
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.CalculateCriticalDamage(DOL.GS.AttackData,DOL.Database.InventoryItem)">
            <summary>
            Calculates melee critical damage of this player
            </summary>
            <param name="ad">The attack data</param>
            <param name="weapon">The weapon used</param>
            <returns>The amount of critical damage</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.CalculateEnemyAttackResult(DOL.GS.AttackData,DOL.Database.InventoryItem)">
            <summary>
            Returns the result of an enemy attack,
            yes this means WE decide if an enemy hits us or not :-)
            </summary>
            <param name="ad">AttackData</param>
            <param name="weapon">the weapon used for attack</param>
            <returns>the result of the attack</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.TakeDamage(DOL.GS.GameObject,DOL.GS.eDamageType,System.Int32,System.Int32)">
            <summary>
            This method is called whenever this living
            should take damage from some source
            </summary>
            <param name="source">the damage source</param>
            <param name="damageType">the damage type</param>
            <param name="damageAmount">the amount of damage</param>
            <param name="criticalAmount">the amount of critical damage</param>
        </member>
        <member name="M:DOL.GS.GameLiving.OnAttackedByEnemy(DOL.GS.AttackData)">
            <summary>
            This method is called at the end of the attack sequence to
            notify objects if they have been attacked/hit by an attack
            </summary>
            <param name="ad">information about the attack</param>
        </member>
        <member name="M:DOL.GS.GameLiving.ShowAttackAnimation(DOL.GS.AttackData,DOL.Database.InventoryItem)">
            <summary>
            Called to display an attack animation of this living
            </summary>
            <param name="ad">Infos about the attack</param>
            <param name="weapon">The weapon used for attack</param>
        </member>
        <member name="M:DOL.GS.GameLiving.DealDamage(DOL.GS.AttackData)">
            <summary>
            This method is called whenever this living is dealing
            damage to some object
            </summary>
            <param name="ad">AttackData</param>
        </member>
        <member name="M:DOL.GS.GameLiving.AddXPGainer(DOL.GS.GameObject,System.Single)">
            <summary>
            Adds a object to the list of objects that will gain xp
            after this living dies
            </summary>
            <param name="xpGainer">the xp gaining object</param>
            <param name="damageAmount">the amount of damage, float because for groups it can be split</param>
        </member>
        <member name="M:DOL.GS.GameLiving.ChangeHealth(DOL.GS.GameObject,DOL.GS.GameLiving.eHealthChangeType,System.Int32)">
            <summary>
            Changes the health
            </summary>
            <param name="changeSource">the source that inited the changes</param>
            <param name="healthChangeType">the change type</param>
            <param name="changeAmount">the change amount</param>
            <returns>the amount really changed</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.ChangeMana(DOL.GS.GameObject,DOL.GS.GameLiving.eManaChangeType,System.Int32)">
            <summary>
            Changes the mana
            </summary>
            <param name="changeSource">the source that inited the changes</param>
            <param name="manaChangeType">the change type</param>
            <param name="changeAmount">the change amount</param>
            <returns>the amount really changed</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.ChangeEndurance(DOL.GS.GameObject,DOL.GS.GameLiving.eEnduranceChangeType,System.Int32)">
            <summary>
            Changes the endurance
            </summary>
            <param name="changeSource">the source that inited the changes</param>
            <param name="enduranceChangeType">the change type</param>
            <param name="changeAmount">the change amount</param>
            <returns>the amount really changed</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.EnemyHealed(DOL.GS.GameLiving,DOL.GS.GameObject,DOL.GS.GameLiving.eHealthChangeType,System.Int32)">
            <summary>
            Called when an enemy of ours is healed during combat
            </summary>
            <param name="enemy">the enemy</param>
            <param name="healSource">the healer</param>
            <param name="changeType">the healtype</param>
            <param name="healAmount">the healamount</param>
        </member>
        <member name="M:DOL.GS.GameLiving.AddAttacker(DOL.GS.GameObject)">
            <summary>
            Adds an attacker to the attackerlist
            </summary>
            <param name="attacker">the attacker to add</param>
        </member>
        <member name="M:DOL.GS.GameLiving.RemoveAttacker(DOL.GS.GameObject)">
            <summary>
            Removes an attacker from the list
            </summary>
            <param name="attacker">the attacker to remove</param>
        </member>
        <member name="M:DOL.GS.GameLiving.Die(DOL.GS.GameObject)">
            <summary>
            Called when this living dies
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.GainExperience(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Called when the living is gaining experience
            </summary>
            <param name="expBase">base amount of xp to gain</param>
            <param name="expCampBonus">camp bonus to base exp</param>
            <param name="expGroupBonus">group bonus to base exp</param>
            <param name="sendMessage">should exp gain message be sent</param>
        </member>
        <member name="M:DOL.GS.GameLiving.GainRealmPoints(System.Int64)">
            <summary>
            Called when this living gains realm points
            </summary>
            <param name="amount">amount of realm points gained</param>
        </member>
        <member name="M:DOL.GS.GameLiving.GainBountyPoints(System.Int64)">
            <summary>
            Called when this living gains bounty points
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:DOL.GS.GameLiving.GainExperience(System.Int64)">
            <summary>
            Called when the living is gaining experience
            </summary>
            <param name="exp">base amount of xp to gain</param>
        </member>
        <member name="M:DOL.GS.GameLiving.EnemyKilled(DOL.GS.GameLiving)">
            <summary>
            Called when an enemy of this living is killed
            </summary>
            <param name="enemy">enemy killed</param>
        </member>
        <member name="M:DOL.GS.GameLiving.CalculateLeftHandSwingCount">
            <summary>
            Calculates how many times left hand swings
            </summary>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.GameLiving.m_visibleActiveWeaponSlots">
            <summary>
            Holds visible active weapon slots
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_isCloakHoodUp">
            <summary>
            Holds the living's cloak hood state
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.SwitchWeapon(DOL.GS.GameLiving.eActiveWeaponSlot)">
            <summary>
            Switches the active weapon to another one
            </summary>
            <param name="slot">the new eActiveWeaponSlot</param>
        </member>
        <member name="F:DOL.GS.GameLiving.m_abilityBonus">
            <summary>
            Array for property boni for abilities
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_itemBonus">
            <summary>
            Array for property boni by items
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_buff1Bonus">
            <summary>
            Array for buff boni
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_buff2Bonus">
            <summary>
            Array for second buff boni
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_buff3Bonus">
            <summary>
            Array for third buff boni
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_buff4Bonus">
            <summary>
            Array for forth buff boni
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_buffMult1Bonus">
            <summary>
            Array for first multiplicative buff boni
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_propertyCalc">
            <summary>
            property calculators for each property
            look at PropertyCalculator class for more description
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.GetModified(DOL.GS.eProperty)">
            <summary>
            retrieve a property value of that living
            this value is modified/capped and ready to use
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.PropertiesChanged">
            <summary>
            has to be called after properties were changed and updates are needed
            TODO: not sure about property change detection, has to be reviewed
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.STAT_NAMES">
            <summary>
            The name of the states
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_charStat">
            <summary>
            base values for char stats
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.GetBaseStat(DOL.GS.eStat)">
            <summary>
            get a unmodified char stat value
            </summary>
            <param name="stat"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.ChangeBaseStat(DOL.GS.eStat,System.Int16)">
            <summary>
            changes a base stat value
            </summary>
            <param name="stat"></param>
            <param name="amount"></param>
        </member>
        <member name="F:DOL.GS.GameLiving.m_damageTypeToResistBonusConversion">
            <summary>
            this field is just for convinience and speed purposes
            converts the damage types to resist fields
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.GetResistTypeForDamage(DOL.GS.eDamageType)">
            <summary>
            gets the resistance value by damage type, refer to eDamageType for constants
            </summary>
            <param name="damageType"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetResist(DOL.GS.eDamageType)">
            <summary>
            gets the resistance value by damage types
            </summary>
            <param name="damageType">the damag etype</param>
            <returns>the resist value</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetDamageResist(DOL.GS.eProperty)">
            <summary>
            get the resistance to damage by type
            </summary>
            <param name="property">the property type</param>
            <returns>the resist value</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetDamageResist(DOL.GS.eDamageType)">
            <summary>
            Gets the Damage Resist for a damage type
            </summary>
            <param name="damageType"></param>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.GameLiving.m_tempProps">
            <summary>
            temp properties
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.GetBaseSpecLevel(System.String)">
            <summary>
            returns the level of a specialization
            if 0 is returned, the spec is non existent on living
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetModifiedSpecLevel(System.String)">
            <summary>
            returns the level of a specialization + bonuses from RR and Items
            if 0 is returned, the spec is non existent on the living
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.GameLiving.m_healthRegenerationTimer">
            <summary>
            GameTimer used for restoring hp
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_powerRegenerationTimer">
            <summary>
            GameTimer used for restoring mana
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_enduRegenerationTimer">
            <summary>
            GameTimer used for restoring endurance
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_healthRegenerationPeriod">
            <summary>
            The default frequency of regenerating health in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_powerRegenerationPeriod">
            <summary>
            The default frequency of regenerating power in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_enduRegenerationPeriod">
            <summary>
            The default frequency of regenerating endurance in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_regenTimerLock">
            <summary>
            The lock object for lazy regen timers initialization
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.StartHealthRegeneration">
            <summary>
            Starts the health regeneration
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.StartPowerRegeneration">
            <summary>
            Starts the power regeneration
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.StartEnduranceRegeneration">
            <summary>
            Starts the endurance regeneration
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.StopHealthRegeneration">
            <summary>
            Stop the health regeneration
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.StopPowerRegeneration">
            <summary>
            Stop the power regeneration
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.StopEnduranceRegeneration">
            <summary>
            Stop the endurance regeneration
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.HealthRegenerationTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            Timer callback for the hp regeneration
            </summary>
            <param name="callingTimer">timer calling this function</param>
        </member>
        <member name="M:DOL.GS.GameLiving.PowerRegenerationTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            Callback for the power regenerationTimer
            </summary>
            <param name="selfRegenerationTimer">timer calling this function</param>
        </member>
        <member name="M:DOL.GS.GameLiving.EnduranceRegenerationTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            Callback for the endurance regenerationTimer
            </summary>
            <param name="selfRegenerationTimer">timer calling this function</param>
        </member>
        <member name="F:DOL.GS.GameLiving.m_health">
            <summary>
            Health of the object
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_mana">
            <summary>
            Amount of mana
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_endurance">
            <summary>
            Amount of endurance
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_maxEndurance">
            <summary>
            Maximum value that can be in m_endurance
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_concEffects">
            <summary>
            Holds the concentration effects list
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.CancelAllConcentrationEffects">
            <summary>
            Cancels all concentration effects by this living and on this living
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_targetObjectWeakReference">
            <summary>
            The targetobject of this living
            This is a weak reference to a GameObject, which
            means that the gameobject can be cleaned up even
            when this living has a reference on it ...
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_currentSpeed">
            <summary>
            The current speed of this living
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_maxSpeedBase">
            <summary>
            The base maximum speed of this living
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_guildName">
            <summary>
            The guildname of this living
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_groundTarget">
            <summary>
            Holds the Living's Coordinate inside the current Region
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.SetGroundTarget(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Living's ground-target Coordinates inside the current Region
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_movementStartTick">
            <summary>
            Holds when the movement started
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_currentAreas">
            <summary>
            Holds all areas this player is currently within
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_xAddition">
            <summary>
            The X addition per coordinate of forward movement
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_yAddition">
            <summary>
            The Y addition per coordinate of forward movement
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_zAddition">
            <summary>
            The Z addition per coordinate of forward movement
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.RecalculatePostionAddition">
            <summary>
            Recalculates position addition values of this living
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.GetFuturePosition(System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Gets the position this object will have in the future
            </summary>
            <param name="x">out future x</param>
            <param name="y">out future y</param>
            <param name="timeDiff">the difference between now and "the future" in ms</param>
        </member>
        <member name="M:DOL.GS.GameLiving.MoveTo(System.UInt16,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Moves the item from one spot to another spot, possible even
            over region boundaries
            </summary>
            <param name="regionID">new regionid</param>
            <param name="x">new x</param>
            <param name="y">new y</param>
            <param name="z">new z</param>
            <param name="heading">new heading</param>
            <returns>true if moved</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.SayReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            This function is called when this object receives a Say
            </summary>
            <param name="source">Source of say</param>
            <param name="str">Text that was spoken</param>
            <returns>true if the text should be processed further, false if it should be discarded</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.Say(System.String)">
            <summary>
            Broadcasts a message to all living beings around this object
            </summary>
            <param name="str">string to broadcast (without any "xxx says:" in front!!!)</param>
            <returns>true if text was said successfully</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.YellReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            This function is called when the living receives a yell
            </summary>
            <param name="source">GameLiving that was yelling</param>
            <param name="str">string that was yelled</param>
            <returns>true if the string should be processed further, false if it should be discarded</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.Yell(System.String)">
            <summary>
            Broadcasts a message to all living beings around this object
            </summary>
            <param name="str">string to broadcast (without any "xxx yells:" in front!!!)</param>
            <returns>true if text was yelled successfully</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            This function is called when the Living receives a whispered text
            </summary>
            <param name="source">GameLiving that was whispering</param>
            <param name="str">string that was whispered</param>
            <returns>true if the string should be processed further, false if it should be discarded</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.Whisper(DOL.GS.GameLiving,System.String)">
            <summary>
            Sends a whisper to a target
            </summary>
            <param name="target">The target of the whisper</param>
            <param name="str">text to whisper (without any "xxx whispers:" in front!!!)</param>
            <returns>true if text was whispered successfully</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.Emote(DOL.GS.PacketHandler.eEmote)">
            <summary>
            Makes this living do an emote-animation
            </summary>
            <param name="emote">the emote animation to show</param>
        </member>
        <member name="M:DOL.GS.GameLiving.ReceiveItem(DOL.GS.GameLiving,DOL.Database.InventoryItem)">
            <summary>
            Called when the living is about to get an item from someone
            else
            </summary>
            <param name="source">Source from where to get the item</param>
            <param name="item">Item to get</param>
            <returns>true if the item was successfully received</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.ReceiveMoney(DOL.GS.GameLiving,System.Int64)">
            <summary>
            Called when the living is about to get money from someone
            else
            </summary>
            <param name="source">Source from where to get the money</param>
            <param name="money">array of money to get</param>
            <returns>true if the money was successfully received</returns>
        </member>
        <member name="F:DOL.GS.GameLiving.m_inventory">
            <summary>
            Represent the inventory of all living
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_effects">
            <summary>
            currently applied effects
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.CreateEffectsList">
            <summary>
            Creates new effects list for this living.
            </summary>
            <returns>New effects list instance</returns>
        </member>
        <member name="F:DOL.GS.GameLiving.m_abilities">
            <summary>
            Holds all abilities of the player (KeyName -> Ability)
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.HasAbility(System.String)">
            <summary>
            Asks for existence of specific ability
            </summary>
            <param name="keyName">KeyName of ability</param>
            <returns>Has player this ability</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.HasAbilityToUseItem(DOL.Database.ItemTemplate)">
            <summary>
            Checks if player has ability to use items of this type
            </summary>
            <param name="item"></param>
            <returns>true if player has ability to use item</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetAbility(System.String)">
            <summary>
            returns ability of living or null if non existent
            </summary>
            <param name="abilityKey"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetAbility(System.Type)">
            <summary>
            returns ability of living or null if no existant
            </summary>
            <param name="abilityType"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetAbilityLevel(System.String)">
            <summary>
            returns the level of ability
            if 0 is returned, the ability is non existent on player
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetAllAbilities">
            <summary>
            returns all abilities in a copied list
            </summary>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.GameLiving.m_disabledSkills">
            <summary>
            Table of skills currently disabled
            skill => disabletimeout (ticks) or 0 when endless
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.GetSkillDisabledDuration(DOL.GS.Skill)">
            <summary>
            Gets the time left for disabling this skill in milliseconds
            </summary>
            <param name="skill"></param>
            <returns>milliseconds left for disable</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.GetAllDisabledSkills">
            <summary>
            Gets a copy of all disabled skills
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.DisableSkill(DOL.GS.Skill,System.Int32)">
            <summary>
            Grey out some skills on client for specified duration
            </summary>
            <param name="skill">the skill to disable</param>
            <param name="duration">duration of disable in milliseconds</param>
        </member>
        <member name="M:DOL.GS.GameLiving.AddToWorld">
            <summary>
            Creates the item in the world
            </summary>
            <returns>true if object was created</returns>
        </member>
        <member name="M:DOL.GS.GameLiving.RemoveFromWorld">
            <summary>
            Removes the item from the world
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.m_runningSpellHandler">
            <summary>
            Holds the currently running spell handler
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.OnAfterSpellCastSequence(DOL.GS.Spells.ISpellHandler)">
            <summary>
            Callback after spell casting is complete and next spell can be processed
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:DOL.GS.GameLiving.StopCurrentSpellcast">
            <summary>
            Immediately stops currently casting spell
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.CastSpell(DOL.GS.Spell,DOL.GS.SpellLine)">
            <summary>
            Cast a specific spell from given spell line
            </summary>
            <param name="spell">spell to cast</param>
            <param name="line">Spell line of the spell (for bonus calculations)</param>
        </member>
        <member name="M:DOL.GS.GameLiving.LoadCalculators">
            <summary>
            Load the property calculations
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLiving.#ctor">
            <summary>
            Constructor to create a new GameLiving
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.RangeAttackState">
            <summary>
            Gets or Sets the state of a ranged attack
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.RangeAttackType">
            <summary>
            Gets or Sets the type of a ranged attack
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.ActiveQuiverSlot">
            <summary>
            Gets/Sets the current active quiver slot of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.IsStunned">
            <summary>
            Gets the stunned flag of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.IsMezzed">
            <summary>
            Gets the mesmerized flag of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.IsDiseased">
            <summary>
            Gets diseased state
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.IsTurningDisabled">
            <summary>
            Gets/Sets wether the player can turn the character
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.ActiveWeaponSlot">
            <summary>
            Returns the current active weapon slot of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.XPGainers">
            <summary>
            Gets a hashtable holding
            gameobject->float
            key-value pairs that will define how much
            XP these objects get when this n
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.LastAttackTick">
            <summary>
            gets/sets gametick when this living has attacked its target
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.LastCombatTick">
            <summary>
            gets the last attack or attackedbyenemy tick
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.LastAttackedByEnemyTick">
            <summary>
            gets/sets gametick when this living was last time attacked by an enemy
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.SwingTimeLeft">
            <summary>
            Gets the swing time left
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.AttackRange">
            <summary>
            Returns the AttackRange of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.AttackWeapon">
            <summary>
            Returns the weapon used to attack, null=natural
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.SpellCriticalChance">
            <summary>
            Returns the chance for a critical hit with a spell
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.AttackState">
            <summary>
            Gets the attack-state of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.EffectiveOverallAF">
            <summary>
            Gets the effective AF of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.IsAlive">
            <summary>
            returns if this living is alive
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.InCombat">
            <summary>
            Check this flag to see wether this living is involved in combat
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.ExperienceValue">
            <summary>
            Returns the amount of experience this living is worth
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.RealmPointsValue">
            <summary>
            Realm point value of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.BountyPointsValue">
            <summary>
            Bounty point value of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.TargetInView">
            <summary>
            Gets/sets the targetObject's visibility
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.GroundTargetInView">
            <summary>
            Gets or sets the GroundTargetObject's visibility
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.RangeAttackAmmo">
            <summary>
            Gets/Sets the item that is used for ranged attack
            </summary>
            <returns>Item that will be used for range/accuracy/damage modifications</returns>
        </member>
        <member name="P:DOL.GS.GameLiving.RangeAttackTarget">
            <summary>
            Gets/Sets the target for current ranged attack
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.GameLiving.Attackers">
            <summary>
            Returns the list of attackers
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.CanUseLefthandedWeapon">
            <summary>
            Checks whether Living has ability to use lefthanded weapons
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.VisibleActiveWeaponSlots">
            <summary>
            Gets visible active weapon slots
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.IsCloakHoodUp">
            <summary>
            Sets/gets the living's cloak hood state
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.AbilityBonus">
            <summary>
            Ability bonus property
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.ItemBonus">
            <summary>
            Property Item Bonus field
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.BuffBonusCategory1">
            <summary>
            Property Buff bonus category
            what it means depends from the PropertyCalculator for a property element
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.BuffBonusCategory2">
            <summary>
            Property Buff bonus category
            what it means depends from the PropertyCalculator for a property element
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.BuffBonusCategory3">
            <summary>
            Property Buff bonus category
            what it means depends from the PropertyCalculator for a property element
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.BuffBonusCategory4">
            <summary>
            Property Buff bonus category
            what it means depends from the PropertyCalculator for a property element
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.BuffBonusMultCategory1">
            <summary>
            Property Buff bonus category
            what it means depends from the PropertyCalculator for a property element
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.TempProperties">
            <summary>
            use it to store temporary properties on this living
            beware to use unique keys so they do not interfere
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.EffectiveLevel">
            <summary>
            Gets or Sets the effective level of the Object
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.Health">
            <summary>
            Gets/sets the object health
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.MaxHealth">
            <summary>
            Gets/sets the maximum amount of health
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.HealthPercent">
            <summary>
            Gets the Health in percent 0..100
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.Mana">
            <summary>
            Gets/sets the object mana
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.MaxMana">
            <summary>
            Gets/sets the maximum amount of mana
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.ManaPercent">
            <summary>
            Gets the Mana in percent 0..100
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.Endurance">
            <summary>
            Gets/sets the object endurance
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.MaxEndurance">
            <summary>
            Gets or sets the maximum endurance of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.EndurancePercent">
            <summary>
            Gets the endurance in percent of maximum
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.Concentration">
            <summary>
            Gets/sets the object concentration
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.MaxConcentration">
            <summary>
            Gets/sets the object maxconcentration
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.ConcentrationPercent">
            <summary>
            Gets the concentration in percent of maximum
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.ConcentrationEffects">
            <summary>
            Gets the concentration effects list
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.Heading">
            <summary>
            Gets the current direction the Object is facing
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.CurrentSpeed">
            <summary>
            Gets or sets the current speed of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.MaxSpeed">
            <summary>
            Gets the maxspeed of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.MaxSpeedBase">
            <summary>
            Gets or sets the base max speed of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.GuildName">
            <summary>
            Gets or sets the guildname of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.TargetObject">
            <summary>
            Gets or sets the target of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.IsSitting">
            <summary>
            Gets the current sit state
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.GroundTarget">
            <summary>
            Gets the Living's ground-target Coordinate inside the current Region
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.Level">
            <summary>
            Gets or Sets the current level of the Object
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.XAddition">
            <summary>
            Gets the X addition per coordinate of forward movement
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.YAddition">
            <summary>
            Gets the Y addition per coordinate of forward movement
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.ZAddition">
            <summary>
            Gets the Z addition per coordinate of forward movement
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.MovementStartTick">
            <summary>
            Gets or sets the MovementStartTick
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.IsMoving">
            <summary>
            Returns if the npc is moving or not
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.X">
            <summary>
            Gets the current position of this living.
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.Y">
            <summary>
            Gets the current position of this living.
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.Z">
            <summary>
            Gets the current position of this living.
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.CurrentAreas">
            <summary>
            Holds all areas this player is currently within
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.IsStealthed">
            <summary>
            The stealth state of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.Inventory">
            <summary>
            Get/Set inventory
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.EffectList">
            <summary>
            gets a list of active effects
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.GameLiving.IsCasting">
            <summary>
            spell handlers that are currently running duration spells
            </summary>
        </member>
        <member name="P:DOL.GS.GameLiving.CurrentSpellHandler">
            <summary>
            active spellhandler (casting phase) or null
            </summary>
        </member>
        <member name="T:DOL.GS.GameLiving.eAttackResult">
            <summary>
            The result of an attack
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eAttackResult.Any">
            <summary>
            No specific attack
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eAttackResult.HitUnstyled">
            <summary>
            The attack was a hit
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eAttackResult.HitStyle">
            <summary>
            The attack was a hit
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eAttackResult.NotAllowed_ServerRules">
            <summary>
            Attack was denied by server rules
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eAttackResult.NoTarget">
            <summary>
            No target for the attack
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eAttackResult.TargetDead">
            <summary>
            Target is already dead
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eAttackResult.OutOfRange">
            <summary>
            Target is out of range
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eAttackResult.Missed">
            <summary>
            Attack missed
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eAttackResult.Evaded">
            <summary>
            The attack was evaded
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eAttackResult.Blocked">
            <summary>
            The attack was blocked
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eAttackResult.Parried">
            <summary>
            The attack was parried
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eAttackResult.NoValidTarget">
            <summary>
            The target is invalid
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eAttackResult.TargetNotVisible">
            <summary>
            The target is not visible
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eAttackResult.Fumbled">
            <summary>
            The attack was fumbled
            </summary>
        </member>
        <member name="T:DOL.GS.GameLiving.eRangeAttackState">
            <summary>
            The possible states for a ranged attack
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eRangeAttackState.None">
            <summary>
            No ranged attack active
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eRangeAttackState.Aim">
            <summary>
            Ranged attack in aim-state
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eRangeAttackState.Fire">
            <summary>
            Player wants to fire the shot/throw NOW!
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eRangeAttackState.AimFire">
            <summary>
            Ranged attack will fire when ready
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eRangeAttackState.AimFireReload">
            <summary>
            Ranged attack will fire and reload when ready
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eRangeAttackState.ReadyToFire">
            <summary>
            Ranged attack is ready to be fired
            </summary>
        </member>
        <member name="T:DOL.GS.GameLiving.eRangeAttackType">
            <summary>
            The type of range attack
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eRangeAttackType.Normal">
            <summary>
            A normal ranged attack
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eRangeAttackType.Critical">
            <summary>
            A critical shot is attempted
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eRangeAttackType.Long">
            <summary>
            A longshot is attempted
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eRangeAttackType.Volley">
            <summary>
            A volley shot is attempted
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eRangeAttackType.SureShot">
            <summary>
            A sure shot is attempted
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eRangeAttackType.RapidFire">
            <summary>
            A rapid shot is attempted
            </summary>
        </member>
        <member name="T:DOL.GS.GameLiving.eHealthChangeType">
            <summary>
            Holds all the ways this living can
            be healed
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eHealthChangeType.Unknown">
            <summary>
            The health was changed by something unknown
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eHealthChangeType.Regenerate">
            <summary>
            Regeneration changed the health
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eHealthChangeType.Spell">
            <summary>
            A spell changed the health
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eHealthChangeType.Potion">
            <summary>
            A potion changed the health
            </summary>
        </member>
        <member name="T:DOL.GS.GameLiving.eManaChangeType">
            <summary>
            Holds all the ways this living can
            be healed
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eManaChangeType.Unknown">
            <summary>
            Unknown mana change
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eManaChangeType.Regenerate">
            <summary>
            Mana was changed by regenerate
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eManaChangeType.Spell">
            <summary>
            Mana was changed by spell
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eManaChangeType.Potion">
            <summary>
            Mana was changed by potion
            </summary>
        </member>
        <member name="T:DOL.GS.GameLiving.eEnduranceChangeType">
            <summary>
            Holds all the ways this living can
            be healed
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eEnduranceChangeType.Unknown">
            <summary>
            Enduracen was changed by unknown
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eEnduranceChangeType.Regenerate">
            <summary>
            Endurance was changed by Regenerate
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eEnduranceChangeType.Spell">
            <summary>
            Enduracen was changed by spell
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eEnduranceChangeType.Potion">
            <summary>
            Enduracen was changed by potion
            </summary>
        </member>
        <member name="T:DOL.GS.GameLiving.eActiveWeaponSlot">
            <summary>
            Holds the possible activeWeaponSlot values
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eActiveWeaponSlot.Standard">
            <summary>
            Weapon slot righthand
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eActiveWeaponSlot.TwoHanded">
            <summary>
            Weaponslot twohanded
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eActiveWeaponSlot.Distance">
            <summary>
            Weaponslot distance
            </summary>
        </member>
        <member name="T:DOL.GS.GameLiving.eActiveQuiverSlot">
            <summary>
            Holds the possible activeQuiverSlot values
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eActiveQuiverSlot.None">
            <summary>
            No quiver slot active
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eActiveQuiverSlot.First">
            <summary>
            First quiver slot
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eActiveQuiverSlot.Second">
            <summary>
            Second quiver slot
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eActiveQuiverSlot.Third">
            <summary>
            Third quiver slot
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eActiveQuiverSlot.Fourth">
            <summary>
            Fourth quiver slot
            </summary>
        </member>
        <member name="T:DOL.GS.GameLiving.InterruptAction">
            <summary>
            Interrupts the target for the specified duration
            </summary>
        </member>
        <member name="T:DOL.GS.RegionAction">
            <summary>
            The base class for all timed region actions
            </summary>
        </member>
        <member name="T:DOL.GS.GameTimer">
            <summary>
            The GameTimer class invokes OnTick() method after
            certain intervals which are defined in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.m_nextTimer">
            <summary>
            Stores the reference to the next timer in the chain
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.m_tick">
            <summary>
            Stores the next execution tick and flags
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.m_interval">
            <summary>
            Stores the timer intervals
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.m_targetTime">
            <summary>
            Stores the time where the timer was inserted
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.m_time">
            <summary>
            Stores the time manager used for this timer
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TIMER_DISABLED">
            <summary>
            Flags the timer as disabled
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TIMER_RESCHEDULED">
            <summary>
            Flags the current tick timers as rescheduled
            </summary>
        </member>
        <member name="M:DOL.GS.GameTimer.#ctor(DOL.GS.GameTimer.TimeManager)">
            <summary>
            Constructs a new GameTimer
            </summary>
            <param name="time">The time manager for this timer</param>
        </member>
        <member name="M:DOL.GS.GameTimer.ToString">
            <summary>
            Returns short information about the timer
            </summary>
            <returns>Short info about the timer</returns>
        </member>
        <member name="M:DOL.GS.GameTimer.Start(System.Int32)">
            <summary>
            Starts the timer with defined initial delay
            </summary>
            <param name="initialDelay">The initial timer delay. Must be more than 0 and less than MaxInterval</param>
        </member>
        <member name="M:DOL.GS.GameTimer.Stop">
            <summary>
            Stops the timer
            </summary>
        </member>
        <member name="M:DOL.GS.GameTimer.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="M:DOL.GS.GameTimer.GetTickCount">
            <summary>
            Get the tick count, this is needed because Environment.TickCount resets to 0
            when server has been up 48 days because it returned an int,
            this is a long
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.GameTimer.TimeUntilElapsed">
            <summary>
            Gets the time left until this timer fires, in milliseconds.
            </summary>
        </member>
        <member name="P:DOL.GS.GameTimer.Interval">
            <summary>
            Gets or sets the timer intervals in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.GameTimer.MaxInterval">
            <summary>
            Gets the maximal allowed interval
            </summary>
        </member>
        <member name="P:DOL.GS.GameTimer.IsAlive">
            <summary>
            Checks whether this timer is disabled
            </summary>
        </member>
        <member name="T:DOL.GS.GameTimer.TimeManager">
            <summary>
            This class manages all the GameTimers. It is started from
            within the GameServer.Start() method and stopped from
            within the GameServer.Stop() method. It runs an own thread
            when it is started, that cylces through all GameTimers and
            executes them at the right moment.
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.CACHE_BITS">
            <summary>
            The size of cache array with 1ms granularity, in bits
            Must be more than or equal to one bucket size
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.BUCKET_BITS">
            <summary>
            The bucket size in bits. All timers with same high bits get into same bucket.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:DOL.GS.GameTimer.TimeManager.TABLE_BITS" -->
        <member name="F:DOL.GS.GameTimer.TimeManager.LONGTERM_BITS">
            <summary>
            Defines amount of bits that don't fit the fixed time table.
            Two highest bits are reserved for flags.
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.CACHE_MASK">
            <summary>
            Defines the bitmask used to get timer cache bucket index
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.BUCKET_MASK">
            <summary>
            Defines the bitmask used for a check if new bucket should be sorted
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.TABLE_MASK">
            <summary>
            Defines the bitmask used to get timer bucket index
            (after shifting it by BUCKET_BITS!)
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.LONGTERM_MASK">
            <summary>
            Defines the bitmask used to check if timer should be delayed for another table loop
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.TICK_MASK">
            <summary>
            Defines the bitmask used to "overflow" the current millisecond
            so that time table starts from 0 again.
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.m_timeThread">
            <summary>
            The time thread
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.m_name">
            <summary>
            The time thread name
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.m_running">
            <summary>
            The timer is running while this flag is true
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.m_tick">
            <summary>
            The current virtual millisecond, overflows when it reach the time table end
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.m_time">
            <summary>
            The current manager time in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.m_cachedBucket">
            <summary>
            The cached bucket with 1ms granularity.
            All intervals that fit this array don't need sorting.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:DOL.GS.GameTimer.TimeManager.m_buckets" -->
        <member name="F:DOL.GS.GameTimer.TimeManager.m_activeTimers">
            <summary>
            The count of active timers in the manager
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.m_invokedCount">
            <summary>
            The count of invoked timers
            </summary>
        </member>
        <member name="M:DOL.GS.GameTimer.TimeManager.#ctor(System.String)">
            <summary>
            Constructs a new time manager
            </summary>
            <param name="name">Thread name</param>
        </member>
        <member name="M:DOL.GS.GameTimer.TimeManager.ToString">
            <summary>
            Returns short description of the time manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameTimer.TimeManager.CountTimers">
            <summary>
            Counts all timers in the table
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameTimer.TimeManager.CheckChain(DOL.GS.GameTimer,System.String)">
            <summary>
            Checks one timers chain
            </summary>
            <param name="t"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameTimer.TimeManager.GetStacktrace">
            <summary>
            Gets the time thread stacktrace
            </summary>
            <returns>stacktrace</returns>
        </member>
        <member name="M:DOL.GS.GameTimer.TimeManager.Start">
            <summary>
            Starts the time manager if not started already
            </summary>
            <returns>success</returns>
        </member>
        <member name="M:DOL.GS.GameTimer.TimeManager.Stop">
            <summary>
            Stops the time manager if not stopped already
            </summary>
            <returns>success</returns>
        </member>
        <member name="M:DOL.GS.GameTimer.TimeManager.InsertTimer(DOL.GS.GameTimer,System.Int32)">
            <summary>
            Inserts the timer into the table.
            </summary>
            <param name="t">The timer to insert</param>
            <param name="offsetTick">The offset from current tick. min value=1, max value&lt;MaxInterval</param>
        </member>
        <member name="M:DOL.GS.GameTimer.TimeManager.RemoveTimer(DOL.GS.GameTimer)">
            <summary>
            Removes the timer from the table.
            </summary>
            <param name="timer">The timer to remove</param>
        </member>
        <member name="M:DOL.GS.GameTimer.TimeManager.RemoveTimerUnsafe(DOL.GS.GameTimer)">
            <summary>
            Removes the timer from the table without locking the table
            </summary>
            <param name="timer">The timer to remove</param>
        </member>
        <member name="M:DOL.GS.GameTimer.TimeManager.TimeThread">
            <summary>
            The time thread loop
            </summary>
        </member>
        <member name="P:DOL.GS.GameTimer.TimeManager.MaxInterval">
            <summary>
            Gets the maximal allowed interval
            </summary>
        </member>
        <member name="P:DOL.GS.GameTimer.TimeManager.CurrentTick">
            <summary>
            Gets the current virtual millisecond which is reset after TICK_MASK ticks
            </summary>
        </member>
        <member name="P:DOL.GS.GameTimer.TimeManager.CurrentTime">
            <summary>
            Gets the current manager time in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.GameTimer.TimeManager.Running">
            <summary>
            True if manager is active
            </summary>
        </member>
        <member name="P:DOL.GS.GameTimer.TimeManager.Name">
            <summary>
            Gets the manager name
            </summary>
        </member>
        <member name="P:DOL.GS.GameTimer.TimeManager.ActiveTimers">
            <summary>
            Gets the current count of active timers
            </summary>
        </member>
        <member name="P:DOL.GS.GameTimer.TimeManager.InvokedCount">
            <summary>
            Gets the invoked timers count
            </summary>
        </member>
        <member name="T:DOL.GS.GameTimer.TimeManager.CacheBucket">
            <summary>
            Holds the first and the last timers in the chain
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.CacheBucket.FirstTimer">
            <summary>
            The first timer in the chain
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.CacheBucket.LastTimer">
            <summary>
            The last timer in the chain
            </summary>
        </member>
        <member name="F:DOL.GS.GameTimer.TimeManager.CacheBucket.EmptyBucket">
            <summary>
            The empty bucket
            </summary>
        </member>
        <member name="F:DOL.GS.RegionAction.m_actionSource">
            <summary>
            The source of the action
            </summary>
        </member>
        <member name="M:DOL.GS.RegionAction.#ctor(DOL.GS.GameObject)">
            <summary>
            Constructs a new region action
            </summary>
            <param name="actionSource">The action source</param>
        </member>
        <member name="M:DOL.GS.RegionAction.ToString">
            <summary>
            Returns short information about the timer
            </summary>
            <returns>Short info about the timer</returns>
        </member>
        <member name="F:DOL.GS.GameLiving.InterruptAction.m_attacker">
            <summary>
            Holds the interrupt source
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.InterruptAction.m_duration">
            <summary>
            The full duration of interrupts in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.InterruptAction.m_attackType">
            <summary>
            Holds the interrupt attack data
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.InterruptAction.#ctor(DOL.GS.GameLiving,DOL.GS.GameLiving,System.Int32,DOL.GS.AttackData.eAttackType)">
            <summary>
            Constructs a new interrupt action
            </summary>
            <param name="target">The interrupt target</param>
            <param name="attacker">The attacker that is interrupting</param>
            <param name="duration">The interrupt duration in milliseconds</param>
            <param name="attackType">the type of attack</param>
        </member>
        <member name="M:DOL.GS.GameLiving.InterruptAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.GameLiving.eCheckRangeAttackStateResult">
            <summary>
            The possible results for prechecks for range attacks
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eCheckRangeAttackStateResult.Hold">
            <summary>
            Hold the shot/throw
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eCheckRangeAttackStateResult.Fire">
            <summary>
            Fire the shot/throw
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.eCheckRangeAttackStateResult.Stop">
            <summary>
            Stop the attack
            </summary>
        </member>
        <member name="T:DOL.GS.GameLiving.AttackAction">
            <summary>
            The attack action of this living
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.AttackAction.#ctor(DOL.GS.GameLiving)">
            <summary>
            Constructs a new attack action
            </summary>
            <param name="owner">The action source</param>
        </member>
        <member name="M:DOL.GS.GameLiving.AttackAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.GameLiving.WeaponOnTargetAction">
            <summary>
            The action when the weapon hurt the target
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.WeaponOnTargetAction.m_target">
            <summary>
            The target of the attack
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.WeaponOnTargetAction.m_attackWeapon">
            <summary>
            The weapon of the attack
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.WeaponOnTargetAction.m_leftWeapon">
            <summary>
            The weapon in the left hand of the attacker
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.WeaponOnTargetAction.m_leftHandSwingCount">
            <summary>
            The number of swing witch must be done by the left weapon
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.WeaponOnTargetAction.m_effectiveness">
            <summary>
            The effectiveness of the attack
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.WeaponOnTargetAction.m_interruptDuration">
            <summary>
            The interrupt duration of the attack
            </summary>
        </member>
        <member name="F:DOL.GS.GameLiving.WeaponOnTargetAction.m_combatStyle">
            <summary>
            The combat style of the attack
            </summary>
        </member>
        <member name="M:DOL.GS.GameLiving.WeaponOnTargetAction.#ctor(DOL.GS.GameLiving,DOL.GS.GameObject,DOL.Database.InventoryItem,DOL.Database.InventoryItem,System.Int32,System.Double,System.Int32,DOL.GS.Styles.Style)">
            <summary>
            Constructs a new attack action
            </summary>
            <param name="owner">The action source</param>
            <param name="attackWeapon">the weapon used to attack</param>
            <param name="combatStyle">the style used</param>
            <param name="effectiveness">the effectiveness</param>
            <param name="interruptDuration">the interrupt duration</param>
            <param name="leftHandSwingCount">the left hand swing count</param>
            <param name="leftWeapon">the left hand weapon used to attack</param>
            <param name="target">the target of the attack</param>
        </member>
        <member name="M:DOL.GS.GameLiving.WeaponOnTargetAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.FOLLOWCHECKTICKS">
            <summary>
            The interval between follow checks, in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.RESTORE_HEADING_ACTION_PROP">
            <summary>
            The property used to store the NPC heading restore action
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.CHARMED_TICK_PROP">
            <summary>
            The property that holds charmed tick if any
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.CHARMED_NOEXP_TIMEOUT">
            <summary>
            The duration of no exp after charmed, in game ticks
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_size">
            <summary>
            Holds the size of the NPC
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_faction">
            <summary>
            Holds the Faction of the NPC
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_flags">
            <summary>
            Holds various flags of this npc
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_spawnX">
            <summary>
            Spawn X coordinate
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_spawnY">
            <summary>
            Spawn Y coordinate
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_spawnZ">
            <summary>
            Spawn Z coordinate
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_spawnHeading">
            <summary>
            Spawn Heading
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_lastUpdateTickCount">
            <summary>
            The last time this NPC sent the 0x09 update packet
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_lastVisibleToPlayerTick">
            <summary>
            The last time this NPC was actually updated to at least one player
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_currentWayPoint">
            <summary>
            Stores the currentwaypoint that npc has to wander to
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_pathingNormalSpeed">
            <summary>
            Stores the speed for traveling on path
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_targetX">
            <summary>
            Target X coordinate to walk to
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_targetY">
            <summary>
            Target Y coordinate to walk to
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_targetZ">
            <summary>
            Target Z coordinate to walk to
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_arriveAtTargetAction">
            <summary>
            Timer to be set if an OnArriveAtTarget
            handler is set before calling the WalkTo function
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_closeToTargetAction">
            <summary>
            Timer to be set if an OnCloseToTarget
            handler is set before calling the WalkTo function
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_followTarget">
            <summary>
            Object that this npc is following as weakreference
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_followMaxDist">
            <summary>
            Max range to keep following
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_followMinDist">
            <summary>
            Min range to keep to the target
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_followTimer">
            <summary>
            Timer with purpose of follow updating
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.FOLLOW_TARGET_IN_RANGE">
            <summary>
            Property entry on follow timer, wether the follow target is in range
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.RecalculatePostionAddition">
            <summary>
            Recalculates position addition values of this living
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.IsOnTarget">
            <summary>
            Returns if the mob has arrived on its target
            </summary>
            <returns>true if on target</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.TurnTo(System.Int32,System.Int32)">
            <summary>
            Turns the npc towards a specific spot
            </summary>
            <param name="tx">Target X</param>
            <param name="ty">Target Y</param>
        </member>
        <member name="M:DOL.GS.GameNPC.TurnTo(System.UInt16)">
            <summary>
            Turns the npc towards a specific heading
            </summary>
            <param name="newHeading">the new heading</param>
        </member>
        <member name="M:DOL.GS.GameNPC.TurnTo(DOL.GS.GameObject)">
            <summary>
            Turns the NPC towards a specific gameObject
            which can be anything ... a player, item, mob, npc ...
            </summary>
            <param name="target">GameObject to turn towards</param>
        </member>
        <member name="M:DOL.GS.GameNPC.TurnTo(DOL.GS.GameObject,System.Int32)">
            <summary>
            Turns the NPC towards a specific gameObject
            which can be anything ... a player, item, mob, npc ...
            and turn back after specified duration
            </summary>
            <param name="target">GameObject to turn towards</param>
            <param name="duration">restore heading after this duration</param>
        </member>
        <member name="M:DOL.GS.GameNPC.WalkTo(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This function is used to make the npc move towards
            a certain target spot within this region. The target
            spot should be in the same or an adjacent Zone of the
            npc
            </summary>
            <param name="tx">target x</param>
            <param name="ty">target y</param>
            <param name="tz">target z (or 0 to put the mob on the ground)</param>
            <param name="speed">walk speed</param>
        </member>
        <member name="M:DOL.GS.GameNPC.WalkTo(DOL.GS.IPoint3D,System.Int32)">
            <summary>
            Walk to a certain point with given speed
            </summary>
            <param name="p"></param>
            <param name="speed"></param>
        </member>
        <member name="M:DOL.GS.GameNPC.WalkToSpawn">
            <summary>
            Walk to the spawn point
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.Walk(System.Int32)">
            <summary>
            This function is used to start the mob walking. It will
            walk in the heading direction until the StopMovement function
            is called
            </summary>
            <param name="speed">walk speed</param>
        </member>
        <member name="M:DOL.GS.GameNPC.StopMoving">
            <summary>
            Stops the movement of the mob
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.Follow(DOL.GS.GameObject,System.Int32,System.Int32)">
            <summary>
            Follow given object
            </summary>
            <param name="followTarget">target to follow</param>
            <param name="minDistance">min distance to keep to the target</param>
            <param name="maxDistance">max distance to keep following</param>
        </member>
        <member name="M:DOL.GS.GameNPC.StopFollow">
            <summary>
            Stop following
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.FollowTargetInRange">
            <summary>
            Will be called if follow mode is active
            and we reached the follow target
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.FollowTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            Keep following a specific object at a max distance
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.DisableTurning(System.Boolean)">
            <summary>
            Disables the turning for this living
            </summary>
            <param name="add"></param>
        </member>
        <member name="M:DOL.GS.GameNPC.LoadEquipmentTemplateFromDatabase(System.String)">
            <summary>
            Loads the equipment template of this npc
            </summary>
            <param name="equipmentTemplateID">The template id</param>
        </member>
        <member name="M:DOL.GS.GameNPC.LoadFromDatabase(DOL.Database.DataObject)">
            <summary>
            Load a npc from the npc template
            </summary>
            <param name="obj">template to load from</param>
        </member>
        <member name="M:DOL.GS.GameNPC.DeleteFromDatabase">
            <summary>
            Deletes the mob from the database
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.SaveIntoDatabase">
            <summary>
            Saves a mob into the db if it exists, it is
            updated, else it creates a new object in the DB
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.LoadTemplate(DOL.GS.INpcTemplate)">
            <summary>
            Load a NPC template onto this NPC
            </summary>
            <param name="template"></param>
        </member>
        <member name="M:DOL.GS.GameNPC.SwitchWeapon(DOL.GS.GameLiving.eActiveWeaponSlot)">
            <summary>
            Switches the active weapon to another one
            </summary>
            <param name="slot">the new eActiveWeaponSlot</param>
        </member>
        <member name="F:DOL.GS.GameNPC.m_equipmentTemplateID">
            <summary>
            Equipment templateID
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.UpdateNPCEquipmentAppearance">
            <summary>
            Updates the items on a character
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_questListToGive">
            <summary>
            Holds all the quests this npc can give to players
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.AddQuestToGive(System.Type)">
            <summary>
            Adds a quest type to the npc questlist
            </summary>
            <param name="questType">The quest type to add</param>
            <returns>true if added, false if the npc has already the quest!</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.RemoveQuestToGive(System.Type)">
            <summary>
            Adds a quest to the npc questlist
            </summary>
            <param name="questType">The questType to remove</param>
            <returns>true if added, false if the npc has already the quest!</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.CanGiveQuest(System.Type,DOL.GS.GamePlayer)">
            <summary>
            Check if the npc can give the specified quest to a player
            </summary>
            <param name="questType">The type of the quest</param>
            <param name="player">The player who search a quest</param>
            <returns>the number of time the quest can be done again</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.CanGiveOneQuest(DOL.GS.GamePlayer)">
            <summary>
            Check if the npc can give one quest to a player
            </summary>
            <param name="player">The player to check</param>
            <returns>true if yes, false if the npc can give any quest</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.GiveQuest(System.Type,DOL.GS.GamePlayer,System.Int32)">
            <summary>
            Give a quest a to specific player
            </summary>
            <param name="questType">The quest type</param>
            <param name="player">The player that gets the quest</param>
            <param name="startStep">The starting quest step</param>
            <returns>true if added, false if the player do already the quest!</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.HasQuest(System.Type)">
            <summary>
            Checks if this npc already have a specified quest
            </summary>
            <param name="questType">The quest type</param>
            <returns>the quest if the npc have the quest or null if not</returns>
        </member>
        <member name="F:DOL.GS.GameNPC.Riders">
            <summary>
            Holds the rider of this NPC as weak reference
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.RiderMount(DOL.GS.GamePlayer,System.Boolean)">
            <summary>
            This function is called when a rider mounts this npc
            Since only players can ride NPC's you should use the
            GamePlayer.MountSteed function instead to make sure all
            callbacks are called correctly
            </summary>
            <param name="rider">GamePlayer that is the rider</param>
            <param name="forced">if true, mounting can't be prevented by handlers</param>
            <returns>true if mounted successfully</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.RiderDismount(System.Boolean,DOL.GS.GamePlayer)">
            <summary>
            Called to dismount a rider from this npc.
            Since only players can ride NPC's you should use the
            GamePlayer.MountSteed function instead to make sure all
            callbacks are called correctly
            </summary>
            <param name="forced">if true, the dismounting can't be prevented by handlers</param>
            <param name="player">the player that is dismounting</param>
            <returns>true if dismounted successfully</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.GetFreeArrayLocation">
            <summary>
            Get a free array location on the NPC
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameNPC.RiderArrayLocation(DOL.GS.GamePlayer)">
            <summary>
            Get the riders array location
            </summary>
            <param name="player">the player to get location of</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameNPC.RiderSlot(DOL.GS.GamePlayer)">
            <summary>
            Get the riders slot on the npc
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameNPC.BroadcastUpdate">
            <summary>
            Broadcasts the npc to all players around
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.NPCUpdatedCallback">
            <summary>
            callback that npc was updated to the world
            so it must be visible to at least one player
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.AddToWorld">
            <summary>
            Adds the npc to the world
            </summary>
            <returns>true if the npc has been successfully added</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.RemoveFromWorld">
            <summary>
            Removes the npc from the world
            </summary>
            <returns>true if the npc has been successfully removed</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.Delete">
            <summary>
            Marks this object as deleted!
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_ownBrain">
            <summary>
            Holds the own NPC brain
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_brains">
            <summary>
            Holds the all added to this npc brains
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_brainSync">
            <summary>
            The sync object for brain changes
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.SetOwnBrain(DOL.AI.ABrain)">
            <summary>
            Sets the NPC own brain
            </summary>
            <param name="brain">The new brain</param>
            <returns>The old own brain</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.AddBrain(DOL.AI.ABrain)">
            <summary>
            Adds a temporary brain to Npc, last added brain is active
            </summary>
            <param name="newBrain"></param>
        </member>
        <member name="M:DOL.GS.GameNPC.RemoveBrain(DOL.AI.ABrain)">
            <summary>
            Removes a temporary brain from Npc
            </summary>
            <param name="removeBrain">The brain to remove</param>
            <returns>True if brain was found</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.GetAggroLevelString(DOL.GS.GamePlayer,System.Boolean)">
            <summary>
            How friendly this NPC is to player
            </summary>
            <param name="player">GamePlayer that is examining this object</param>
            <param name="firstLetterUppercase"></param>
            <returns>aggro state as string</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.GetExamineMessages(DOL.GS.GamePlayer)">
            <summary>
            Adds messages to ArrayList which are sent when object is targeted
            </summary>
            <param name="player">GamePlayer that is examining this object</param>
            <returns>list with string messages</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.Interact(DOL.GS.GamePlayer)">
            <summary>
            This function is called from the ObjectInteractRequestHandler
            </summary>
            <param name="player">GamePlayer that interacts with this object</param>
            <returns>false if interaction is prevented</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.SayTo(DOL.GS.GamePlayer,System.String)">
            <summary>
            Format "say" message and send it to target in popup window
            </summary>
            <param name="target"></param>
            <param name="message"></param>
        </member>
        <member name="M:DOL.GS.GameNPC.SayTo(DOL.GS.GamePlayer,DOL.GS.PacketHandler.eChatLoc,System.String)">
            <summary>
            Format "say" message and send it to target
            </summary>
            <param name="target"></param>
            <param name="loc">chat location of the message</param>
            <param name="message"></param>
        </member>
        <member name="M:DOL.GS.GameNPC.StartAttack(DOL.GS.GameObject)">
            <summary>
            Starts a melee attack on a target
            </summary>
            <param name="attackTarget">The object to attack</param>
        </member>
        <member name="M:DOL.GS.GameNPC.Die(DOL.GS.GameObject)">
            <summary>
            Called when this living dies
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_meleeDamageType">
            <summary>
            Stores the melee damage type of this NPC
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.AttackDamageType(DOL.Database.InventoryItem)">
            <summary>
            Returns the damage type of the current attack
            </summary>
            <param name="weapon">attack weapon</param>
        </member>
        <member name="F:DOL.GS.GameNPC.m_evadeChance">
            <summary>
            Stores the NPC evade chance
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_blockChance">
            <summary>
            Stores the NPC block chance
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_parryChance">
            <summary>
            Stores the NPC parry chance
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_leftHandSwingChance">
            <summary>
            Stores the NPC left hand swing chance
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.CalculateLeftHandSwingCount">
            <summary>
            Calculates how many times left hand swings
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameNPC.SwitchToMelee(DOL.GS.GameObject)">
            <summary>
            Method to switch the npc to Melee attacks
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.GameNPC.SwitchToRanged(DOL.GS.GameObject)">
            <summary>
            Method to switch the guard to Ranged attacks
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.GameNPC.OnInterruptTick(DOL.GS.GameLiving,DOL.GS.AttackData.eAttackType)">
            <summary>
            If npcs cant move, they cant be interupted from range attack
            </summary>
            <param name="attacker"></param>
            <param name="attackType"></param>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.GameNPC.m_respawnInterval">
            <summary>
            The time to wait before each mob respawn
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_respawnTimer">
            <summary>
            A timer that will respawn this mob
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.m_respawnTimerLock">
            <summary>
            The sync object for respawn timer modifications
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.StartRespawn">
            <summary>
            Starts the Respawn Timer
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.RespawnTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            The callback that will respawn this mob
            </summary>
            <param name="respawnTimer">the timer calling this callback</param>
            <returns>the new interval</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.HealthRegenerationTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            Callback timer for health regeneration
            </summary>
            <param name="selfRegenerationTimer">the regeneration timer</param>
            <returns>the new interval</returns>
        </member>
        <member name="M:DOL.GS.GameNPC.AttackCriticalChance(DOL.Database.InventoryItem)">
            <summary>
            The chance for a critical hit
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.StopAttack">
            <summary>
            Stops all attack actions, including following target
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.DropLoot(DOL.GS.GameObject)">
            <summary>
            This method is called to drop loot after this mob dies
            </summary>
            <param name="killer">The killer</param>
        </member>
        <member name="M:DOL.GS.GameNPC.StartSpellAttack(DOL.GS.GameObject)">
            <summary>
            start to cast spell attack in continue until takken melee damage
            </summary>
            <param name="attackTarget"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameNPC.StopSpellAttack">
            <summary>
            stop the spell attack
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.OnAfterSpellCastSequence(DOL.GS.Spells.ISpellHandler)">
            <summary>
            Callback after spell execution finished and next spell can be processed
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:DOL.GS.GameNPC.Buff">
             <summary>
            
             </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Handle event notifications
            </summary>
            <param name="e">The event</param>
            <param name="sender">The sender</param>
            <param name="args">The arguements</param>
        </member>
        <member name="M:DOL.GS.GameNPC.#ctor">
            <summary>
            Constructs a NPC
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.#ctor(DOL.GS.INpcTemplate)">
            <summary>
            create npc from template
            </summary>
            <param name="template">template of generator</param>
        </member>
        <member name="P:DOL.GS.GameNPC.Size">
            <summary>
            Gets or sets the size of the npc
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Model">
            <summary>
            Gets or sets the model of this npc
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Heading">
            <summary>
            Gets or sets the heading of this NPC
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Level">
            <summary>
            Gets or sets the level of this NPC
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.EffectiveLevel">
            <summary>
            Gets or Sets the effective level of the Object
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Realm">
            <summary>
            Gets or sets the Realm of this NPC
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Name">
            <summary>
            Gets or sets the name of this npc
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.GuildName">
            <summary>
            Gets or sets the guild name
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Faction">
            <summary>
            Gets the Faction of the NPC
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.LinkedFactions">
            <summary>
            The linked factions for this NPC
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Flags">
            <summary>
            Gets or Sets the flags of this npc
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.IsVisibleToPlayers">
            <summary>
            Shows wether any player sees that mob
            we dont need to calculate things like AI if mob is in no way
            visible to at least one player
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.SpawnX">
            <summary>
            Gets or sets the spawnposition of this npc
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.SpawnY">
            <summary>
            Gets or sets the spawnposition of this npc
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.SpawnZ">
            <summary>
            Gets or sets the spawnposition of this npc
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.SpawnHeading">
            <summary>
            Gets or sets the spawnheading of this npc
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.CurrentSpeed">
            <summary>
            Gets or sets the current speed of the npc
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.CurrentWayPoint">
            <summary>
            Gets sets the currentwaypoint that npc has to wander to
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.PathingNormalSpeed">
            <summary>
            Gets sets the speed for traveling on path
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.X">
            <summary>
            Gets the current X of this living. Don't modify this property
            to try to change position of the mob while active. Use the
            MoveTo function instead
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Y">
            <summary>
            Gets the current Y of this NPC. Don't modify this property
            to try to change position of the mob while active. Use the
            MoveTo function instead
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Z">
            <summary>
            Gets the current Z of this NPC. Don't modify this property
            to try to change position of the mob while active. Use the
            MoveTo function instead
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.IsStealthed">
            <summary>
            The stealth state of this NPC
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.TargetX">
            <summary>
            Gets or sets the TargetX
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.TargetY">
            <summary>
            Gets or sets the TargetY
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.TargetZ">
            <summary>
            Gets or sets the TargetZ
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.LastUpdateTickCount">
            <summary>
            Gets the last time this mob was updated
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.LastVisibleToPlayersTickCount">
            <summary>
            Gets the last this this NPC was actually update to at least one player.
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.CurrentFollowTarget">
            <summary>
            Gets the NPC current follow target
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.EquipmentTemplateID">
            <summary>
            The equipment template id of this npc
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.QuestListToGive">
            <summary>
            Gets the questlist of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.MAX_PASSENGERS">
            <summary>
            The maximum passengers the NPC can take
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.SLOT_OFFSET">
            <summary>
            The slot offset for this NPC
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.CurrentRiders">
            <summary>
            Gets a list of the current riders
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.CurrentRegion">
            <summary>
            Gets or Sets the current Region of the Object
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.BrainSync">
            <summary>
            Gets the brain sync object
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Brain">
            <summary>
            Gets the current brain of this NPC
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Health">
            <summary>
            Gets/sets the object health
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Mana">
            <summary>
            npcs can always have mana to cast
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.MaxMana">
            <summary>
            The Max Mana for this NPC
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Concentration">
            <summary>
            The Concentration for this NPC
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.IsWorthReward">
            <summary>
            Tests if this MOB should give XP and loot based on the XPGainers
            </summary>
            <returns>true if it should deal XP and give loot</returns>
        </member>
        <member name="P:DOL.GS.GameNPC.MeleeDamageType">
            <summary>
            Gets or sets the melee damage type of this NPC
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.EvadeChance">
            <summary>
            Gets or sets the NPC evade chance
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.BlockChance">
            <summary>
            Gets or sets the NPC block chance
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.ParryChance">
            <summary>
            Gets or sets the NPC parry chance
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.LeftHandSwingChance">
            <summary>
            Gets or sets the NPC left hand swing chance
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.CanUseLefthandedWeapon">
            <summary>
            Checks whether Living has ability to use lefthanded weapons
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.RespawnInterval">
            <summary>
            The Respawn Interval of this mob in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.IsAlive">
            <summary>
            Is the mob alive
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.IsRespawning">
            <summary>
            Is the mob respawning
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Spells">
            <summary>
            property of spell array of NPC
            </summary>
        </member>
        <member name="P:DOL.GS.GameNPC.Styles">
            <summary>
            The Styles for this NPC
            </summary>
        </member>
        <member name="T:DOL.GS.GameNPC.eFlags">
            <summary>
            Various flags for this npc
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.eFlags.TRANSPARENT">
            <summary>
            The npc is a ghost, see through, transparent
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.eFlags.STEALTH">
            <summary>
            The npc is stealth (new since 1.71)
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.eFlags.DONTSHOWNAME">
            <summary>
            The npc doesn't show a name above its head but can be targeted
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.eFlags.CANTTARGET">
            <summary>
            The npc doesn't show a name above its head and can't be targeted
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.eFlags.PEACE">
            <summary>
            Not in nearest enemyes if different vs player realm, but can be targeted if model support this
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.eFlags.FLYING">
            <summary>
            The npc is flying (z above ground permitted)
            </summary>
        </member>
        <member name="T:DOL.GS.GameNPC.RestoreHeadingAction">
            <summary>
            Restores the NPC heading after some time
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.RestoreHeadingAction.m_oldHeading">
            <summary>
            The NPCs old heading
            </summary>
        </member>
        <member name="F:DOL.GS.GameNPC.RestoreHeadingAction.m_oldPosition">
            <summary>
            The NPCs old position
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.RestoreHeadingAction.#ctor(DOL.GS.GameNPC)">
            <summary>
            Creates a new TurnBackAction
            </summary>
            <param name="actionSource">The source of action</param>
        </member>
        <member name="M:DOL.GS.GameNPC.RestoreHeadingAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.GameNPC.ArriveAtTargetAction">
            <summary>
            Delayed action that fires an event when an NPC arrives at its target
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.ArriveAtTargetAction.#ctor(DOL.GS.GameNPC)">
            <summary>
            Constructs a new ArriveAtTargetAction
            </summary>
            <param name="actionSource">The action source</param>
        </member>
        <member name="M:DOL.GS.GameNPC.ArriveAtTargetAction.OnTick">
            <summary>
            This function is called when the Mob arrives at its target spot
            It fires the ArriveAtTarget event
            </summary>
        </member>
        <member name="T:DOL.GS.GameNPC.CloseToTargetAction">
            <summary>
            Delayed action that fires an event when an NPC is 200ms away from its target
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPC.CloseToTargetAction.#ctor(DOL.GS.GameNPC)">
            <summary>
            Constructs a new CloseToTargetAction
            </summary>
            <param name="actionSource">The action source</param>
        </member>
        <member name="M:DOL.GS.GameNPC.CloseToTargetAction.OnTick">
            <summary>
            This function is called when the npc is close to its target
            It will fire the CloseToTarget event
            </summary>
        </member>
        <member name="M:DOL.GS.GameTrainer.#ctor">
            <summary>
            Constructs a new GameTrainer
            </summary>
        </member>
        <member name="M:DOL.GS.GameTrainer.GetExamineMessages(DOL.GS.GamePlayer)">
            <summary>
            Adds messages to ArrayList which are sent when object is targeted
            </summary>
            <param name="player">GamePlayer that is examining this object</param>
            <returns>list with string messages</returns>
        </member>
        <member name="M:DOL.GS.GameTrainer.GetAggroLevelString(DOL.GS.GamePlayer,System.Boolean)">
            <summary>
            How friendly this NPC is to player
            </summary>
            <param name="player">GamePlayer that is examining this object</param>
            <param name="firstLetterUppercase"></param>
            <returns>aggro state as string</returns>
        </member>
        <member name="M:DOL.GS.GameTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameTrainer.ReceiveItem(DOL.GS.GameLiving,DOL.Database.InventoryItem)">
            <summary>
            For Recieving Respec Stones. 
            </summary>
            <param name="source"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameTrainer.PromotePlayer(DOL.GS.GamePlayer,System.Int32,System.String,DOL.Database.InventoryItem[])">
            <summary>
            Called to promote a player
            </summary>
            <param name="player">the player to promote</param>
            <param name="classid">the new classid</param>
            <param name="messageToPlayer">the message for the player</param>
            <param name="gifts">Array of inventory items as promotion gifts</param>
            <returns>true if successfull</returns>
        </member>
        <member name="F:DOL.GS.GameTrainer.m_trainerClassName">
            <summary>
            Holds trainer classname
            </summary>
        </member>
        <member name="M:DOL.GS.GameTrainer.addGift(System.String,DOL.GS.GamePlayer)">
            <summary>
            Add a gift to the player
            </summary>
            <param name="template">the template ID of the item</param>
            <param name="player">the player to give it to</param>
            <returns>true if succesful</returns>
        </member>
        <member name="M:DOL.GS.GameTrainer.LoadFromDatabase(DOL.Database.DataObject)">
            <summary>
            Get class name from guild name
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:DOL.GS.GameTrainer.TrainerClassName">
            <summary>
            Gets trainer classname
            </summary>
        </member>
        <member name="M:DOL.GS.Trainer.ThaneTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ThaneTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ThaneTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.WardenTrainer">
            <summary>
            Warden Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.WardenTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.WardenTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.WardenTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.FriarTrainer">
            <summary>
            Friar Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.FriarTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.FriarTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.FriarTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Spells.StyleStun">
            <summary>
            Style stun effect spell handler
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.StunSpellHandler">
            <summary>
            Stun 
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.AbstractCCSpellHandler">
            <summary>
            Abstract CC spell handler
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ImmunityEffectSpellHandler">
            <summary>
            Base class for spells with immunity like mez/root/stun/nearsight
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.SpellHandler">
            <summary>
            Default class for spell handler
            should be used as a base class for spell handler
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ISpellHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ISpellHandler.CastSpell">
            <summary>
            Called when a spell is casted
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ISpellHandler.StartSpell(DOL.GS.GameLiving)">
            <summary>
            Starts the spell, without displaying cast message etc.
            Should be used for StyleEffects, ...
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ISpellHandler.InterruptCasting">
            <summary>
            Whenever the current casting sequence is to be interrupted
            this callback is called
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ISpellHandler.CasterMoves">
            <summary>
            Has to be called when the caster moves
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ISpellHandler.CasterIsAttacked(DOL.GS.GameLiving)">
            <summary>
            Has to be called when the caster is attacked by enemy
            for interrupt checks
            <param name="attacker">attacker that interrupts the cast sequence</param>
            <returns>true if casting was interrupted</returns>
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ISpellHandler.IsNewEffectBetter(DOL.GS.Effects.GameSpellEffect,DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Determines wether new spell is better than existing one
            important for overwriting
            </summary>
            <param name="oldeffect"></param>
            <param name="neweffect"></param>
            <returns>true if new spell is better version</returns>
        </member>
        <member name="M:DOL.GS.Spells.ISpellHandler.IsOverwritable(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Determines wether this spell is compatible with given spell
            and therefore overwritable by better versions
            spells that are overwritable do not stack
            </summary>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.ISpellHandler.OnEffectStart(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Actions to take when the effect starts
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.ISpellHandler.OnEffectPulse(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Actions to take when the effect stops
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.ISpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.ISpellHandler.OnSpellPulse(DOL.GS.Effects.PulsingSpellEffect)">
            <summary>
            When spell pulses
            </summary>
            <param name="effect">The effect doing the pulses</param>
        </member>
        <member name="P:DOL.GS.Spells.ISpellHandler.IsCasting">
            <summary>
            Returns true when spell is in casting phase
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.ISpellHandler.HasPositiveEffect">
            <summary>
            Gets wether this spell has positive or negative impact on targets
            important to determine wether the spell can be canceled by a player
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Spells.ISpellHandler.Caster">
            <summary>
            The Spell Caster
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.ISpellHandler.Spell">
            <summary>
            The Spell
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.ISpellHandler.SpellLine">
            <summary>
            The SpellLine
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.ISpellHandler.DelveInfo">
            <summary>
            The DelveInfo
            </summary>
        </member>
        <member name="E:DOL.GS.Spells.ISpellHandler.CastingCompleteEvent">
            <summary>
            Event raised when casting sequence is completed and execution of spell can start
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.SpellHandler.INTERRUPT_TIMEOUT_PROPERTY">
            <summary>
            The property key for the interrupt timeout
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.SpellHandler.SPELL_INTERRUPT_DURATION">
            <summary>
            The duration for the spell interrupt duration
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.SpellHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.#ctor(DOL.GS.GameLiving,DOL.GS.Spell,DOL.GS.SpellLine)">
            <summary>
            spell handler constructor
            <param name="caster">living that is casting that spell</param>
            <param name="spell">the spell to cast</param>
            <param name="spellLine">the spell line that spell belongs to</param>
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.ToString">
            <summary>
            Returns the string representation of the SpellHandler
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.OnSpellPulse(DOL.GS.Effects.PulsingSpellEffect)">
            <summary>
            When spell pulses
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CheckInstrument">
            <summary>
            Checks if caster holds the right instrument for this spell
            </summary>
            <returns>true if right instrument</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CancelPulsingSpell(DOL.GS.GameLiving,System.String)">
            <summary>
            Cancels first pulsing spell of type
            </summary>
            <param name="living">owner of pulsing spell</param>
            <param name="spellType">type of spell to cancel</param>
            <returns>true if any spells were canceled</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CancelAllPulsingSpells(DOL.GS.GameLiving)">
            <summary>
            Cancels all pulsing spells
            </summary>
            <param name="living"></param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CastSpell">
            <summary>
            called whenever the player clicks on a spell icon
            or a GameLiving wants to cast a spell
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CasterMoves">
            <summary>
            Is called when the caster moves
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CasterIsAttacked(DOL.GS.GameLiving)">
            <summary>
            casting sequence has a chance for interrupt through attack from enemy
            the final decision and the interrupt is done here
            TODO: con level dependend
            </summary>
            <param name="attacker">attacker that interrupts the cast sequence</param>
            <returns>true if casting was interrupted</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CheckBeginCast(DOL.GS.GameLiving)">
            <summary>
            All checks before any casting begins
            </summary>
            <param name="selectedTarget"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CheckLOSYouToPet(DOL.GS.GamePlayer,System.UInt16,System.UInt16)">
            <summary>
            Check the Line of Sight from you to your pet
            </summary>
            <param name="player">The player</param>
            <param name="response">The result</param>
            <param name="targetOID">The target OID</param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CheckLOSYouToTarget(DOL.GS.GamePlayer,System.UInt16,System.UInt16)">
            <summary>
            Check the Line of Sight from you to your target
            </summary>
            <param name="player">The player</param>
            <param name="response">The result</param>
            <param name="targetOID">The target OID</param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CheckLOSPetToTarget(DOL.GS.GamePlayer,System.UInt16,System.UInt16)">
            <summary>
            Check the Line of Sight from your pet to your target
            </summary>
            <param name="player">The player</param>
            <param name="response">The result</param>
            <param name="targetOID">The target OID</param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CheckEndCast(DOL.GS.GameLiving)">
            <summary>
            Checks after casting before spell is executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CalculateNeededPower(DOL.GS.GameLiving)">
            <summary>
            Calculates the power to cast the spell
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CalculateSpellRange">
            <summary>
            Calculates the range to target needed to cast the spell
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.InterruptCasting">
            <summary>
            Called whenever the casters casting sequence is to interrupt immediately
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CalculateCastingTime">
            <summary>
            Calculates the effective casting time
            </summary>
            <returns>effective casting time in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.SendCastAnimation">
            <summary>
            Sends the cast animation
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.SendCastAnimation(System.UInt16)">
            <summary>
            Sends the cast animation
            </summary>
            <param name="castTime">The cast time</param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.SendEffectAnimation(DOL.GS.GameLiving,System.UInt16,System.Boolean,System.Byte)">
            <summary>
            Send the Effect Animation
            </summary>
            <param name="target">The target object</param>
            <param name="boltDuration">The duration of a bolt</param>
            <param name="noSound">sound?</param>
            <param name="success">spell success?</param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.SendInterruptCastAnimation">
            <summary>
            Send the Interrupt Cast Animation
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            called after normal spell cast is completed and effect has to be started
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.SelectTargets(DOL.GS.GameObject)">
            <summary>
            Select all targets for this spell
            </summary>
            <param name="castTarget"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.StartSpell(DOL.GS.GameLiving)">
            <summary>
            called when spell effect has to be started and applied to targets
            </summary>
            <param name="target">The current target object</param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CalculateEffectDuration(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates the effect duration in milliseconds
            </summary>
            <param name="target">The effect target</param>
            <param name="effectiveness">The effect effectiveness</param>
            <returns>The effect duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CreateSpellEffect(DOL.GS.GameLiving,System.Double)">
            <summary>
            Creates the corresponding spell effect for the spell
            </summary>
            <param name="target"></param>
            <param name="effectiveness"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.ApplyEffectOnTarget(DOL.GS.GameLiving,System.Double)">
            <summary>
            Apply effect on target or do spell action if non duration spell
            </summary>
            <param name="target">target that gets the effect</param>
            <param name="effectiveness">factor from 0..1 (0%-100%)</param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.OnAfterSpellCastSequence">
            <summary>
            Called when cast sequence is complete
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.IsNewEffectBetter(DOL.GS.Effects.GameSpellEffect,DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Determines wether this spell is better than given one
            </summary>
            <param name="oldeffect"></param>
            <param name="neweffect"></param>
            <returns>true if this spell is better version than compare spell</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.IsOverwritable(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Determines wether this spell is compatible with given spell
            and therefore overwritable by better versions
            spells that are overwritable cannot stack
            </summary>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.OnDirectEffect(DOL.GS.GameLiving,System.Double)">
            <summary>
            execute non duration spell effect on target
            </summary>
            <param name="target"></param>
            <param name="effectiveness"></param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.OnEffectStart(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            When an applied effect starts
            duration spells only
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.OnEffectPulse(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            When an applied effect pulses
            duration spells only
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CalculateSpellResistChance(DOL.GS.GameLiving)">
            <summary>
            Calculates chance of spell getting resisted
            </summary>
            <param name="target">the target of the spell</param>
            <returns>chance that spell will be resisted for specific target</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.OnSpellResisted(DOL.GS.GameLiving)">
            <summary>
            When spell was resisted
            </summary>
            <param name="target">the target that resisted the spell</param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.MessageToCaster(System.String,DOL.GS.PacketHandler.eChatType)">
            <summary>
            sends a message to the caster
            </summary>
            <param name="message"></param>
            <param name="type"></param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.MessageToLiving(DOL.GS.GameLiving,System.String,DOL.GS.PacketHandler.eChatType)">
            <summary>
            sends a message to a living
            </summary>
            <param name="living"></param>
            <param name="message"></param>
            <param name="type"></param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.FindEffectOnTarget(DOL.GS.GameLiving,System.String)">
            <summary>
            Find effect by spell type
            </summary>
            <param name="target"></param>
            <param name="spellType"></param>
            <returns>first occurance of effect in target's effect list or null</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.FindEffectOnTarget(DOL.GS.GameLiving,DOL.GS.Spells.ISpellHandler)">
            <summary>
            Find effect by spell handler
            </summary>
            <param name="target"></param>
            <param name="spellHandler"></param>
            <returns>first occurance of effect in target's effect list or null</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.FindPulsingSpellOnTarget(DOL.GS.GameLiving,DOL.GS.Spells.ISpellHandler)">
            <summary>
            Find pulsing spell by spell handler
            </summary>
            <param name="living"></param>
            <param name="handler"></param>
            <returns>first occurance of spellhandler in targets' conc list or null</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.GetLevelModFactor">
            <summary>
            Level mod for effect between target and caster if there is any
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CalculateDamageVariance(DOL.GS.GameLiving,System.Double@,System.Double@)">
            <summary>
            Calculates min damage variance %
            </summary>
            <param name="target">spell target</param>
            <param name="min">returns min variance</param>
            <param name="max">returns max variance</param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CalculateDamageBase">
            <summary>
            Calculates the base 100% spell damage which is then modified by damage variance factors
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CalculateToHitChance(DOL.GS.GameLiving)">
            <summary>
            Calculates the chance that the spell lands on target
            can be negative or above 100%
            </summary>
            <param name="target">spell target</param>
            <returns>chance that the spell lands on target</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CalculateDamageToTarget(DOL.GS.GameLiving)">
            <summary>
            Calculates damage to target with resist chance and stores it in ad
            </summary>
            <param name="target">spell target</param>
            <returns>attack data</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.CalculateDamageToTarget(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates damage to target with resist chance and stores it in ad
            </summary>
            <param name="target">spell target</param>
            <param name="effectiveness">value from 0..1 to modify damage</param>
            <returns>attack data</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.SendDamageMessages(DOL.GS.AttackData)">
            <summary>
            Sends damage text messages but makes no damage
            </summary>
            <param name="ad"></param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.DamageTarget(DOL.GS.AttackData,System.Boolean)">
            <summary>
            Make damage to target and send spell effect but no messages
            </summary>
            <param name="ad"></param>
            <param name="showEffectAnimation"></param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.DamageTarget(DOL.GS.AttackData,System.Boolean,System.Int32)">
            <summary>
            Make damage to target and send spell effect but no messages
            </summary>
            <param name="ad"></param>
            <param name="showEffectAnimation"></param>
            <param name="attackResult"></param>
        </member>
        <member name="E:DOL.GS.Spells.SpellHandler.CastingCompleteEvent">
            <summary>
            The CastingCompleteEvent
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.SpellHandler.Spell">
            <summary>
            The Spell
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.SpellHandler.SpellLine">
            <summary>
            The Spell Line
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.SpellHandler.Caster">
            <summary>
            The Caster
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.SpellHandler.IsCasting">
            <summary>
            Is the spell being cast?
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.SpellHandler.HasPositiveEffect">
            <summary>
            Does the spell have a positive effect?
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.SpellHandler.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.SpellHandler.DelayedCastTimer">
            <summary>
            Casts a spell after the CastTime delay
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.SpellHandler.DelayedCastTimer.m_handler">
            <summary>
            The spellhandler instance with callbacks
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.SpellHandler.DelayedCastTimer.m_target">
            <summary>
            The target object at the moment of CastSpell call
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.DelayedCastTimer.#ctor(DOL.GS.GameLiving,DOL.GS.Spells.SpellHandler,DOL.GS.GameLiving)">
            <summary>
            Constructs a new DelayedSpellTimer
            </summary>
            <param name="actionSource">The caster</param>
            <param name="handler">The spell handler</param>
            <param name="target">The target object</param>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.DelayedCastTimer.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpellHandler.DelayedCastTimer.ToString">
            <summary>
            Returns short information about the timer
            </summary>
            <returns>Short info about the timer</returns>
        </member>
        <member name="M:DOL.GS.Spells.ImmunityEffectSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            called when spell effect has to be started and applied to targets
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ImmunityEffectSpellHandler.IsNewEffectBetter(DOL.GS.Effects.GameSpellEffect,DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Determines wether this spell is better than given one
            </summary>
            <param name="oldeffect"></param>
            <param name="neweffect"></param>
            <returns>true if this spell is better version than compare spell</returns>
        </member>
        <member name="M:DOL.GS.Spells.ImmunityEffectSpellHandler.ApplyEffectOnTarget(DOL.GS.GameLiving,System.Double)">
            <summary>
            Apply effect on target or do spell action if non duration spell
            </summary>
            <param name="target">target that gets the effect</param>
            <param name="effectiveness">factor from 0..1 (0%-100%)</param>
        </member>
        <member name="M:DOL.GS.Spells.ImmunityEffectSpellHandler.CalculateEffectDuration(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates the effect duration in milliseconds
            </summary>
            <param name="target">The effect target</param>
            <param name="effectiveness">The effect effectiveness</param>
            <returns>The effect duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.ImmunityEffectSpellHandler.CreateSpellEffect(DOL.GS.GameLiving,System.Double)">
            <summary>
            Creates the corresponding spell effect for the spell
            </summary>
            <param name="target"></param>
            <param name="effectiveness"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.AbstractCCSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.StunSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.StunSpellHandler.CalculateEffectDuration(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates the effect duration in milliseconds
            </summary>
            <param name="target">The effect target</param>
            <param name="effectiveness">The effect effectiveness</param>
            <returns>The effect duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.StunSpellHandler.IsOverwritable(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Determines wether this spell is compatible with given spell
            and therefore overwritable by better versions
            spells that are overwritable cannot stack
            </summary>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.StyleStun.CalculateEffectDuration(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates the effect duration in milliseconds
            </summary>
            <param name="target">The effect target</param>
            <param name="effectiveness">The effect effectiveness</param>
            <returns>The effect duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.StyleStun.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.StyleStun.IsOverwritable(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Determines wether this spell is compatible with given spell
            and therefore overwritable by better versions
            spells that are overwritable cannot stack
            </summary>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Spells.StyleCombatSpeedDebuff">
            <summary>
            Style combat speed debuff effect spell handler
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.CombatSpeedDebuff">
            <summary>
            Combat Speed debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.SingleStatDebuff">
            <summary>
            Debuffs a single stat
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.SingleStatBuff">
            <summary>
            Buffs a single stat,
            considered as a baseline buff (regarding the bonuscategories on statproperties)
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.PropertyChangingSpell">
            <summary>
            Spell to change up to 3 property bonuses at once
            in one their specific given bonus category
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.PropertyChangingSpell.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            Execute property changing spell
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.Spells.PropertyChangingSpell.OnEffectStart(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            start changing effect on target
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.PropertyChangingSpell.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="P:DOL.GS.Spells.PropertyChangingSpell.Property1">
            <summary>
            Property 1 which bonus value has to be changed
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.PropertyChangingSpell.Property2">
            <summary>
            Property 2 which bonus value has to be changed
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.PropertyChangingSpell.Property3">
            <summary>
            Property 3 which bonus value has to be changed
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.PropertyChangingSpell.BonusCategory1">
            <summary>
            Bonus Category where to change the Property1
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.PropertyChangingSpell.BonusCategory2">
            <summary>
            Bonus Category where to change the Property2
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.PropertyChangingSpell.BonusCategory3">
            <summary>
            Bonus Category where to change the Property3
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SingleStatBuff.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            send updates about the changes
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.Spells.SingleStatBuff.ApplyEffectOnTarget(DOL.GS.GameLiving,System.Double)">
            <summary>
            Apply effect on target or do spell action if non duration spell
            </summary>
            <param name="target">target that gets the effect</param>
            <param name="effectiveness">factor from 0..1 (0%-100%)</param>
        </member>
        <member name="M:DOL.GS.Spells.SingleStatBuff.IsOverwritable(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Determines wether this spell is compatible with given spell
            and therefore overwritable by better versions
            spells that are overwritable cannot stack
            </summary>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.SingleStatDebuff.ApplyEffectOnTarget(DOL.GS.GameLiving,System.Double)">
            <summary>
            Apply effect on target or do spell action if non duration spell
            </summary>
            <param name="target">target that gets the effect</param>
            <param name="effectiveness">factor from 0..1 (0%-100%)</param>
        </member>
        <member name="M:DOL.GS.Spells.SingleStatDebuff.CalculateEffectDuration(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates the effect duration in milliseconds
            </summary>
            <param name="target">The effect target</param>
            <param name="effectiveness">The effect effectiveness</param>
            <returns>The effect duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.CombatSpeedDebuff.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            send updates about the changes
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.Spells.StyleCombatSpeedDebuff.CalculateEffectDuration(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates the effect duration in milliseconds
            </summary>
            <param name="target">The effect target</param>
            <param name="effectiveness">The effect effectiveness</param>
            <returns>The effect duration in milliseconds</returns>
        </member>
        <member name="T:DOL.GS.Spells.SpellHandlerAttribute">
            <summary>
            denotes a class as a spelltype handler for given spell type
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.SpellHandlerAttribute.SpellType">
            <summary>
            Spell type name of the denoted handler
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.RemoveSpellEffectHandler">
            <summary>
            Base class for all spells that remove effects
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.RemoveSpellEffectHandler.m_spellTypeToRemove">
            <summary>
            Stores spell effect type that will be removed
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.RemoveSpellEffectHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            called when spell effect has to be started and applied to targets
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.Spells.RemoveSpellEffectHandler.OnDirectEffect(DOL.GS.GameLiving,System.Double)">
            <summary>
            execute non duration spell effect on target
            </summary>
            <param name="target"></param>
            <param name="effectiveness"></param>
        </member>
        <member name="P:DOL.GS.Spells.RemoveSpellEffectHandler.SpellTypeToRemove">
            <summary>
            Spell effect type that will be removed
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.SavageSlashResistHandler">
            <summary>
            Summary description for SavageHasteHandler.
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.SlashResistBuff">
            <summary>
            Slash buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.AbstractResistBuff">
            <summary>
            Base class for all resist buffs, needed to set effectiveness
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.AbstractResistBuff.ApplyEffectOnTarget(DOL.GS.GameLiving,System.Double)">
            <summary>
            Apply effect on target or do spell action if non duration spell
            </summary>
            <param name="target">target that gets the effect</param>
            <param name="effectiveness">factor from 0..1 (0%-100%)</param>
        </member>
        <member name="T:DOL.GS.Quests.AbstractQuestAction">
            <summary>
            If one trigger and all requirements are fulfilled the corresponding actions of
            a QuestAction will we executed one after another. Actions can be more or less anything:
            at the moment there are: GiveItem, TakeItem, Talk, Give Quest, Increase Quest Step, FinishQuest,
            etc....
            </summary>
        </member>
        <member name="T:DOL.GS.Quests.IQuestAction">
            <summary>
            If one trigger and all requirements are fulfilled the corresponding actions of
            a QuestAction will we executed one after another. Actions can be more or less anything:
            at the moment there are: GiveItem, TakeItem, Talk, Give Quest, Increase Quest Step, FinishQuest,
            etc....
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.IQuestAction.Perform(DOL.Events.DOLEvent,System.Object,System.EventArgs,DOL.GS.GamePlayer)">
            <summary>
            Action performed 
            Can be used in subclasses to define special behaviour of actions
            </summary>
            <param name="e">DolEvent of notify call</param>
            <param name="sender">Sender of notify call</param>
            <param name="args">EventArgs of notify call</param>
            <param name="player">GamePlayer this call is related to, can be null</param>        
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuestAction.#ctor(DOL.GS.Quests.BaseQuestPart,DOL.GS.Quests.eActionType,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:DOL.GS.Quests.AbstractQuestAction"/> class.
            </summary>
            <param name="questPart">The quest part.</param>
            <param name="actionType">Type of the action.</param>
            <param name="p">The parameter p.</param>
            <param name="q">The parameter q.</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuestAction.#ctor(DOL.GS.GameNPC,System.Type,DOL.GS.Quests.eActionType,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:DOL.GS.Quests.AbstractQuestAction"/> class.
            </summary>
            <param name="npc">The default NPC.</param>
            <param name="questType">Default Type of the quest.</param>
            <param name="actionType">Type of the action.</param>
            <param name="p">The parameter p.</param>
            <param name="q">The parameter q.</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuestAction.Perform(DOL.Events.DOLEvent,System.Object,System.EventArgs,DOL.GS.GamePlayer)">
            <summary>
            Action performed 
            Can be used in subclasses to define special behaviour of actions
            </summary>
            <param name="e">DolEvent of notify call</param>
            <param name="sender">Sender of notify call</param>
            <param name="args">EventArgs of notify call</param>
            <param name="player">GamePlayer this call is related to, can be null</param>        
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuestAction.ActionType">
            <summary>
            The action type
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuestAction.P">
            <summary>
            First Action Variable
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuestAction.Q">
            <summary>
            Second Action Variable
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuestAction.NPC">
            <summary>
            returns the NPC of the action
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuestAction.QuestType">
            <summary>
            Gets the type of the quest.
            </summary>
            <value>The type of the quest.</value>
        </member>
        <member name="T:DOL.GS.PropertyCalc.SpellRangePercentCalculator">
            <summary>
            The Spell Range bonus percent calculator
            
            BuffBonusCategory1 unused
            BuffBonusCategory2 unused
            BuffBonusCategory3 is used for debuff
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.PropertyCalculator">
            <summary>
            Purpose of a property calculator is to serve
            as a formula plugin that calcs the correct property value
            ready for further calculations considering all bonuses/buffs 
            and possible caps on it
            it is a capsulation of the calculation logic behind each property
            
            to reach that goal it makes use of the itembonus and buff category fields
            on the living that will be filled through equip actions and 
            buff/debuff effects
            
            further it has access to all other calculators and properties
            on a living to fulfil its task
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.IPropertyCalculator">
            <summary>
            Purpose of a property calculator is to serve
            as a formula plugin that calcs the correct property value
            ready for further calculations considering all bonuses/buffs 
            and possible caps on it
            it is a capsulation of the calculation logic behind each property
            
            to reach that goal it makes use of the itembonus and buff category fields
            on the living that will be filled through equip actions and 
            buff/debuff effects
            
            further it has access to all other calculators and properties
            on a living to fulfil its task
            </summary>
        </member>
        <member name="M:DOL.GS.PropertyCalc.IPropertyCalculator.CalcValue(DOL.GS.GameLiving,DOL.GS.eProperty)">
            <summary>
            calculates the final property value
            </summary>
            <param name="living"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.PropertyCalc.PropertyCalculator.CalcValue(DOL.GS.GameLiving,DOL.GS.eProperty)">
            <summary>
            calculates the final property value
            </summary>
            <param name="living"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.PropertyCalc.ArmorAbsorbtionCalculator">
            <summary>
            The Armor Absorbtion calculator
            
            BuffBonusCategory1 is used for buffs, uncapped
            BuffBonusCategory2 unused
            BuffBonusCategory3 is used for debuffs
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassHealer">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassSeer">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.CharacterClassSpec">
            <summary>
            The Base class for all Character Classes in DOL
            </summary>
        </member>
        <member name="T:DOL.GS.IClassSpec">
            <summary>
            Interface thats required for finding the Character Classes among the other scripts
            TODO: perhaps redundand, because DOLClassAttribute/CharacterClassSpec can be used
            </summary>
        </member>
        <member name="F:DOL.GS.CharacterClassSpec.m_id">
            <summary>
            id of class in Client
            </summary>
        </member>
        <member name="F:DOL.GS.CharacterClassSpec.m_name">
            <summary>
            Name of class
            </summary>
        </member>
        <member name="F:DOL.GS.CharacterClassSpec.m_basename">
            <summary>
            Base of this class
            </summary>
        </member>
        <member name="F:DOL.GS.CharacterClassSpec.m_profession">
            <summary>
            Profession of character, e.g. Defenders of Albion
            </summary>
        </member>
        <member name="F:DOL.GS.CharacterClassSpec.m_specializationMultiplier">
            <summary>
            multiplier for specialization points per level in 10th
            </summary>
        </member>
        <member name="F:DOL.GS.CharacterClassSpec.m_baseHP">
            <summary>
            BaseHP for hp calculation
            </summary>
        </member>
        <member name="F:DOL.GS.CharacterClassSpec.m_primaryStat">
            <summary>
            Stat gained every level.
            see eStat consts
            </summary>
        </member>
        <member name="F:DOL.GS.CharacterClassSpec.m_secondaryStat">
            <summary>
            Stat gained every second level.
            see eStat consts
            </summary>
        </member>
        <member name="F:DOL.GS.CharacterClassSpec.m_tertiaryStat">
            <summary>
            Stat gained every third level.
            see eStat consts
            </summary>
        </member>
        <member name="F:DOL.GS.CharacterClassSpec.m_manaStat">
            <summary>
            Stat that affects the power/mana pool.
            Do not set if they do not have a power pool/spells
            </summary>
        </member>
        <member name="F:DOL.GS.CharacterClassSpec.m_wsbase">
            <summary>
            Weapon Skill Base value to influence weapon skill calc
            </summary>
        </member>
        <member name="F:DOL.GS.CharacterClassSpec.m_wsbaseRanged">
            <summary>
            Weapon Skill Base value to influence ranged weapon skill calc
            </summary>
        </member>
        <member name="M:DOL.GS.CharacterClassSpec.AutoTrainableSkills">
            <summary>
            Return the base list of Realm abilities that the class
            can train in.  Added by Echostorm for RAs
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DOL.GS.CharacterClassSpec.OnLevelUp(DOL.GS.GamePlayer)" -->
        <!-- Badly formed XML comment ignored for member "M:DOL.GS.CharacterClassSpec.OnSkillTrained(DOL.GS.GamePlayer,DOL.GS.Specialization)" -->
        <member name="M:DOL.GS.CharacterClassSpec.CanUseLefthandedWeapon(DOL.GS.GamePlayer)">
            <summary>
            Checks whether player has ability to use lefthanded weapons
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassHealer.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassEnchanter">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassMagician">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassEnchanter.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassTheurgist">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassElementalist">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassTheurgist.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.SinglePermission">
            <summary>
            SinglePermission is special permission of command for player
            </summary>
        </member>
        <member name="T:DOL.GS.ServerProperties.ServerPropertyAttribute">
            <summary>
            The server property attribute
            </summary>
        </member>
        <member name="M:DOL.GS.ServerProperties.ServerPropertyAttribute.#ctor(System.String,System.String,System.Object)">
            <summary>
            The constructor
            </summary>
            <param name="key">The property key</param>
            <param name="description">The property description</param>
            <param name="defaultValue">The property default value</param>
        </member>
        <member name="P:DOL.GS.ServerProperties.ServerPropertyAttribute.Key">
            <summary>
            The property key
            </summary>
        </member>
        <member name="P:DOL.GS.ServerProperties.ServerPropertyAttribute.Description">
            <summary>
            The property description
            </summary>
        </member>
        <member name="P:DOL.GS.ServerProperties.ServerPropertyAttribute.DefaultValue">
            <summary>
            The property default value
            </summary>
        </member>
        <member name="T:DOL.GS.MerchantTradeItems">
            <summary>
            This class represents a full merchant item list
            and contains functions that can be used to
            add and remove items
            </summary>
        </member>
        <member name="F:DOL.GS.MerchantTradeItems.MAX_ITEM_IN_TRADEWINDOWS">
            <summary>
            The maximum number of items on one page
            </summary>
        </member>
        <member name="F:DOL.GS.MerchantTradeItems.MAX_PAGES_IN_TRADEWINDOWS">
            <summary>
            The maximum number of pages supported by clients
            </summary>
        </member>
        <member name="F:DOL.GS.MerchantTradeItems.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.MerchantTradeItems.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="itemsListId"></param>
        </member>
        <member name="F:DOL.GS.MerchantTradeItems.m_itemsListID">
            <summary>
            Item list id
            </summary>
        </member>
        <member name="F:DOL.GS.MerchantTradeItems.m_usedItemsTemplates">
            <summary>
            Holds item template instances defined with script
            </summary>
        </member>
        <member name="M:DOL.GS.MerchantTradeItems.AddTradeItem(System.Int32,DOL.GS.eMerchantWindowSlot,DOL.Database.ItemTemplate)">
            <summary>
            Adds an item to the merchant item list
            </summary>
            <param name="page">Zero-based page number</param>
            <param name="slot">Zero-based slot number</param>
            <param name="item">The item template to add</param>
        </member>
        <member name="M:DOL.GS.MerchantTradeItems.RemoveTradeItem(System.Int32,DOL.GS.eMerchantWindowSlot)">
            <summary>
            Removes an item from trade window
            </summary>
            <param name="page">Zero-based page number</param>
            <param name="slot">Zero-based slot number</param>
            <returns>true if removed</returns>
        </member>
        <member name="M:DOL.GS.MerchantTradeItems.GetItemsInPage(System.Int32)">
            <summary>
            Get the list of all items in the specified page
            </summary>
        </member>
        <member name="M:DOL.GS.MerchantTradeItems.GetItem(System.Int32,DOL.GS.eMerchantWindowSlot)">
            <summary>
            Get the item in the specified page and slot
            </summary>
            <param name="page">The item page</param>
            <param name="slot">The item slot</param>
            <returns>Item template or null</returns>
        </member>
        <member name="M:DOL.GS.MerchantTradeItems.GetAllItems">
            <summary>
            Gets a copy of all intems in trade window
            </summary>
            <returns>A list where key is the slot position and value is the ItemTemplate</returns>
        </member>
        <member name="M:DOL.GS.MerchantTradeItems.GetValidSlot(System.Int32,DOL.GS.eMerchantWindowSlot)">
            <summary>
            Check if the slot is valid
            </summary>
            <param name="page">Zero-based page number</param>
            <param name="slot">SlotPosition to check</param>
            <returns>the slot if it's valid or eMerchantWindowSlot.Invalid if not</returns>
        </member>
        <member name="P:DOL.GS.MerchantTradeItems.ItemsListID">
            <summary>
            Item list id
            </summary>
        </member>
        <member name="T:DOL.GS.ITradeWindow">
            <summary>
            Description résume de ITradeWindow.
            </summary>
        </member>
        <member name="T:DOL.GS.GameStaticItem">
            <summary>
            This class represents a static Item in the gameworld
            </summary>
        </member>
        <member name="F:DOL.GS.GameStaticItem.m_Emblem">
            <summary>
            The emblem of the Object
            </summary>
        </member>
        <member name="M:DOL.GS.GameStaticItem.#ctor">
            <summary>
            Constructs a new GameStaticItem
            </summary>
        </member>
        <member name="M:DOL.GS.GameStaticItem.#ctor(DOL.Database.WorldObject)">
            <summary>
            Constructs a new GameStaticItem from a WorldObject
            </summary>
            <param name="obj">WorldObject to take as template</param>
        </member>
        <member name="M:DOL.GS.GameStaticItem.GetName(System.Int32,System.Boolean)">
            <summary>
            Returns name with article for nouns
            </summary>
            <param name="article">0=definite, 1=indefinite</param>
            <param name="firstLetterUppercase"></param>
            <returns>name of this object (includes article if needed)</returns>
        </member>
        <member name="M:DOL.GS.GameStaticItem.GetExamineMessages(DOL.GS.GamePlayer)">
            <summary>
            Adds messages to ArrayList which are sent when object is targeted
            </summary>
            <param name="player">GamePlayer that is examining this object</param>
            <returns>list with string messages</returns>
        </member>
        <member name="M:DOL.GS.GameStaticItem.CopyFrom(DOL.Database.WorldObject)">
            <summary>
            Copies a world object into this object
            </summary>
            <param name="obj">World object to be copied</param>
        </member>
        <member name="M:DOL.GS.GameStaticItem.SaveIntoDatabase">
            <summary>
            Saves this Item in the WorldObject DB
            </summary>
        </member>
        <member name="M:DOL.GS.GameStaticItem.DeleteFromDatabase">
            <summary>
            Deletes this item from the WorldObject DB
            </summary>
        </member>
        <member name="M:DOL.GS.GameStaticItem.AddToWorld">
            <summary>
            Called to create an item in the world
            </summary>
            <returns>true when created</returns>
        </member>
        <member name="M:DOL.GS.GameStaticItem.RemoveFromWorld">
            <summary>
            Called to remove the item from the world
            </summary>
            <returns>true if removed</returns>
        </member>
        <member name="F:DOL.GS.GameStaticItem.m_owners">
            <summary>
            Holds the owners of this item, can be more than 1 person
            </summary>
        </member>
        <member name="M:DOL.GS.GameStaticItem.AddOwner(DOL.GS.GameObject)">
            <summary>
            Adds an owner to this item
            </summary>
            <param name="player">the object that is an owner</param>
        </member>
        <member name="M:DOL.GS.GameStaticItem.IsOwner(DOL.GS.GameObject)">
            <summary>
            Tests if a specific gameobject owns this item
            </summary>
            <param name="testOwner">the owner to test for</param>
            <returns>true if this object owns this item</returns>
        </member>
        <member name="P:DOL.GS.GameStaticItem.Model">
            <summary>
            gets or sets the model of this Item
            </summary>
        </member>
        <member name="P:DOL.GS.GameStaticItem.Emblem">
            <summary>
            Gets or Sets the current Emblem of the Object
            </summary>
        </member>
        <member name="P:DOL.GS.GameStaticItem.Name">
            <summary>
            Gets or sets the name of this item
            </summary>
        </member>
        <member name="P:DOL.GS.GameStaticItem.Heading">
            <summary>
            Gets or sets the heading of this item
            </summary>
        </member>
        <member name="P:DOL.GS.GameStaticItem.Level">
            <summary>
            Gets or sets the level of this item
            </summary>
        </member>
        <member name="P:DOL.GS.GameStaticItem.Realm">
            <summary>
            Gets or sets the realm of this item
            </summary>
        </member>
        <member name="P:DOL.GS.GameStaticItem.Owners">
            <summary>
            Returns an array of owners
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.EtherealBondAbility">
            <summary>
            Ethereal Bond
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.RAPropertyEnhancer">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.RealmAbility">
            <summary>
            Base for all Realm Abilities
            </summary>
        </member>
        <member name="T:DOL.GS.Ability">
            <summary>
            the ability class
            nontrainable abilities have level 0
            trainable abilities have level > 0, level is displayed in roman numbers	
            </summary>
        </member>
        <member name="T:DOL.GS.NamedSkill">
            <summary>
            the named skill is used for identification purposes
            the name is strong and must be unique for one type of skill page
            so better make the name real unique
            </summary>
        </member>
        <member name="T:DOL.GS.Skill">
            <summary>
            base class for skills
            </summary>
        </member>
        <member name="M:DOL.GS.Skill.#ctor(System.String,System.UInt16,System.Int32)">
            <summary>
            Construct a Skill from the name, an id, and a level
            </summary>
            <param name="name"></param>
            <param name="id"></param>
            <param name="level"></param>
        </member>
        <member name="M:DOL.GS.Skill.Clone">
            <summary>
            Clone a skill
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Skill.ID">
            <summary>
            in most cases it is icon id or other specifiing id for client
            like spell id or style id in spells
            </summary>
        </member>
        <member name="P:DOL.GS.Skill.Name">
            <summary>
            The Skill Name
            </summary>
        </member>
        <member name="P:DOL.GS.Skill.Level">
            <summary>
            The Skill Level
            </summary>
        </member>
        <member name="P:DOL.GS.Skill.SkillType">
            <summary>
            the type of the skill
            </summary>
        </member>
        <member name="M:DOL.GS.NamedSkill.#ctor(System.String,System.String,System.UInt16,System.Int32)">
            <summary>
            Construct a named skill from the keyname, name, id and level
            </summary>
            <param name="keyName">The keyname</param>
            <param name="name">The name</param>
            <param name="id">The ID</param>
            <param name="level">The level</param>
        </member>
        <member name="M:DOL.GS.NamedSkill.ToString">
            <summary>
            Returns the string representation of the Skill
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.NamedSkill.KeyName">
            <summary>
            strong identification name
            </summary>
        </member>
        <member name="F:DOL.GS.Ability.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.Ability.UpdateCurrentName">
            <summary>
            Updates the current ability name
            </summary>
        </member>
        <member name="M:DOL.GS.Ability.Activate(DOL.GS.GameLiving,System.Boolean)">
            <summary>
            this is called when the ability should do its modifications (passive effects)
            </summary>
            <param name="living"></param>
            <param name="sendUpdates"></param>
        </member>
        <member name="M:DOL.GS.Ability.Deactivate(DOL.GS.GameLiving,System.Boolean)">
            <summary>
            this is called when the ability should remove its modifications
            </summary>
            <param name="living"></param>
            <param name="sendUpdates"></param>
        </member>
        <member name="M:DOL.GS.Ability.OnLevelChange(System.Int32)">
            <summary>
            Called when an ability level is changed while the ability is activated on a living
            </summary>
        </member>
        <member name="M:DOL.GS.Ability.Execute(DOL.GS.GameLiving)">
            <summary>
            active abilities (clicked by icon) are called back here
            </summary>
            <param name="living"></param>
        </member>
        <member name="M:DOL.GS.Ability.getRomanLevel">
            <summary>
            get the level represented as roman numbers
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Ability.Spec">
            <summary>
            (readonly) The Specialization thats need to be trained to get that ability
            </summary>
        </member>
        <member name="P:DOL.GS.Ability.SpecLevelRequirement">
            <summary>
            (readonly) The Specialization's level required to get that ability
            </summary>
        </member>
        <member name="P:DOL.GS.Ability.Icon">
            <summary>
            icon id (>=0x190) or 0 if ability is not activatable
            </summary>
        </member>
        <member name="P:DOL.GS.Ability.Level">
            <summary>
            set is disabled
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.RealmAbility.CheckRequirement(DOL.GS.GamePlayer)">
            <summary>
            true if player can immediately use that ability
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.RealmAbilities.RealmAbility.MaxLevel">
            <summary>
            max level this RA can reach
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.RAPropertyEnhancer.GetAmountForLevel(System.Int32)">
            <summary>
            Get the Amount of Bonus for this RA at a particular level
            </summary>
            <param name="level">The level</param>
            <returns>The amount</returns>
        </member>
        <member name="M:DOL.GS.RealmAbilities.RAPropertyEnhancer.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            send updates about the changes
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:DOL.GS.RealmAbilities.RAPropertyEnhancer.Amount">
            <summary>
            The bonus amount at this RA's level
            </summary>
        </member>
        <member name="P:DOL.GS.RealmAbilities.RAPropertyEnhancer.ValueUnit">
            <summary>
            Unit for values like %
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.TimedRealmAbility.SendCasterSpellEffectAndCastMessage(DOL.GS.GameLiving,System.Int32,System.Boolean)">
            <summary>
            Send spell effect animation on caster and send messages
            </summary>
            <param name="caster"></param>
            <param name="spellEffect"></param>
            <param name="success"></param>
        </member>
        <member name="M:DOL.GS.RealmAbilities.TimedRealmAbility.SendCastMessage(DOL.GS.GameLiving)">
            <summary>
            Sends cast message to environment
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.TimedRealmAbility.CheckPreconditions(DOL.GS.GameLiving,System.Int64)">
            <summary>
            Checks for any of the given conditions and returns true if there was any
            prints messages
            </summary>
            <param name="living"></param>
            <param name="bitmask"></param>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.Quests.AbstractMission.CHECK_MISSION_TICK">
            <summary>
            The temp property name for next check mission millisecond
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.AbstractMission.CHECK_MISSION_DELAY">
            <summary>
            Time player must wait after failed mission check to get new mission, in milliseconds
            "Once a player has a personal mission,
            a new Personal mission cannot be obtained for 30 minutes,
            or until the current Personal mission is complete
            - whichever occurs first."
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.AbstractMission.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.AbstractMission.m_owner">
            <summary>
            owner of the mission
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractMission.#ctor(System.Object)">
            <summary>
            Constructs a new Mission
            </summary>
            <param name="owner">The owner of the mission</param>
        </member>
        <member name="F:DOL.GS.Quests.AbstractMission.m_customProperties">
            <summary>
            This HybridDictionary holds all the custom properties of this quest
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractMission.SetCustomProperty(System.String,System.String)">
            <summary>
            This method sets a custom Property to a specific value
            </summary>
            <param name="key">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractMission.RemoveCustomProperty(System.String)">
            <summary>
            Removes a custom property from the database
            </summary>
            <param name="key">The key name of the property</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractMission.GetCustomProperty(System.String)">
            <summary>
            This method retrieves a custom property from the database
            </summary>
            <param name="key">The property key</param>
            <returns>The property value</returns>
        </member>
        <member name="M:DOL.GS.Quests.AbstractMission.FinishMission">
            <summary>
            Called to finish the mission
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractMission.ExpireMission">
            <summary>
            A mission runs out of time
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractMission.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            This method needs to be implemented in each quest.
            It is the core of the quest. The global event hook of the GamePlayer.
            This method will be called whenever a GamePlayer with this quest
            fires ANY event!
            </summary>
            <param name="e">The event type</param>
            <param name="sender">The sender of the event</param>
            <param name="args">The event arguments</param>
        </member>
        <member name="P:DOL.GS.Quests.AbstractMission.Name">
            <summary>
            Retrieves the name of the mission
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractMission.Description">
            <summary>
            Retrieves the description for the mission
            </summary>
        </member>
        <member name="T:DOL.GS.Quests.AbstractMission.eMissionType">
            <summary>
            possible mission types
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.AbstractPacketLib.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.AbstractPacketLib.m_gameClient">
            <summary>
            The GameClient of this PacketLib
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.AbstractPacketLib.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.AbstractPacketLib.GetPacketCode(DOL.GS.PacketHandler.ePackets)">
            <summary>
            Retrieves the packet code depending on client version
            </summary>
            <param name="packetCode"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.PacketHandler.AbstractPacketLib.SendTCP(DOL.GS.PacketHandler.GSTCPPacketOut)">
            <summary>
            Sends a packet via TCP
            </summary>
            <param name="packet">The packet to be sent</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.AbstractPacketLib.SendTCP(System.Byte[])">
            <summary>
            Sends a packet via TCP
            </summary>
            <param name="buf">Buffer containing the data to be sent</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.AbstractPacketLib.SendTCPRaw(DOL.GS.PacketHandler.GSTCPPacketOut)">
            <summary>
            Send the packet via TCP without changing any portion of the packet
            </summary>
            <param name="packet">Packet to send</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.AbstractPacketLib.SendUDP(DOL.GS.PacketHandler.GSUDPPacketOut)">
            <summary>
            Send the packet via UDP
            </summary>
            <param name="packet">Packet to be sent</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.AbstractPacketLib.SendUDP(System.Byte[])">
            <summary>
            Send the packet via UDP
            </summary>
            <param name="buf">Packet to be sent</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.AbstractPacketLib.SendUDPRaw(DOL.GS.PacketHandler.GSUDPPacketOut)">
            <summary>
            Send the UDP packet without changing any portion of the packet
            </summary>
            <param name="packet">Packet to be sent</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.AbstractPacketLib.CreatePacketLibForVersion(System.Int32,DOL.GS.GameClient,DOL.GS.GameClient.eClientVersion@)">
            <summary>
            Finds and creates packetlib for specified raw version.
            </summary>
            <param name="rawVersion">The version number sent by the client.</param>
            <param name="client">The client for which to create packet lib.</param>
            <param name="version">The client version of packetlib.</param>
            <returns>null if not found or new packetlib instance.</returns>
        </member>
        <member name="P:DOL.GS.PacketHandler.IPacketLib.BowPrepare">
            <summary>
            The bow prepare animation
            </summary>
        </member>
        <member name="P:DOL.GS.PacketHandler.IPacketLib.BowShoot">
            <summary>
            The bow shoot animation
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib168.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib168.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.68 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="P:DOL.GS.PacketHandler.PacketLib168.BowPrepare">
            <summary>
            The bow prepare animation
            </summary>
        </member>
        <member name="P:DOL.GS.PacketHandler.PacketLib168.BowShoot">
            <summary>
            The bow shoot animation
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib169.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.69 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib170.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib170.#ctor(DOL.GS.GameClient)">
             <summary>
             Constructs a new PacketLib for Version 1.70+ clients, contains NF Keep stuff.
            
             --ShadowCode
             </summary>
             <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib171.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib171.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.71 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib172.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib172.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.72 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib173.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib173.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.73 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib174.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib174.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.74 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib175.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib175.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.75 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib176.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib176.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.76 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib177.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib177.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.77 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="T:DOL.GS.PacketHandler.IPacketHandler">
            <summary>
            The interface for all received packets
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.IPacketHandler.HandlePacket(DOL.GS.GameClient,DOL.GS.GSPacketIn)">
            <summary>
            Handles every received packet
            </summary>
            <param name="client">The client that sent the packet</param>
            <param name="packet">The received packet data</param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.GameSiegeBallista">
            <summary>
            GameMovingObject is a base class for boats and siege weapons.
            </summary>
        </member>
        <member name="T:DOL.GS.GameSiegeWeapon">
            <summary>
            Description résumée de GameSiegeWeapon.
            </summary>
        </member>
        <member name="T:DOL.GS.GameMovingObject">
            <summary>
            GameMovingObject is a base class for boats and siege weapons.
            </summary>		
        </member>
        <member name="M:DOL.GS.GameMovingObject.TakeDamage(DOL.GS.GameObject,DOL.GS.eDamageType,System.Int32,System.Int32)">
            <summary>
            This methode is override to remove XP system
            </summary>
            <param name="source">the damage source</param>
            <param name="damageType">the damage type</param>
            <param name="damageAmount">the amount of damage</param>
            <param name="criticalAmount">the amount of critical damage</param>
        </member>
        <member name="M:DOL.GS.GameMovingObject.StartPowerRegeneration">
            <summary>
            Starts the power regeneration
            </summary>
        </member>
        <member name="M:DOL.GS.GameMovingObject.StartEnduranceRegeneration">
            <summary>
            Starts the endurance regeneration
            </summary>
        </member>
        <member name="F:DOL.GS.GameSiegeWeapon.m_decayTimerLock">
            <summary>
            The lock object for lazy regen timers initialization
            </summary>
        </member>
        <member name="M:DOL.GS.GameSiegeWeapon.GetActionDelay(DOL.GS.SiegeTimer.eAction)">
            <summary>
            delay to do action in Ms
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.GameMerchant">
            <summary>
            Represents an in-game merchant
            </summary>
        </member>
        <member name="F:DOL.GS.GameMerchant.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.GameMerchant.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.GameMerchant.GetExamineMessages(DOL.GS.GamePlayer)">
            <summary>
            Adds messages to ArrayList which are sent when object is targeted
            </summary>
            <param name="player">GamePlayer that is examining this object</param>
            <returns>list with string messages</returns>
        </member>
        <member name="M:DOL.GS.GameMerchant.Interact(DOL.GS.GamePlayer)">
            <summary>
            Called when a player right clicks on the merchant
            </summary>
            <param name="player">Player that interacted with the merchant</param>
            <returns>True if succeeded</returns>
        </member>
        <member name="M:DOL.GS.GameMerchant.SendMerchantWindow(DOL.GS.GamePlayer)">
            <summary>
            send the merchants item offer window to a player
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:DOL.GS.GameMerchant.SendMerchatWindowCallback(System.Object)">
            <summary>
            Sends merchant window from threadpool thread
            </summary>
            <param name="state">The game player to send to</param>
        </member>
        <member name="F:DOL.GS.GameMerchant.m_tradeItems">
            <summary>
            Items available for sale
            </summary>
        </member>
        <member name="M:DOL.GS.GameMerchant.OnPlayerBuy(DOL.GS.GamePlayer,System.Int32,System.Int32)">
            <summary>
            Called when a player buys an item
            </summary>
            <param name="player">The player making the purchase</param>
            <param name="item_slot">slot of the item to be bought</param>
            <param name="number">Number to be bought</param>
            <returns>true if buying is allowed, false if buying should be prevented</returns>
        </member>
        <member name="M:DOL.GS.GameMerchant.OnPlayerBuy(DOL.GS.GamePlayer,System.Int32,System.Int32,DOL.GS.MerchantTradeItems)">
            <summary>
            Called when a player buys an item
            </summary>
            <param name="player">The player making the purchase</param>
            <param name="item_slot">slot of the item to be bought</param>
            <param name="number">Number to be bought</param>
            <param name="TradeItems"></param>
            <returns>true if buying is allowed, false if buying should be prevented</returns>
        </member>
        <member name="M:DOL.GS.GameMerchant.OnPlayerSell(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Called when a player sells something
            </summary>
            <param name="player">Player making the sale</param>
            <param name="item">The InventoryItem to be sold</param>
            <returns>true if selling is allowed, false if it should be prevented</returns>
        </member>
        <member name="M:DOL.GS.GameMerchant.OnPlayerAppraise(DOL.GS.GamePlayer,DOL.Database.InventoryItem,System.Boolean)">
            <summary>
            Called to appraise the value of an item
            </summary>
            <param name="player">The player whose item needs appraising</param>
            <param name="item">The item to be appraised</param>
            <param name="silent"></param>
            <returns>The price this merchant will pay for the offered items</returns>
        </member>
        <member name="M:DOL.GS.GameMerchant.LoadFromDatabase(DOL.Database.DataObject)">
            <summary>
            Loads a merchant from the DB
            </summary>
            <param name="merchantobject">The merchant DB object</param>
        </member>
        <member name="M:DOL.GS.GameMerchant.SaveIntoDatabase">
            <summary>
            Saves a merchant into the DB
            </summary>
        </member>
        <member name="M:DOL.GS.GameMerchant.DeleteFromDatabase">
            <summary>
            Deletes a merchant from the DB
            </summary>
        </member>
        <member name="P:DOL.GS.GameMerchant.TradeItems">
            <summary>
            Gets the items available from this merchant
            </summary>
        </member>
        <member name="T:DOL.GS.GameStableMaster">
            <summary>
            Stable master that sells and takes horse route tickes
            </summary>
        </member>
        <member name="F:DOL.GS.GameStableMaster.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.GameStableMaster.#ctor">
            <summary>
            Constructs a new stable master
            </summary>
        </member>
        <member name="M:DOL.GS.GameStableMaster.ReceiveItem(DOL.GS.GameLiving,DOL.Database.InventoryItem)">
            <summary>
            Called when the living is about to get an item from someone
            else
            </summary>
            <param name="source">Source from where to get the item</param>
            <param name="item">Item to get</param>
            <returns>true if the item was successfully received</returns>
        </member>
        <member name="M:DOL.GS.GameStableMaster.OnHorseAtPathEnd(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Handles 'horse route end' events
            </summary>
            <param name="e"></param>
            <param name="o"></param>
            <param name="args"></param>
        </member>
        <member name="T:DOL.GS.GameStableMaster.MountHorseAction">
            <summary>
            Handles delayed player mount on horse
            </summary>
        </member>
        <member name="F:DOL.GS.GameStableMaster.MountHorseAction.m_horse">
            <summary>
            The target horse
            </summary>
        </member>
        <member name="M:DOL.GS.GameStableMaster.MountHorseAction.#ctor(DOL.GS.GamePlayer,DOL.GS.GameNPC)">
            <summary>
            Constructs a new MountHorseAction
            </summary>
            <param name="actionSource">The action source</param>
            <param name="horse">The target horse</param>
        </member>
        <member name="M:DOL.GS.GameStableMaster.MountHorseAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.GameStableMaster.HorseRideAction">
            <summary>
            Handles delayed horse ride actions
            </summary>
        </member>
        <member name="M:DOL.GS.GameStableMaster.HorseRideAction.#ctor(DOL.GS.GameNPC)">
            <summary>
            Constructs a new HorseStartAction
            </summary>
            <param name="actionSource"></param>
        </member>
        <member name="M:DOL.GS.GameStableMaster.HorseRideAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.GameBoatStableMaster">
            <summary>
            Stable master that sells and takes horse route tickes
            </summary>
        </member>
        <member name="F:DOL.GS.GameBoatStableMaster.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.GameBoatStableMaster.ReceiveItem(DOL.GS.GameLiving,DOL.Database.InventoryItem)">
            <summary>
            Called when the living is about to get an item from someone
            else
            </summary>
            <param name="source">Source from where to get the item</param>
            <param name="item">Item to get</param>
            <returns>true if the item was successfully received</returns>
        </member>
        <member name="M:DOL.GS.GameBoatStableMaster.OnHorseAtPathEnd(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Handles 'horse route end' events
            </summary>
            <param name="e"></param>
            <param name="o"></param>
            <param name="args"></param>
        </member>
        <member name="T:DOL.GS.GameBoatStableMaster.MountHorseAction">
            <summary>
            Handles delayed player mount on horse
            </summary>
        </member>
        <member name="F:DOL.GS.GameBoatStableMaster.MountHorseAction.m_horse">
            <summary>
            The target horse
            </summary>
        </member>
        <member name="M:DOL.GS.GameBoatStableMaster.MountHorseAction.#ctor(DOL.GS.GamePlayer,DOL.GS.GameNPC)">
            <summary>
            Constructs a new MountHorseAction
            </summary>
            <param name="actionSource">The action source</param>
            <param name="horse">The target horse</param>
        </member>
        <member name="M:DOL.GS.GameBoatStableMaster.MountHorseAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.GameBoatStableMaster.HorseRideAction">
            <summary>
            Handles delayed horse ride actions
            </summary>
        </member>
        <member name="M:DOL.GS.GameBoatStableMaster.HorseRideAction.#ctor(DOL.GS.GameNPC)">
            <summary>
            Constructs a new HorseStartAction
            </summary>
            <param name="actionSource"></param>
        </member>
        <member name="M:DOL.GS.GameBoatStableMaster.HorseRideAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.Events.QuestEventArgs">
            <summary>
            Holds the arguments for the Quest event of GamePlayer
            </summary>
        </member>
        <member name="T:DOL.Events.SourceEventArgs">
            <summary>
            Zusammenfassung für SourceEventArgs.
            </summary>
        </member>
        <member name="P:DOL.Events.SourceEventArgs.Source">
            <summary>
            Gets the GameLiving source who was saying something
            </summary>
        </member>
        <member name="M:DOL.Events.QuestEventArgs.#ctor(DOL.GS.GameLiving,DOL.GS.GamePlayer,System.UInt16)">
            <summary>
            Constrcuts a new QuesteventArgument
            </summary>
            <param name="source">Inviting NPC</param>
            <param name="player">Player associated with quest</param>
            <param name="questid">id of quest</param>
        </member>
        <member name="P:DOL.Events.QuestEventArgs.QuestID">
            <summary>
            Gets the Id of quest
            </summary>
        </member>
        <member name="T:DOL.Events.ItemUnequippedArgs">
            <summary>
            Holds the arguments for the ItemUnEquipped event of PlayerInventory
            </summary>
        </member>
        <member name="M:DOL.Events.ItemUnequippedArgs.#ctor(DOL.Database.InventoryItem,System.Int32)">
            <summary>
            Constructs a new ItemEquippedArgs
            </summary>
            <param name="item">The unequipped item</param>
            <param name="previousSlotPos">The slot position item had before it was equipped</param>
        </member>
        <member name="P:DOL.Events.ItemUnequippedArgs.Item">
            <summary>
            Gets the unequipped item
            </summary>
        </member>
        <member name="P:DOL.Events.ItemUnequippedArgs.PreviousSlotPosition">
            <summary>
            Gets the previous slot position
            </summary>
        </member>
        <member name="T:DOL.Events.AccountEventArgs">
            <summary>
            Holds the arguments for the account events
            </summary>
        </member>
        <member name="F:DOL.Events.AccountEventArgs.m_account">
            <summary>
            Holds the target account for this event
            </summary>
        </member>
        <member name="M:DOL.Events.AccountEventArgs.#ctor(DOL.Database.Account)">
            <summary>
            Constructs a new event argument class for the
            account events 
            </summary>
            <param name="account"></param>
        </member>
        <member name="P:DOL.Events.AccountEventArgs.Account">
            <summary>
            Gets the target account for this event
            </summary>
        </member>
        <member name="T:DOL.GS.Trainer.HealerTrainer">
            <summary>
            Healer Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.HealerTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.HealerTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.HealerTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.ForesterTrainer">
            <summary>
            Forester Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.ForesterTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ForesterTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.AnimistTrainer">
            <summary>
            Animist Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.AnimistTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.AnimistTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.AnimistTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.NecromancerTrainer">
            <summary>
            Necromancer Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.NecromancerTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.NecromancerTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.NecromancerTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.SkillHandler.RapidFireAbilityHandler">
            <summary>
            Handler for Rapid Fire ability
            </summary>
        </member>
        <member name="T:DOL.GS.IAbilityActionHandler">
            <summary>
            callback handler for an ability that is activated by clicking on an associated icon
            </summary>
        </member>
        <member name="T:DOL.GS.ServerRules.ServerRulesAttribute">
            <summary>
            Denotes a class as a server rules handler for a given server type
            </summary>
        </member>
        <member name="T:DOL.GS.Quests.IQuestTrigger">
            <summary>
            A trigger defines the circumstances under which a certain QuestAction is fired.
            This can be eTriggerAction.Interact, eTriggerAction.GiveItem, eTriggerAction.Attack, etc...
            Additional there are two variables to add the needed parameters for the triggertype (Item to give for GiveItem, NPC to interact for Interact, etc...). To fire a QuestAction at least one of the added triggers must be fulfilled. 
            </summary>        
        </member>
        <member name="M:DOL.GS.Quests.IQuestTrigger.Check(DOL.Events.DOLEvent,System.Object,System.EventArgs,DOL.GS.GamePlayer)">
            <summary>
            Checks the trigger, this method is called whenever a event associated with this questparts quest
            or a manualy associated eventhandler is notified.
            </summary>
            <param name="e">DolEvent of notify call</param>
            <param name="sender">Sender of notify call</param>
            <param name="args">EventArgs of notify call</param>
            <param name="player">GamePlayer this call is related to, can be null</param>
            <returns>true if QuestPart should be executes, else false</returns>
        </member>
        <member name="M:DOL.GS.Quests.IQuestTrigger.Register">
            <summary>
            Registers the trigger within dol to be notified if possible trigger event occurs        
            </summary>
            <remarks>
            This method will be called multiple times, so use AddHandlerUnique to make
            sure only one handler is actually registered
            </remarks>        
        </member>
        <member name="M:DOL.GS.Quests.IQuestTrigger.Unregister">
            <summary>
            Unregister all added triggers that are no longer needed.
            </summary>
            <remarks>
            Don't remove handlers that will be used by other triggers etc.
            This is rather difficult since we don't know which events other triggers use.
            </remarks>        
        </member>
        <member name="T:DOL.GS.PropertyCalc.PowerRegenerationRateCalculator">
            <summary>
            The power regen rate calculator
            
            BuffBonusCategory1 is used for all buffs
            BuffBonusCategory2 is used for all debuffs (positive values expected here)
            BuffBonusCategory3 unused
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassBainshee">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassBainshee.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassWizard">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassWizard.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="F:DOL.GS.Keeps.HookPointInventory.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.HookPointInventory.GetItem(System.Int32)">
            <summary>
            Get the item the slot
            </summary>
            <param name="slot">The item slot</param>
            <returns>Item template or null</returns>
        </member>
        <member name="M:DOL.GS.Keeps.HookPointInventory.AddItem(DOL.GS.Keeps.HookPointItem,System.Int32)">
            <summary>
            add the item to the slot
            </summary>
            <param name="item"></param>
            <param name="slot">The item slot</param>
            <returns>Item template or null</returns>
        </member>
        <member name="M:DOL.GS.Keeps.HookPointInventory.AddFirstFreeSlot(DOL.GS.Keeps.HookPointItem)">
            <summary>
            add the item to the first free slot
            </summary>
            <returns>Item template or null</returns>
        </member>
        <member name="M:DOL.GS.Keeps.HookPointInventory.GetAllItems">
            <summary>
            Gets a copy of all intems
            </summary>
            <returns>A list where key is the slot position and value is the ItemTemplate</returns>
        </member>
        <member name="F:DOL.GS.Keeps.HookPointItem.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.HookPointItem.GetName(System.Int32,System.Boolean)">
            <summary>
            Returns name with article for nouns
            </summary>
            <param name="article">0=definite, 1=indefinite</param>
            <param name="firstLetterUppercase"></param>
            <returns>name of this object (includes article if needed)</returns>
        </member>
        <member name="M:DOL.GS.Keeps.HookPointItem.GetPronoun(System.Int32,System.Boolean)">
            <summary>
            Pronoun of this object in case you need to refer it in 3rd person
            http://webster.commnet.edu/grammar/cases.htm
            </summary>
            <param name="firstLetterUppercase"></param>
            <param name="form">0=Subjective, 1=Possessive, 2=Objective</param>
            <returns>pronoun of this object</returns>
        </member>
        <member name="T:DOL.GS.PlayerGroup">
            <summary>
            Summary description for PlayerGroup.
            </summary>
        </member>
        <member name="T:DOL.GS.Group">
            <summary>
            This class represents a Group inside the game
            </summary>
        </member>
        <member name="F:DOL.GS.Group.m_groupMembers">
            <summary>
            This holds all players inside the group
            </summary>
        </member>
        <member name="F:DOL.GS.Group.m_status">
            <summary>
            This holds the status of the group
            eg. looking for members etc ...
            </summary>
        </member>
        <member name="M:DOL.GS.Group.#ctor">
            <summary>
            Creates an empty Group. Don't use this, use
            GroupMgr.CreateGroup() to create a group
            </summary>
        </member>
        <member name="M:DOL.GS.Group.AddPlayer(DOL.GS.GamePlayer)">
            <summary>
            Adds a player to the group
            </summary>
            <param name="player">GamePlayer to be added to the group</param>
            <returns>true if added successfully</returns>
        </member>
        <member name="M:DOL.GS.Group.GetClientsInTheGroup">
            <summary>
            Gets all GameClients inside this group
            </summary>
            <returns>GameClient Array of all group members</returns>
        </member>
        <member name="M:DOL.GS.Group.GetPlayersInTheGroup">
            <summary>
            Gets all GamePlayers in this group
            </summary>
            <returns>Array of GamePlayers in this group</returns>
        </member>
        <member name="M:DOL.GS.Group.RemovePlayer(DOL.GS.GamePlayer)">
            <summary>
            Removes a player from the group
            </summary>
            <param name="player">GamePlayer to be removed</param>
            <returns>true if removed, false if not</returns>
        </member>
        <member name="M:DOL.GS.Group.SendMessageToGroupMembers(System.String,DOL.GS.PacketHandler.eChatType,DOL.GS.PacketHandler.eChatLoc)">
            <summary>
            Sends a message to all group members 
            </summary>
            <param name="msg">message string</param>
            <param name="type">message type</param>
            <param name="loc">message location</param>
        </member>
        <member name="M:DOL.GS.Group.IsInTheGroup(DOL.GS.GamePlayer)">
            <summary>
            Checks if a player is inside the group
            </summary>
            <param name="player">GamePlayer to check</param>
            <returns>true if the player is in the group</returns>
        </member>
        <member name="P:DOL.GS.Group.PlayerCount">
            <summary>
            Returns the number of players inside this group
            </summary>
        </member>
        <member name="P:DOL.GS.Group.Status">
            <summary>
            Gets or sets the status of this group
            </summary>
        </member>
        <member name="P:DOL.GS.Group.Item(System.Int32)">
            <summary>
            Gets group member by index
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerGroup.MAX_GROUP_SIZE">
            <summary>
            Group size limit
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerGroup.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PlayerGroup.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new PlayerGroup
            </summary>
            <param name="leader">The group leader</param>
        </member>
        <member name="M:DOL.GS.PlayerGroup.AddPlayer(DOL.GS.GamePlayer)">
            <summary>
            Adds a player to the group
            </summary>
            <param name="player">The player to be added</param>
            <returns>True if the function succeeded, otherwise false</returns>
        </member>
        <member name="M:DOL.GS.PlayerGroup.RemovePlayer(DOL.GS.GamePlayer)">
            <summary>
            Removes a player from the group
            </summary>
            <param name="player">The player to remove</param>
            <returns>True if the function succeeded, otherwise false</returns>
        </member>
        <member name="M:DOL.GS.PlayerGroup.MakeLeader(DOL.GS.GamePlayer)">
            <summary>
            Makes player current leader of the group
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.PlayerGroup.UpdatePlayerIndexes">
            <summary>
            Updates player indexes
            </summary>
        </member>
        <member name="M:DOL.GS.PlayerGroup.UpdateGroupWindow">
            <summary>
            Updates the group window to all players
            </summary>
        </member>
        <member name="M:DOL.GS.PlayerGroup.UpdateMember(DOL.GS.GamePlayer,System.Boolean,System.Boolean)">
            <summary>
            Updates a group member to all other players in the group
            </summary>
            <param name="player">player to update</param>
            <param name="updateIcons">Do icons need an update</param>
            <param name="updateOtherRegions">Should updates be sent to players in other regions</param>
        </member>
        <member name="M:DOL.GS.PlayerGroup.UpdateAllToMember(DOL.GS.GamePlayer,System.Boolean,System.Boolean)">
            <summary>
            Updates all group members to one member
            </summary>
            <param name="player">The player that should receive updates</param>
            <param name="updateIcons">Do icons need an update</param>
            <param name="updateOtherRegions">Should updates be sent to players in other regions</param>
        </member>
        <member name="M:DOL.GS.PlayerGroup.SendMessageToGroupMembers(DOL.GS.GameLiving,System.String)">
            <summary>
            Sends a message to the group
            </summary>
            <param name="from">The living the message comes from</param>
            <param name="msg">The message to be sent</param>
        </member>
        <member name="M:DOL.GS.PlayerGroup.IsGroupInCombat">
            <summary>
            If at least one player is in combat group is in combat
            </summary>
            <returns>true if group in combat</returns>
        </member>
        <member name="P:DOL.GS.PlayerGroup.Leader">
            <summary>
            Gets/sets the group moderator
            </summary>
        </member>
        <member name="P:DOL.GS.PlayerGroup.AutosplitLoot">
            <summary>
            Gets or sets the group's autosplit loot flag
            </summary>
        </member>
        <member name="P:DOL.GS.PlayerGroup.AutosplitCoins">
            <summary>
            Gets or sets the group's autosplit coins flag
            </summary>
        </member>
        <member name="T:DOL.GS.Message">
            <summary>
            This class helps sending messages to other players
            </summary>
        </member>
        <member name="M:DOL.GS.Message.ChatToArea(DOL.GS.GameObject,System.String,DOL.GS.PacketHandler.eChatType,DOL.GS.GameObject[])">
            <summary>
            Sends a message to the chat window of players inside
            INFO_DISTANCE radius of the center object
            </summary>
            <param name="centerObject">The center object of the message</param>
            <param name="message">The message to send</param>
            <param name="chatType">The type of message to send</param>
            <param name="excludes">An optional list of excluded players</param>
        </member>
        <member name="M:DOL.GS.Message.ChatToOthers(DOL.GS.GameObject,System.String,DOL.GS.PacketHandler.eChatType)">
            <summary>
            Sends a message to the chat window of players inside
            INFO_DISTANCE radius of the center object
            </summary>
            <param name="centerObject">The center object of the message</param>
            <param name="message">The message to send</param>
            <param name="chatType">The type of message to send</param>
            <remarks>If the centerObject is a player, he won't receive the message</remarks>
        </member>
        <member name="M:DOL.GS.Message.ChatToArea(DOL.GS.GameObject,System.String,DOL.GS.PacketHandler.eChatType,System.UInt16,DOL.GS.GameObject[])">
            <summary>
            Sends a message to the chat window of players inside
            a specific distance of the center object
            </summary>
            <param name="centerObject">The center object of the message</param>
            <param name="message">The message to send</param>
            <param name="chatType">The type of message to send</param>
            <param name="distance">The distance around the center where players will receive the message</param>
            <param name="excludes">An optional list of excluded players</param>
            <remarks>If the center object is a player, he will get the message too</remarks>
        </member>
        <member name="M:DOL.GS.Message.SystemToArea(DOL.GS.GameObject,System.String,DOL.GS.PacketHandler.eChatType,DOL.GS.GameObject[])">
            <summary>
            Sends a message to the system window of players inside
            INFO_DISTANCE radius of the center object
            </summary>
            <param name="centerObject">The center object of the message</param>
            <param name="message">The message to send</param>
            <param name="chatType">The type of message to send</param>
            <param name="excludes">An optional list of excluded players</param>
        </member>
        <member name="M:DOL.GS.Message.SystemToOthers(DOL.GS.GameObject,System.String,DOL.GS.PacketHandler.eChatType)">
            <summary>
            Sends a message to the system window of players inside
            INFO_DISTANCE radius of the center object
            </summary>
            <param name="centerObject">The center object of the message</param>
            <param name="message">The message to send</param>
            <param name="chatType">The type of message to send</param>
            <remarks>If the centerObject is a player, he won't receive the message</remarks>
        </member>
        <member name="M:DOL.GS.Message.SystemToArea(DOL.GS.GameObject,System.String,DOL.GS.PacketHandler.eChatType,System.UInt16,DOL.GS.GameObject[])">
            <summary>
            Sends a message to the system window of players inside
            a specific distance of the center object
            </summary>
            <param name="centerObject">The center object of the message</param>
            <param name="message">The message to send</param>
            <param name="chatType">The type of message to send</param>
            <param name="distance">The distance around the center where players will receive the message</param>
            <param name="excludes">An optional list of excluded players</param>
            <remarks>If the center object is a player, he will get the message too</remarks>
        </member>
        <member name="M:DOL.GS.Message.MessageToArea(DOL.GS.GameObject,System.String,DOL.GS.PacketHandler.eChatType,DOL.GS.PacketHandler.eChatLoc,System.UInt16,DOL.GS.GameObject[])">
            <summary>
            Sends a text message to players within a specific radius of another object
            </summary>
            <param name="centerObject">The center object</param>
            <param name="message">The message to send</param>
            <param name="chatType">The chat typ</param>
            <param name="chatLoc">The chat location</param>
            <param name="distance">The distance</param>
            <param name="excludes">A list of GameObjects to exlude from the message</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.UseSkillHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.UseSkillHandler.UseSkillAction">
            <summary>
            Handles player use skill actions
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.UseSkillHandler.UseSkillAction.m_flagSpeedData">
            <summary>
            The speed and flags data
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.UseSkillHandler.UseSkillAction.m_index">
            <summary>
            The skill index
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.UseSkillHandler.UseSkillAction.m_type">
            <summary>
            The skill type
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.UseSkillHandler.UseSkillAction.#ctor(DOL.GS.GamePlayer,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new UseSkillAction
            </summary>
            <param name="actionSource">The action source</param>
            <param name="flagSpeedData">The skill type</param>
            <param name="index">The skill index</param>
            <param name="type">The skill type</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.UseSkillHandler.UseSkillAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.PlayerGroundTargetHandler.ChangeGroundTargetHandler">
            <summary>
            Handles ground target changes
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerGroundTargetHandler.ChangeGroundTargetHandler.m_x">
            <summary>
            The new ground X
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerGroundTargetHandler.ChangeGroundTargetHandler.m_y">
            <summary>
            The new ground Y
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerGroundTargetHandler.ChangeGroundTargetHandler.m_z">
            <summary>
            The new ground Z
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerGroundTargetHandler.ChangeGroundTargetHandler.#ctor(DOL.GS.GamePlayer,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Constructs a new ChangeGroundTargetHandler
            </summary>
            <param name="actionSource">The action source</param>
            <param name="x">The new ground X</param>
            <param name="y">The new ground Y</param>
            <param name="z">The new ground Z</param>
            <param name="flag"></param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerGroundTargetHandler.ChangeGroundTargetHandler.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.EmblemDialogReponseHandler">
            <summary>
            EmblemDialogReponseHandler is the response of client wend when we close the emblem selection dialogue.
            </summary>
        </member>
        <member name="T:DOL.GS.Keeps.eHandFlag">
            <summary>
            This is a convieniance enum for for inventory item hand flag
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.eHandFlag.Right">
            <summary>
            Right Handed Weapon
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.eHandFlag.Two">
            <summary>
            Two Handed Weapon
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.eHandFlag.Left">
            <summary>
            Left Handed Weapon
            </summary>
        </member>
        <member name="T:DOL.GS.Keeps.eExtension">
            <summary>
            This enum is used to tell us what extension level we want the armor to be
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.eExtension.Two">
            <summary>
            Armor Extension 2
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.eExtension.Three">
            <summary>
            Armor Extension 3
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.eExtension.Four">
            <summary>
            Armor Extension 4
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.eExtension.Five">
            <summary>
            Armor Extension 5
            </summary>
        </member>
        <member name="T:DOL.GS.Keeps.ClothingMgr">
            <summary>
            Class to manage the clothing of the guards
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.ClothingMgr.LoadTemplates">
            <summary>
            Method to load all the templates into memory
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.ClothingMgr.EquipGuard(DOL.GS.Keeps.GameKeepGuard)">
            <summary>
            Method to equip a guard
            </summary>
            <param name="guard">The guard object</param>
        </member>
        <member name="M:DOL.GS.Keeps.ClothingMgr.SetEmblem(DOL.GS.Keeps.GameKeepGuard)">
            <summary>
            Method to Set an Emblem to a Guards equipment
            </summary>
            <param name="guard">The guard object</param>
        </member>
        <member name="T:DOL.GS.Keeps.GameKeepGuard">
            <summary>
            Keep guard is gamemob with just different brain and load from other DB table
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepGuard.IsMale">
            <summary>
            Bools holding weather this guard is male or female.
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.AttackSpeed(DOL.Database.InventoryItem[])">
            <summary>
            Here we set the speeds we want our guards to have, this affects weapon damage
            </summary>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.AttackFinished(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            We need an event after an attack is finished so we know when players are unreachable by archery
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.StartAttack(DOL.GS.GameObject)">
            <summary>
            Override for StartAttack which chooses Ranged or Melee attack
            </summary>
            <param name="attackTarget"></param>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.GuardStartAttackCheckLOS(DOL.GS.GamePlayer,System.UInt16,System.UInt16)">
            <summary>
            We only attack if we have LOS
            </summary>
            <param name="player"></param>
            <param name="response"></param>
            <param name="targetOID"></param>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.GuardStopAttackCheckLOS(DOL.GS.GamePlayer,System.UInt16,System.UInt16)">
            <summary>
            If we don't have LOS we stop attack
            </summary>
            <param name="player"></param>
            <param name="response"></param>
            <param name="targetOID"></param>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.IsObjectInFront(DOL.GS.GameObject,System.Double)">
            <summary>
            Because of Spell issues, we will always return this true
            </summary>
            <param name="target"></param>
            <param name="viewangle"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.OnAttackedByEnemy(DOL.GS.AttackData)">
            <summary>
            Static archers attack with melee the closest if being engaged in melee
            </summary>
            <param name="ad"></param>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.Die(DOL.GS.GameObject)">
            <summary>
            When guards Die and it isnt a keep reset (this killer) we call GuardSpam function
            </summary>
            <param name="killer"></param>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.GuardSpam(DOL.GS.Keeps.GameKeepGuard)">
            <summary>
            Sends message to guild for guard death with enemy count in area
            </summary>
            <param name="guard">The guard object</param>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.GetEnemyCountInArea(DOL.GS.Keeps.GameKeepGuard)">
            <summary>
            Gets the count of enemies in the Area
            </summary>
            <param name="guard">The guard object</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.AddToWorld">
            <summary>
            When we add a guard to the world, we also attach an AttackFinished handler
            We use this to check LOS and range issues for our ranged guards
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.RemoveFromWorld">
            <summary>
            When we remove from world, we remove our special handler
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.StopRespawn">
            <summary>
            Method to stop a guards respawn
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.RespawnTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            When guards respawn we refresh them, if a patrol guard respawns we
            call a special function to update leadership
            </summary>
            <param name="respawnTimer"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.GetExamineMessages(DOL.GS.GamePlayer)">
            <summary>
            Gets the messages when you click on a guard
            </summary>
            <param name="player">The player that has done the clicking</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.GetPronoun(System.Int32,System.Boolean)">
            <summary>
            Gets the pronoun for the guards gender
            </summary>
            <param name="form">Form of the pronoun</param>
            <param name="firstLetterUppercase">Weather or not we want the first letter uppercase</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.LoadFromDatabase(DOL.Database.DataObject)">
            <summary>
            Load the guard from the database
            </summary>
            <param name="mobobject">The database mobobject</param>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.LoadFromPosition(DOL.Database.DBKeepPosition,DOL.GS.Keeps.GameKeepComponent)">
            <summary>
            Load the guard from a position
            </summary>
            <param name="pos">The position for the guard</param>
            <param name="component">The component it is being spawned on</param>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.MoveToPosition(DOL.Database.DBKeepPosition)">
            <summary>
            Move a guard to a position
            </summary>
            <param name="position">The new position for the guard</param>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepGuard.ChangeGuild">
            <summary>
            Change guild of guard (emblem on equipment) when keep is claimed
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepGuard.Level">
            <summary>
            We do this because if we set level when a guard is waiting to respawn,
            the guard will never respawn because the guard is given full health and
            is then considered alive
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepGuard.Mana">
            <summary>
            Guards always have Mana to cast spells
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepGuard.AttackRange">
            <summary>
            When moving guards have difficulty attacking players, so we double there attack range)
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepGuard.AttackRangeDistance">
            <summary>
            The distance attack range
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepGuard.CanUseRanged">
            <summary>
            Method to see if the Guard has been left alone long enough to use Ranged attacks
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepGuard.BeenAttackedRecently">
            <summary>
            Has the NPC been attacked recently.. currently 10 seconds
            </summary>
        </member>
        <member name="T:DOL.GS.GameClient">
            <summary>
            Represents a single connection to the game server
            </summary>
        </member>
        <member name="F:DOL.GS.GameClient.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GameClient.m_udpEndpoint">
            <summary>
            This variable holds the UDP endpoint of this client
            </summary>
        </member>
        <member name="F:DOL.GS.GameClient.m_clientState">
            <summary>
            Holds the current clientstate
            </summary>
        </member>
        <member name="F:DOL.GS.GameClient.m_player">
            <summary>
            This variable holds all info about the active player
            </summary>
        </member>
        <member name="F:DOL.GS.GameClient.m_activeCharIndex">
            <summary>
            This variable holds the active charindex
            </summary>
        </member>
        <member name="F:DOL.GS.GameClient.m_account">
            <summary>
            This variable holds the accountdata
            </summary>
        </member>
        <member name="F:DOL.GS.GameClient.m_pingTime">
            <summary>
            Holds the time of the last ping
            </summary>
        </member>
        <member name="F:DOL.GS.GameClient.m_sessionID">
            <summary>
            This variable holds the sessionid
            </summary>
        </member>
        <member name="M:DOL.GS.GameClient.#ctor(DOL.BaseServer)">
            <summary>
            Constructor for a game client
            </summary>
            <param name="srvr">The server that's communicating with this client</param>
        </member>
        <member name="M:DOL.GS.GameClient.OnRecv(System.Int32)">
            <summary>
            Called when a packet has been received.
            </summary>
            <param name="num_bytes">The number of bytes received</param>
            <remarks>This function parses the incoming data into individual packets and then calls the appropriate handler.</remarks>
        </member>
        <member name="M:DOL.GS.GameClient.OnDisconnect">
            <summary>
            Called when this client has been disconnected
            </summary>
        </member>
        <member name="M:DOL.GS.GameClient.OnConnect">
            <summary>
            Called when this client has connected
            </summary>
        </member>
        <member name="M:DOL.GS.GameClient.LoadPlayer(System.Int32)">
            <summary>
            Loads a player from the DB
            </summary>
            <param name="accountindex">Index of the character within the account</param>
        </member>
        <member name="M:DOL.GS.GameClient.SavePlayer">
            <summary>
            Saves a player to the DB
            </summary>
        </member>
        <member name="M:DOL.GS.GameClient.OnLinkdeath">
            <summary>
            Called when a player goes linkdead
            </summary>
        </member>
        <member name="M:DOL.GS.GameClient.Quit">
            <summary>
            Quits a client from the world
            </summary>
        </member>
        <member name="F:DOL.GS.GameClient.m_packetLib">
            <summary>
            The packetsender of this client
            </summary>
        </member>
        <member name="F:DOL.GS.GameClient.m_packetProcessor">
            <summary>
            The packetreceiver of this client
            </summary>
        </member>
        <member name="F:DOL.GS.GameClient.m_clientType">
            <summary>
            Holds client software type
            </summary>
        </member>
        <member name="F:DOL.GS.GameClient.m_clientAddons">
            <summary>
            Holds installed client addons
            </summary>
        </member>
        <member name="M:DOL.GS.GameClient.ToString">
            <summary>
            Returns short informations about the client
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.GameClient.UDPEndPoint">
            <summary>
            UDP address for this client
            </summary>
        </member>
        <member name="P:DOL.GS.GameClient.ClientState">
            <summary>
            Gets or sets the client state
            </summary>
        </member>
        <member name="P:DOL.GS.GameClient.IsPlaying">
            <summary>
            Gets whether or not the client is playing
            </summary>
        </member>
        <member name="P:DOL.GS.GameClient.Account">
            <summary>
            Gets or sets the account being used by this client
            </summary>
        </member>
        <member name="P:DOL.GS.GameClient.Player">
            <summary>
            Gets or sets the player this client is using
            </summary>
        </member>
        <member name="P:DOL.GS.GameClient.ActiveCharIndex">
            <summary>
            Gets or sets the character index for the player currently being used
            </summary>
        </member>
        <member name="P:DOL.GS.GameClient.SessionID">
            <summary>
            Gets or sets the session ID for this client
            </summary>
        </member>
        <member name="P:DOL.GS.GameClient.PingTime">
            <summary>
            Gets/Sets the time of last ping packet
            </summary>
        </member>
        <member name="P:DOL.GS.GameClient.Out">
            <summary>
            Gets or sets the packet sender
            </summary>
        </member>
        <member name="P:DOL.GS.GameClient.PacketProcessor">
            <summary>
            Gets or Sets the packet receiver
            </summary>
        </member>
        <member name="P:DOL.GS.GameClient.Version">
            <summary>
            the version of this client
            </summary>
        </member>
        <member name="P:DOL.GS.GameClient.ClientType">
            <summary>
            Gets/sets client software type (classic/SI/ToA/Catacombs)
            </summary>
        </member>
        <member name="P:DOL.GS.GameClient.ClientAddons">
            <summary>
            Gets/sets installed client addons (housing/new frontiers)
            </summary>
        </member>
        <member name="T:DOL.GS.GameClient.eClientState">
            <summary>
            Current state of the client
            </summary>
        </member>
        <member name="T:DOL.GS.GameClient.eClientVersion">
            <summary>
            the version enum 
            </summary>
        </member>
        <member name="T:DOL.GS.GameClient.eClientType">
            <summary>
            The client software type enum
            </summary>
        </member>
        <member name="T:DOL.GS.GameClient.eClientAddons">
            <summary>
            The client addons enum
            </summary>
        </member>
        <member name="T:DOL.Events.RegionEvent">
            <summary>
            This class holds all possible region events.
            Only constants defined here!
            </summary>
        </member>
        <member name="T:DOL.Events.DOLEvent">
            <summary>
            This class defines an abstract event in DOL
            It needs to be overridden in order to create
            custom events.
            </summary>
        </member>
        <member name="F:DOL.Events.DOLEvent.m_EventName">
            <summary>
            The event name
            </summary>
        </member>
        <member name="M:DOL.Events.DOLEvent.#ctor(System.String)">
            <summary>
            Constructs a new event
            </summary>
            <param name="name">The name of the event</param>
        </member>
        <member name="M:DOL.Events.DOLEvent.ToString">
            <summary>
            Returns the string representation of this event
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.Events.DOLEvent.IsValidFor(System.Object)">
            <summary>
            Returns true if the event target is valid for this event
            </summary>
            <param name="o">The object that is hooked</param>
            <returns></returns>
        </member>
        <member name="P:DOL.Events.DOLEvent.Name">
            <summary>
            Gets the name of this event
            </summary>
        </member>
        <member name="M:DOL.Events.RegionEvent.IsValidFor(System.Object)">
            <summary>
            Tests if this event is valid for the specified object
            </summary>
            <param name="o">The object for which the event wants to be registered</param>
            <returns>true if valid, false if not</returns>
        </member>
        <member name="F:DOL.Events.RegionEvent.PlayerEnter">
            <summary>
            The PlayerEnter event is fired whenever the player enters an region		
            </summary>
        </member>
        <member name="F:DOL.Events.RegionEvent.PlayerLeave">
            <summary>
            The PlayerLeave event is fired whenever the player leaves an region		
            </summary>
        </member>
        <member name="F:DOL.Events.RegionEvent.RegionStart">
            <summary>
            The RegionLoaded event is fired whenever the region is loaded	
            </summary>
        </member>
        <member name="F:DOL.Events.RegionEvent.RegionStop">
            <summary>
            The RegionUnLoaded event is fired whenever the region is unloaded	
            </summary>
        </member>
        <member name="T:DOL.Events.AreaEventArgs">
            <summary>
            Holfs the arguments for AreaEvents, this one can be used for either player, npcs or monster Enter/Leave
            </summary>
        </member>
        <member name="F:DOL.Events.AreaEventArgs.m_area">
            <summary>
            Area
            </summary>
        </member>
        <member name="F:DOL.Events.AreaEventArgs.m_object">
            <summary>
             Object either entering or leaving area
            </summary>
        </member>
        <member name="P:DOL.Events.AreaEventArgs.Area">
            <summary>
            Gets the area
            </summary>
        </member>
        <member name="P:DOL.Events.AreaEventArgs.GameObject">
            <summary>
            Gets the gameobject
            </summary>
        </member>
        <member name="T:DOL.Events.GameServerStartedEventAttribute">
            <summary>
            This attribute can be applied to static methods to automatically
            register them with the GameServer's global start event
            </summary>
        </member>
        <member name="M:DOL.Events.GameServerStartedEventAttribute.#ctor">
            <summary>
            Constructs a new GameServerStartedEventAttribute
            </summary>
        </member>
        <member name="T:DOL.Events.UseSlotEventArgs">
            <summary>
            Holds the arguments for UseSlot event of GamePlayer.
            </summary>
        </member>
        <member name="M:DOL.Events.UseSlotEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs new UseSlotEventArgs
            </summary>
            <param name="slot">The used slot</param>
            <param name="type">The type of 'use' used (0=simple click on icon, 1=/use, 2=/use2)</param>
        </member>
        <member name="P:DOL.Events.UseSlotEventArgs.Slot">
            <summary>
            Gets the slot that was used
            </summary>
        </member>
        <member name="P:DOL.Events.UseSlotEventArgs.Type">
            <summary>
            Gets the type of 'use' used (0=simple click on icon, 1=/use, 2=/use2)
            </summary>
        </member>
        <member name="T:DOL.Events.TakeDamageEventArgs">
            <summary>
            Holds the arguments for the TakeDamage event of GameObjects
            </summary>
        </member>
        <member name="M:DOL.Events.TakeDamageEventArgs.#ctor(DOL.GS.GameObject,DOL.GS.eDamageType,System.Int32,System.Int32)">
            <summary>
            Constructs new TakeDamageEventArgs
            </summary>
            <param name="damageSource">The damage source</param>
            <param name="damageType">The damage type</param>
            <param name="damageAmount">The damage amount</param>
            <param name="criticalAmount">The critical damage amount</param>
        </member>
        <member name="P:DOL.Events.TakeDamageEventArgs.DamageSource">
            <summary>
            Gets the damage source
            </summary>
        </member>
        <member name="P:DOL.Events.TakeDamageEventArgs.DamageType">
            <summary>
            Gets the damage type
            </summary>
        </member>
        <member name="P:DOL.Events.TakeDamageEventArgs.DamageAmount">
            <summary>
            Gets the damage amount
            </summary>
        </member>
        <member name="P:DOL.Events.TakeDamageEventArgs.CriticalAmount">
            <summary>
            Gets the critical damage amount
            </summary>
        </member>
        <member name="T:DOL.Events.ReceiveMoneyEventArgs">
            <summary>
            Holds the arguments for the ReceiveMoney event of GameLivings
            </summary>
        </member>
        <member name="M:DOL.Events.ReceiveMoneyEventArgs.#ctor(DOL.GS.GameLiving,DOL.GS.GameLiving,System.Int64)">
            <summary>
            Constructs new ReceiveMoneyEventArgs
            </summary>
            <param name="source">the source of the money</param>
            <param name="target">the target of the money</param>
            <param name="copperValue">the money value</param>
        </member>
        <member name="P:DOL.Events.ReceiveMoneyEventArgs.Source">
            <summary>
            Gets the GameLiving who spent the money
            </summary>
        </member>
        <member name="P:DOL.Events.ReceiveMoneyEventArgs.Target">
            <summary>
            Gets the GameLivng who receives the money
            </summary>
        </member>
        <member name="P:DOL.Events.ReceiveMoneyEventArgs.CopperValue">
            <summary>
            Gets the value of the money
            </summary>
        </member>
        <member name="T:DOL.Events.GamePlayerEvent">
            <summary>
            This class holds all possible player events.
            Only constants defined here!
            </summary>
        </member>
        <member name="T:DOL.Events.GameLivingEvent">
            <summary>
            This class holds all possible GameLiving events.
            Only constants defined here!
            </summary>
        </member>
        <member name="T:DOL.Events.GameObjectEvent">
            <summary>
            This class holds all possible GameObject events.
            Only constants defined here!
            </summary>
        </member>
        <member name="M:DOL.Events.GameObjectEvent.#ctor(System.String)">
            <summary>
            Constructs a new GameObjectEvent
            </summary>
            <param name="name">the name of the event</param>
        </member>
        <member name="M:DOL.Events.GameObjectEvent.IsValidFor(System.Object)">
            <summary>
            Tests if this event is valid for the specified object
            </summary>
            <param name="o">The object for which the event wants to be registered</param>
            <returns>true if valid, false if not</returns>
        </member>
        <member name="F:DOL.Events.GameObjectEvent.AddToWorld">
            <summary>
            The AddToWorld event is fired whenever the object is added to the world
            </summary>
        </member>
        <member name="F:DOL.Events.GameObjectEvent.RemoveFromWorld">
            <summary>
            The RemoveFromWorld event is fired whenever the object is removed from the world
            </summary>
        </member>
        <member name="F:DOL.Events.GameObjectEvent.MoveTo">
            <summary>
            The MoveTo event is fired whenever the object is moved to a new position by the MoveTo method
            <seealso cref="T:DOL.Events.MoveToEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameObjectEvent.Delete">
            <summary>
            The Delete event is fired whenever the object is deleted
            </summary>
        </member>
        <member name="F:DOL.Events.GameObjectEvent.Interact">
            <summary>
            The Interact event is fired whenever a player interacts with this object
            <seealso cref="T:DOL.Events.InteractEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameObjectEvent.InteractWith">
            <summary>
            The Interact event is fired whenever a player interacts with something
            <seealso cref="T:DOL.Events.InteractEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameObjectEvent.ReceiveItem">
            <summary>
            The ReceiveItem event is fired whenever the object receives an item
            <seealso cref="T:DOL.Events.ReceiveItemEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameObjectEvent.ReceiveMoney">
            <summary>
            The ReceiveMoney event is fired whenever the object receives money
            <seealso cref="T:DOL.Events.ReceiveMoneyEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameObjectEvent.TakeDamage">
            <summary>
            The TakeDamage event is fired whenever an object takes damage
            <seealso cref="T:DOL.Events.TakeDamageEventArgs"/>
            </summary>
        </member>
        <member name="M:DOL.Events.GameLivingEvent.#ctor(System.String)">
            <summary>
            Constructs a new GameLivingEvent
            </summary>
            <param name="name">the event name</param>
        </member>
        <member name="M:DOL.Events.GameLivingEvent.IsValidFor(System.Object)">
            <summary>
            Tests if this event is valid for the specified object
            </summary>
            <param name="o">The object for which the event wants to be registered</param>
            <returns>true if valid, false if not</returns>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.SayReceive">
            <summary>
            The SayReceive event is fired whenever the living receives a say
            <seealso cref="T:DOL.Events.SayReceiveEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.Say">
            <summary>
            The Say event is fired whenever the living says something
            <seealso cref="T:DOL.Events.SayEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.YellReceive">
            <summary>
            The YellReceive event is fired whenever the living receives a yell
            <seealso cref="T:DOL.Events.YellReceiveEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.Yell">
            <summary>
            The Yell event is fired whenever the living yells something
            <seealso cref="T:DOL.Events.YellEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.WhisperReceive">
            <summary>
            The WhisperReceive event is fired whenever the living receives a whisper
            <seealso cref="T:DOL.Events.WhisperReceiveEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.Whisper">
            <summary>
            The Whisper event is fired whenever the living whispers something
            <seealso cref="T:DOL.Events.WhisperEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.AttackedByEnemy">
            <summary>
            The Hit event is fired whenever the living is hit by gameliving
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.AttackFinished">
            <summary>
            The AttackedEnemy event is fired whenever the living makes attack
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.EnemyKilled">
            <summary>
            The EnemyKilled event is fired whenever the living kill something
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.GainedExperience">
            <summary>
            The GainedExperience event is fired whenever the living gains experience
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.GainedRealmPoints">
            <summary>
            The GainRealmPoints event is fired whenever the living gains realm points
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.Dying">
            <summary>
            The Dying event is fired just before the living died
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.Moving">
            <summary>
            The Moving event is fired whenever the living moves
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.EnemyHealed">
            <summary>
            The EnemyHealed event is fired whenever the living's enemy is healed
            <seealso cref="T:DOL.Events.EnemyHealedEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.Timer">
            <summary>
            The Timer event is fired whenever an previously added timer has finished
            Used within questsystem
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.CastSpell">
            <summary>
            The CastSpell event is fired whenever the living casts a spell
            </summary>
        </member>
        <member name="F:DOL.Events.GameLivingEvent.CastFinished">
            <summary>
            The CastFinished event is fired whenever the living finishes casting a spell
            </summary>
        </member>
        <member name="M:DOL.Events.GamePlayerEvent.#ctor(System.String)">
            <summary>
            Constructs a new GamePlayer event
            </summary>
            <param name="name">the event name</param>
        </member>
        <member name="M:DOL.Events.GamePlayerEvent.IsValidFor(System.Object)">
            <summary>
            Tests if this event is valid for the specified object
            </summary>
            <param name="o">The object for which the event wants to be registered</param>
            <returns>true if valid, false if not</returns>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.GameEntered">
            <summary>
            The GameEntered event is fired whenever the player enters the game
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.RegionChanged">
            <summary>
            The RegionChanged event is fired whenever the player changes the region
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.Released">
            <summary>
            The Released event is fired whenever the player has released
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.Revive">
            <summary>
            The Revive event is fired whenever the player is resurrected and at /release
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.Linkdeath">
            <summary>
            The Linkdeath event is fired whenever the player went linkdead
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.GiveItem">
            <summary>
            The MoveItem event is fired whenever the player wants to give away an item
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.GiveMoney">
            <summary>
            The MoveItem event is fired whenever the player wants to give away an item
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.Quit">
            <summary>
            The Quit event is fired whenever the player the player quits the game
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.UseSlot">
            <summary>
            The UseSlot event is fired whenever the player tries to use the slot
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.StealthStateChanged">
            <summary>
            The StealthStateChanged event is fired whenever the player's stealth state changes
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.LevelSecondStage">
            <summary>
            The OnLevelSecondStage event is fired whenever the player gains experience for level second stage
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.LevelUp">
            <summary>
            The OnLevelSecondStage event is fired whenever the player gains experience for next level
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.CommandNpcRelease">
            <summary>
            The CommandNpcRelease event is fired whenever the player commands to release controlled NPC
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.AcceptQuest">
            <summary>
            The AcceptQuest event is fired whenever the player accepts a quest offer generated via BaseQuestPart.AddAction(eActionType.OfferQuest)
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.DeclineQuest">
            <summary>
            The DeclineQuest event is fired whenever the player declines a quest offer generated via BaseQuestPart.AddAction(eActionType.OfferQuest)
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.ContinueQuest">
            <summary>
            The ContinueQuest event is fired whenever the player continues a quest abort generated via BaseQuestPart.AddAction(eActionType.OfferQuestAbort)
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.AbortQuest">
            <summary>
            The AbortQuest event is fired whenever the player aborts a quest generated via BaseQuestPart.AddAction(eActionType.OfferQuestAbort)
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.UseAbility">
            <summary>
            The UseAbility event is fired whenever the player uses ability
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.RRLevelUp">
            <summary>
            The RRLevelUp event is fired whenever the player gains a realm rank
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.RLLevelUp">
            <summary>
            The RLLevelUp event is fired whenever the player gains a realm level
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.KillsTotalPlayersChanged">
            <summary>
            The KillsTotalPlayersChanged event is fired when any of the KillsxxxPlayersChanged property changes.
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.KillsAlbionPlayersChanged">
            <summary>
            The KillsAlbionPlayersChanged event is fired when KillsAlbionPlayers property changes.
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.KillsMidgardPlayersChanged">
            <summary>
            The KillsMidgardPlayersChanged event is fired when KillsMidgardPlayers property changes.
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.KillsHiberniaPlayersChanged">
            <summary>
            The KillsHiberniaPlayersChanged event is fired when KillsHiberniaPlayers property changes.
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.KillsTotalDeathBlowsChanged">
            <summary>
            The KillsTotalDeathBlowsChanged event is fired when KillsAlbionDeathBlows, KillsMidgardDeathBlows or KillsHiberniaDeathBlows properties changes.
            </summary>
        </member>
        <member name="F:DOL.Events.GamePlayerEvent.KillsTotalSoloChanged">
            <summary>
            The KillsTotalSoloChanged event is fired when KillsAlbionSolo, KillsMidgardSolo or KillsHiberniaSolo properties changes.
            </summary>
        </member>
        <member name="T:DOL.Events.GainedRealmPointsEventArgs">
            <summary>
            Holds the arguments for the GainedRealmPoints event of GameLivings
            </summary>
        </member>
        <member name="M:DOL.Events.GainedRealmPointsEventArgs.#ctor(System.Int64)">
            <summary>
            Constructs new GainedRealmPointsEventArgs
            </summary>
            <param name="realmPoints">the amount of realm points gained</param>
        </member>
        <member name="P:DOL.Events.GainedRealmPointsEventArgs.RealmPoints">
            <summary>
            Gets the amount of realm points gained
            </summary>
        </member>
        <member name="T:DOL.Events.FollowLostTargetEventArgs">
            <summary>
            Holds the arguments for the FollowLostTarget event of GameNpc
            </summary>
        </member>
        <member name="M:DOL.Events.FollowLostTargetEventArgs.#ctor(DOL.GS.GameObject)">
            <summary>
            Constructs new FollowLostTargetEventArgs
            </summary>
            <param name="lostTarget">The lost follow target</param>
        </member>
        <member name="P:DOL.Events.FollowLostTargetEventArgs.LostTarget">
            <summary>
            Gets the lost follow target
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.QuickCastEffect">
            <summary>
            The helper class for quckcast ability
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.IGameEffect">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.IGameEffect.Cancel(System.Boolean)">
            <summary>
            Effect must be canceled
            </summary>
            <param name="playerCanceled">true if player decided to cancel that effect by shift + rightclick</param>
        </member>
        <member name="P:DOL.GS.Effects.IGameEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.IGameEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in seconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.IGameEffect.Icon">
            <summary>
            Icon to show on players, can be id
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.IGameEffect.InternalID">
            <summary>
            Unique ID, will be set by effect list on add
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.IGameEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.QuickCastEffect.delveString">
            <summary>
            The ability description
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.QuickCastEffect.m_player">
            <summary>
            The owner of the effect
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.QuickCastEffect.m_id">
            <summary>
            The internal unique effect ID
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.QuickCastEffect.#ctor">
            <summary>
            Creates a new quickcast effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.QuickCastEffect.Start(DOL.GS.GamePlayer)">
            <summary>
            Start the quickcast on player
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.QuickCastEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect must be canceled
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.QuickCastEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.QuickCastEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.QuickCastEffect.Icon">
            <summary>
            Icon to show on players, can be id
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.QuickCastEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.QuickCastEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.IAggressiveBrain.AddToAggroList(DOL.GS.GameLiving,System.Int32)">
            <summary>
            Add living to the aggrolist
            aggroamount can be negative to lower amount of aggro		
            </summary>
            <param name="living"></param>
            <param name="aggroamount"></param>
        </member>
        <member name="M:DOL.AI.Brain.IAggressiveBrain.GetAggroAmountForLiving(DOL.GS.GameLiving)">
            <summary>
            Get current amount of aggro on aggrotable
            </summary>
            <param name="living"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.AI.Brain.IAggressiveBrain.RemoveFromAggroList(DOL.GS.GameLiving)">
            <summary>
            Remove one living from aggro list
            </summary>
            <param name="living"></param>
        </member>
        <member name="M:DOL.AI.Brain.IAggressiveBrain.ClearAggroList">
            <summary>
            Remove all livings from the aggrolist
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.IAggressiveBrain.CloneAggroList">
            <summary>
            Makes a copy of current aggro list
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.AI.Brain.IAggressiveBrain.CalculateAggroLevelToTarget(DOL.GS.GameLiving)">
            <summary>
            calculate the aggro of this npc against another living
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:DOL.AI.Brain.IAggressiveBrain.AggroLevel">
            <summary>
            Aggressive Level in % 0..100, 0 means not Aggressive
            </summary>
        </member>
        <member name="P:DOL.AI.Brain.IAggressiveBrain.AggroRange">
            <summary>
            Range in that this npc aggros
            </summary>
        </member>
        <member name="T:DOL.GS.Trainer.MagicianTrainer">
            <summary>
            Magician Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.MagicianTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.MagicianTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.ChampionTrainer">
            <summary>
            Champion Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.ChampionTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ChampionTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ChampionTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.AlbionRogueTrainer">
            <summary>
            Albion Rogue Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.AlbionRogueTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.AlbionRogueTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Spells.SpreadhealSpellHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.HealSpellHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.HealSpellHandler.StartSpell(DOL.GS.GameLiving)">
            <summary>
            Execute heal spell
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.Spells.HealSpellHandler.HealTarget(DOL.GS.GameLiving,System.Int32)">
            <summary>
            Heals hit points of one target and sends needed messages, no spell effects
            </summary>
            <param name="target"></param>
            <param name="amount">amount of hit points to heal</param>
            <returns>true if heal was done</returns>
        </member>
        <member name="M:DOL.GS.Spells.HealSpellHandler.CalculateHealVariance(System.Int32@,System.Int32@)">
            <summary>
            Calculates heal variance based on spec
            </summary>
            <param name="min">store min variance here</param>
            <param name="max">store max variance here</param>
        </member>
        <member name="M:DOL.GS.Spells.SpreadhealSpellHandler.HealTarget(DOL.GS.GameLiving,System.Int32)">
            <summary>
            Heals targets group
            </summary>
            <param name="target"></param>
            <param name="amount">amount of hit points to heal</param>
            <returns>true if heal was done</returns>
        </member>
        <member name="T:DOL.GS.Spells.HoTSpellHandler">
            <summary>
            Heal Over Time spell handler
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.HoTSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            Execute heal over time spell
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.Spells.HoTSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="T:DOL.GS.SkillHandler.InterceptAbilityHandler">
            <summary>
            Handler for Intercept ability clicks
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.InterceptAbilityHandler.INTERCEPT_DISTANCE">
            <summary>
            The intercept distance
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.InterceptAbilityHandler.REUSE_TIMER">
            <summary>
            Intercept reuse timer in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.InterceptAbilityHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.SkillHandler.InterceptAbilityHandler.Execute(DOL.GS.Ability,DOL.GS.GamePlayer)">
            <summary>
            Executes the ability
            </summary>
            <param name="ab">The ability used</param>
            <param name="player">The player that used the ability</param>
        </member>
        <member name="T:DOL.GS.ServerRules.DFEnterJumpPoint">
            <summary>
            Handles DF entrance jump point allowing only one realm to enter on Normal server type.
            </summary>
        </member>
        <member name="T:DOL.GS.ServerRules.IJumpPointHandler">
            <summary>
            Denotes a class as a jump point handler
            </summary>
        </member>
        <member name="M:DOL.GS.ServerRules.IJumpPointHandler.IsAllowedToJump(DOL.Database.ZonePoint,DOL.GS.GamePlayer)">
            <summary>
            Decides whether player can jump to the target point.
            All messages with reasons must be sent here.
            Can change destination too.
            </summary>
            <param name="targetPoint">The jump destination</param>
            <param name="player">The jumping player</param>
            <returns>True if allowed</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.DFEnterJumpPoint.IsAllowedToJump(DOL.Database.ZonePoint,DOL.GS.GamePlayer)">
            <summary>
            Decides whether player can jump to the target point.
            All messages with reasons must be sent here.
            Can change destination too.
            </summary>
            <param name="targetPoint">The jump destination</param>
            <param name="player">The jumping player</param>
            <returns>True if allowed</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.DFEnterJumpPoint.OnScriptLoaded(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            initialize the darkness fall entrance system
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:DOL.GS.ServerRules.DFEnterJumpPoint.CheckDFOwner">
            <summary>
            check if a realm have more keep at start
            to know the DF owner
            </summary>
        </member>
        <member name="M:DOL.GS.ServerRules.DFEnterJumpPoint.OnKeepTaken(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            when  keep is taken it check if the realm which take gain the control of DF
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="T:DOL.GS.Quests.eTriggerType">
             <summary>
             Triggertype defines a list of available triggers to use within questparts.
             Depending on triggertype triggerVariable and triggerkeyword will have special
             meaning look at documentation of each triggertype for details
             </summary>
            <remarks>
             Syntax: ... I:eEmote(eEmote.Yes) ... Parameter I must be of Type
             eEmote and has the default value of "eEmote.Yes" (used if no value is passed).
             If no default value is defined value must be passed along with trigger.
             </remarks>
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.None">
            <summary>
            No Triggertype at all, needed since triggertype cannot be null when passed as an argument
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.AcceptQuest">
            <summary>
            AQST : player accepts quest I:Type[Typename:string](Current Quest)
            </summary>       
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.EnemyDying">
            <summary>
            DEAT : Enemy I:GameLiving[GameLiving's Id or Name:string](NPC) died, no matter who/what killed it
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.DeclineQuest">
            <summary>
            DQST : Player declines quest I:Type[Typename:string](Current Quest)
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.ContinueQuest">
            <summary>
            Continue quest I:Type[Typename:string](Current Quest) after abort quest offer
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.AbortQuest">
            <summary>
            Abort quest I:Type[Typename:string](Current Quest) after abort quest offer
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.EnterArea">
            <summary>
            player enters area I:IArea        
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.LeaveArea">
            <summary>
            player leaves area I:IArea
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.Interact">
            <summary>
            INTE : player right-clicks I:GameLiving[GameLiving's Id or Name:string](NPC)
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.PlayerKilled">
            <summary>
             KILL : Monster I:GameLiving[GameLiving's Id or Name:string](NPC) kills the quest player
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.EnemyKilled">
            <summary>
            PKIL : a player (and only a player) kills any monster with the name K:string or a specific monster I:GameLiving[GameLiving's Id or Name:string](NPC)
            if TriggerKeyword != null
                triggerkeyword = name of monster
            else
                I = monster object
            </summary>        
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.GiveItem">
            <summary>
            TAKE : Player gives item I:ItemTemplate[Item's Id_nb:string] to K:GameLiving[GameLiving's Id or Name:string](NPC)
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.Whisper">
            <summary>
            WORD : player whispers the word K:string to I:GameLiving[GameLiving's Id or Name:string](NPC)
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.Timer">
            <summary>
            TMR# :  timer with id K:string has finished
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eTriggerType.ItemUsed">
            <summary>
            USED : Item I:ItemTemplate[Item's Id_nb:string] is used by player
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="T:DOL.GS.Quests.BaseQuestTrigger">
            <summary>
            A trigger defines the circumstances under which a certain QuestAction is fired.
            This can be eTriggerAction.Interact, eTriggerAction.GiveItem, eTriggerAction.Attack, etc...
            Additional there are two variables to add the needed parameters for the triggertype (Item to give for GiveItem, NPC to interact for Interact, etc...). To fire a QuestAction at least one of the added triggers must be fulfilled. 
            </summary>        
        </member>
        <member name="T:DOL.GS.Quests.AbstractQuestTrigger">
            <summary>
            A trigger defines the circumstances under which a certain QuestAction is fired.
            This can be eTriggerAction.Interact, eTriggerAction.GiveItem, eTriggerAction.Attack, etc...
            Additional there are two variables to add the needed parameters for the triggertype (Item to give for GiveItem, NPC to interact for Interact, etc...). To fire a QuestAction at least one of the added triggers must be fulfilled. 
            </summary>        
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuestTrigger.#ctor(DOL.GS.Quests.BaseQuestPart,DOL.GS.Quests.eTriggerType,System.String,System.Object)">
            <summary>
            Creates a new questtrigger and does some simple triggertype parameter compatibility checking
            </summary>
            <param name="questPart"></param>
            <param name="type">Triggertype</param>
            <param name="keyword">keyword (K), meaning depends on triggertype</param>
            <param name="var">variable (I), meaning depends on triggertype</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuestTrigger.#ctor(DOL.GS.GameLiving,DOL.Events.DOLEventHandler,DOL.GS.Quests.eTriggerType,System.String,System.Object)">
            <summary>
            Creates a new questtrigger and does some simple triggertype parameter compatibility checking
            </summary>
            <param name="defaultNPC"></param>
            <param name="notifyHandler"></param>
            <param name="type">Triggertype</param>
            <param name="keyword">keyword (K), meaning depends on triggertype</param>
            <param name="var">variable (I), meaning depends on triggertype</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuestTrigger.Check(DOL.Events.DOLEvent,System.Object,System.EventArgs,DOL.GS.GamePlayer)">
            <summary>
            Checks the trigger, this method is called whenever a event associated with this questparts quest
            or a manualy associated eventhandler is notified.
            </summary>
            <param name="e">DolEvent of notify call</param>
            <param name="sender">Sender of notify call</param>
            <param name="args">EventArgs of notify call</param>
            <param name="player">GamePlayer this call is related to, can be null</param>
            <returns>true if QuestPart should be executes, else false</returns>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuestTrigger.Register">
            <summary>
            Registers the needed EventHandler for this Trigger
            </summary>
            <remarks>
            This method will be called multiple times, so use AddHandlerUnique to make
            sure only one handler is actually registered
            </remarks>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuestTrigger.Unregister">
            <summary>
            Unregisters the needed EventHandler for this Trigger
            </summary>
            <remarks>
            Don't remove handlers that will be used by other triggers etc.
            This is rather difficult since we don't know which events other triggers use.
            </remarks>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuestTrigger.K">
            <summary>
            Trigger Keyword
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuestTrigger.I">
            <summary>
            Trigger Variable
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuestTrigger.TriggerType">
            <summary>
            Triggertype
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuestTrigger.NPC">
            <summary>
            returns the NPC of the trigger
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestTrigger.#ctor(DOL.GS.Quests.BaseQuestPart,DOL.GS.Quests.eTriggerType,System.String,System.Object)">
            <summary>
            Creates a new questtrigger and does some simple triggertype parameter compatibility checking
            </summary>
            <param name="questPart">Parent QuestPart of this Trigger</param>
            <param name="type">Triggertype</param>
            <param name="keyword">keyword (K), meaning depends on triggertype</param>
            <param name="var">variable (I), meaning depends on triggertype</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestTrigger.Check(DOL.Events.DOLEvent,System.Object,System.EventArgs,DOL.GS.GamePlayer)">
            <summary>
            Checks the trigger, this method is called whenever a event associated with this questparts quest
            or a manualy associated eventhandler is notified.
            </summary>
            <param name="e">DolEvent of notify call</param>
            <param name="sender">Sender of notify call</param>
            <param name="args">EventArgs of notify call</param>
            <param name="player">GamePlayer this call is related to, can be null</param>
            <returns>true if QuestPart should be executes, else false</returns>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestTrigger.Register">
            <summary>
            Registers the needed EventHandler for this Trigger
            </summary>
            <remarks>
            This method will be called multiple times, so use AddHandlerUnique to make
            sure only one handler is actually registered
            </remarks>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestTrigger.Unregister">
            <summary>
            Unregisters the needed EventHandler for this Trigger
            </summary>
            <remarks>
            Don't remove handlers that will be used by other triggers etc.
            This is rather difficult since we don't know which events other triggers use.
            </remarks>
        </member>
        <member name="T:DOL.GS.Quests.eTextType">
            <summary>
            Type of textoutput this one is used for general text messages within questpart.   
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eTextType.None">
            <summary>
            No output at all
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eTextType.Emote">
            <summary>
            EMOT : display the text localy without monster's name (local channel)
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eTextType.Broadcast">
            <summary>
            BROA : broadcast the text in the entire zone (broadcast channel)
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eTextType.Dialog">
            <summary>
            DIAG : display the text in a dialog box with an OK button
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eTextType.Read">
            <summary>
            READ : open a description (bracket) windows saying what is written on the item
            </summary>
        </member>
        <member name="T:DOL.GS.Quests.eActionType">
             <summary>
             Actiontype defines a list of actiontypes to be used qith questparts.
             Depending on actiontype P and Q will have special
             meaning look at documentation of each actiontype for details       
             </summary>
            <remarks>
             Syntax: ... P:eEmote(eEmote.Yes) ... Parameter P must be of Type
             eEmote and has the default value of "eEmote.Yes" (used if no value is passed).
             If no default value is defined value must be passed along with action.
             </remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.Animation">
            <summary>
            ANIM : emote P:eEmote is performed by GameLiving:Q(Player)[NPC's ID:string]
            </summary>
            <remarks>TO let player perform animation Q must be null.
            Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.Attack">
            <summary>
            ATTA : Player is attacked with aggroamount P:int(Player.Level/2)[string] by monster Q:GameNPC(NPC)[NPC's ID:string]
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.WalkTo">
            <summary>
            GameNPC Q:GameNPC(NPC)[NPC's ID:string] walks to point P:GameLocation(player)
            </summary>        
        </member>
        <member name="F:DOL.GS.Quests.eActionType.WalkToSpawn">
            <summary>
            GameNPC Q:GameNPC(NPC)[NPC's ID:string] walks to spawnpoint
            </summary>        
        </member>
        <member name="F:DOL.GS.Quests.eActionType.MoveTo">
            <summary>
            GameLiving Q:GameLiving(NPC)[NPC's ID:string] jumps immediatly to point P:GameLocation(player)
            </summary>        
        </member>
        <member name="F:DOL.GS.Quests.eActionType.CustomDialog">
            <summary>
            Displays a custom dialog with message P:string and CustomDialogresponse Q:CustomDialogResponse
            To Accept/Abort Quests use OfferQuest/OfferQuestAbort
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.DestroyItem">
            <summary>
            DINV : destroys Q:int(1)[string] instances of item P:ItemTemplate[Item's ID_nb:string] in inventory        
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.DropItem">
            <summary>
            DROP : item P:ItemTemplate[Item's ID_nb:string] is dropped on the ground
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.FinishQuest">
            <summary>
            FQST : quest P:Type[Typename:string](Current Quest) is set as completed for player
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.GiveGold">
            <summary>
            GCPR : gives P:long[string] coppers
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.TakeGold">
            <summary>
            TCPR : takes P:long[string] coppers
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.GiveXP">
            <summary>
            GEXP : gives P:long[string] experience points
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.GiveItem">
            <summary>
            GIVE : NPC Q gives item P:ItemTemplate[Item's ID_nb:string] to player
            if NPC!= null NPC will give item to player, otherwise it appears mysteriously :)
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.TakeItem">
            <summary>
            NPC takes Q:int[string] instances of item P:ItemTemplate[Item's ID_nb:string] from player
            default for q## is 1
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.GiveQuest">
            <summary>
            QST : Q:GameNPC(NPC) assigns quest P:Type[Typename:string](Current Quest) to player        
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.OfferQuest">
            <summary>
            Quest P:Type[Typename:string](Current Quest) is offered to player via customdialog with message Q:string ny NPC
            if player accepts GamePlayerEvent.AcceptQuest is fired, else GamePlayerEvent.RejectQuest
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.OfferQuestAbort">
            <summary>
            Quest P:Type[Typename:string](Current Quest) abort is offered to player via customdialog with message Q:string by NPC
            if player accepts GamePlayerEvent.AbortQuest is fired, else GamePlayerEvent.ContinueQuest
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.SetGuildName">
            <summary>
            GUIL : guild of Q:GameLiving(NPC)[NPC's ID:string] is set to P:string (not player's guilds)
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.SetMonsterPath">
            <summary>
            IPTH : monster Q:GameNPC(NPC)[NPC's ID:string] is assigned to path P:PathPoint
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.SetQuestStep">
            <summary>
            IQST : Quest P:Type[Typename:string](Current Quest) is set to step Q:int[string]
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.AbortQuest">
            <summary>
            KQST : Aborts quest P:Type[Typename:string](Current Quest)
            </summary>  
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.Message">
            <summary>
            MES : Displays a message P:string of Texttype Q:TextType(Emote)
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.MonsterSpawn">
            <summary>
            MGEN : Monster P:GameLiving[NPC's ID:string] will spawn considering all its requirements
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.MonsterUnspawn">
            <summary>
            Monster P:GameLiving[NPC's ID:string] will unspawn considering all its requirements
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.ReplaceItem">
            <summary>
            SINV : Item P:ItemTemplate[Item's Id_nb:string] is replaceb by item Q:ItemTemplate[Item's Id_nb:string] in inventory of player
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.IncQuestStep">
            <summary>
            SQST : Increments queststep of quest P:Type[TypeName:string](Current Quest)
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.Talk">
            <summary>
            TALK : Q:GameLiving(NPC) says message P:string locally (local channel)
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.Teleport">
            <summary>
            TELE : teleports player to destination P:GameLocation with a random distance of Q:int(0)[string]
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.CustomTimer">
            <summary>
            TIMR : regiontimer P:RegionTimer starts to count Q:int[string] milliseconds        
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.Timer">
            <summary>
            TMR# :  timer P:string starts to count Q:int[string] milliseconds
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eActionType.Whisper">
            <summary>
            WHIS : Q:GameLiving(NPC) whispers message P:string to player
            </summary>
        </member>
        <member name="T:DOL.GS.Quests.BaseQuestAction">
            <summary>
            If one trigger and all requirements are fulfilled the corresponding actions of
            a QuestAction will we executed one after another. Actions can be more or less anything:
            at the moment there are: GiveItem, TakeItem, Talk, Give Quest, Increase Quest Step, FinishQuest,
            etc....
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.BaseQuestAction.PLAYER">
            <summary>
            Player Constant will be replaced by players name in output messages.
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.BaseQuestAction.TIMER_ID">
            <summary>
            Constant used to store timerid in RegionTimer.Properties
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.BaseQuestAction.TIMER_SOURCE">
            <summary>
            Constant used to store GameLiving Source in RegionTimer.Properties
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestAction.#ctor(DOL.GS.Quests.BaseQuestPart,DOL.GS.Quests.eActionType,System.Object,System.Object)">
            
            <summary>
            Initializes a new instance of the <see cref="T:DOL.GS.Quests.BaseQuestAction"/> class.
            </summary>
            <param name="questPart">Parent QuestPart of this Action</param>
            <param name="actionType">Type of action</param>
            <param name="p">Action Parameter</param>
            <param name="q">Action Parameter</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestAction.Perform(DOL.Events.DOLEvent,System.Object,System.EventArgs,DOL.GS.GamePlayer)">
            <summary>
            Action performed 
            Can be used in subclasses to define special behaviour of actions
            </summary>
            <param name="e">DolEvent of notify call</param>
            <param name="sender">Sender of notify call</param>
            <param name="args">EventArgs of notify call</param>
            <param name="player">GamePlayer this call is related to, can be null</param>        
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestAction.QuestTimerCallBack(DOL.GS.RegionTimer)">
            <summary>
            Callback for quest internal timers used via eActionType.Timer and eTriggerType.Timer
            </summary>
            <param name="callingTimer"></param>
            <returns>0</returns>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestAction.GetPersonalizedMessage(System.String,DOL.GS.GamePlayer)">
            <summary>
            Personalizes the given message by replacing all instances of PLAYER with the actual name of the player
            </summary>
            <param name="message">message to personalize</param>
            <param name="player">Player's name to insert</param>
            <returns>message with actual name of player instead of PLAYER</returns>
        </member>
        <member name="T:DOL.GS.PropertyCalc.RangedDamagePercentCalculator">
             <summary>
             The ranged damage bonus percent calculator
            
             BuffBonusCategory1 is used for buffs
             BuffBonusCategory2 unused
             BuffBonusCategory3 is used for debuff
             BuffBonusCategory4 unused
             BuffBonusMultCategory1 unused
             </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.ParryChanceCalculator">
            <summary>
            The parry chance calculator. Returns 0 .. 1000 chance.
            
            BuffBonusCategory1 unused
            BuffBonusCategory2 unused
            BuffBonusCategory3 unused
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.FocusLevelCalculator">
             <summary>
             The Focus Level calculator
            
             BuffBonusCategory1 is used for buffs, uncapped
             BuffBonusCategory2 unused
             BuffBonusCategory3 unused
             BuffBonusCategory4 unused
             BuffBonusMultCategory1 unused
             </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.EnduranceRegenerationRateCalculator">
            <summary>
            The health regen rate calculator
            
            BuffBonusCategory1 is used for all buffs
            BuffBonusCategory2 is used for all debuffs (positive values expected here)
            BuffBonusCategory3 unused
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="M:DOL.GS.PropertyCalc.EnduranceRegenerationRateCalculator.CalcValue(DOL.GS.GameLiving,DOL.GS.eProperty)">
            <summary>
            calculates the final property value
            </summary>
            <param name="living"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Scripts.ClassSkald">
             <summary>
            
             </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassViking">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassShadowblade">
             <summary>
            
             </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassMidgardRogue">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassShadowblade.CanUseLefthandedWeapon(DOL.GS.GamePlayer)">
            <summary>
            Checks whether player has ability to use lefthanded weapons
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DOL.GS.Scripts.ClassShadowblade.OnSkillTrained(DOL.GS.GamePlayer,DOL.GS.Specialization)" -->
        <member name="T:DOL.GS.Scripts.ClassMinstrel">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassAlbionRogue">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DOL.GS.Scripts.ClassMinstrel.OnSkillTrained(DOL.GS.GamePlayer,DOL.GS.Specialization)" -->
        <member name="T:DOL.GS.Keeps.GameKeepHookPoint">
            <summary>
            A keepComponent
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:DOL.GS.Keeps.GameKeepHookPoint.m_index" -->
        <member name="T:DOL.GS.Keeps.GameKeepComponent">
            <summary>
            A keepComponent
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepComponent.m_keep">
            <summary>
            keep owner of component
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepComponent.m_id">
            <summary>
            id of keep component id keep
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepComponent.m_height">
            <summary>
            height of keep grow with level
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepComponent.m_skin">
            <summary>
            skin of keep component (wall, tower, ...)
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepComponent.m_componentx">
            <summary>
            relative X to keep
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepComponent.m_componenty">
            <summary>
            relative Y to keep
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepComponent.m_componentHeading">
            <summary>
            relative heading to keep ( 0, 1, 2, 3)
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepComponent.StartHealthRegeneration">
            <summary>
            do not regen
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepComponent.#ctor">
            <summary>
            constructor of component
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepComponent.LoadFromDatabase(DOL.Database.DBKeepComponent,DOL.GS.Keeps.AbstractGameKeep)">
            <summary>
            load component from db object
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepComponent.SaveIntoDatabase">
            <summary>
            save component in DB
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepComponent.TakeDamage(DOL.GS.GameObject,DOL.GS.eDamageType,System.Int32,System.Int32)">
            <summary>
            broadcast life of keep component
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepComponent.CompareTo(System.Object)">
            <summary>
            IComparable.CompareTo implementation.
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepComponent.Keep">
            <summary>
            keep owner of component
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepComponent.ID">
            <summary>
            id of keep component id keep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepComponent.Height">
            <summary>
            height of keep grow with level
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepComponent.ComponentX">
            <summary>
            relative X to keep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepComponent.ComponentY">
            <summary>
            relative Y to keep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepComponent.ComponentHeading">
            <summary>
            relative heading to keep ( 0, 1, 2, 3)
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepComponent.Level">
            <summary>
            Level of component
            </summary>
        </member>
        <member name="T:DOL.GS.Keeps.GameKeep">
            <summary>
            GameKeep is the keep in New Frontiere
            </summary>
        </member>
        <member name="T:DOL.GS.Keeps.AbstractGameKeep">
            <summary>
            AbstractGameKeep is the keep or a tower in game in RVR
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.CLAIM_CALLBACK_INTERVAL">
            <summary>
            The time interval in milliseconds that defines how
            often guild bounty points should be removed
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.m_claimTimer">
            <summary>
            Timer to remove bounty point and add realm point to guild which own keep
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.m_changeLevelTimer">
            <summary>
            Timerto upgrade the keep level
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.m_keepComponents">
            <summary>
            This hold all keep components
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.m_doors">
            <summary>
            This hold list of all keep doors
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.m_dbkeep">
            <summary>
            the keep db object
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.m_guards">
            <summary>
            This hold list of all guards of keep
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.m_banners">
            <summary>
            List of all banners
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.m_currentRegion">
            <summary>
            region of the keep
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.m_guild">
            <summary>
            This hold the guild which has claimed the keep
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.m_difficultyLevel">
            <summary>
            Difficulty level of keep for each realm
            the keep is more difficult the guild which have claimed gain more bonus
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.EffectiveLevel(System.Byte)">
            <summary>
            calculate the effective level from a keep level
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.#ctor">
            <summary>
            AbstractGameKeep constructor
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.Load(DOL.Database.DBKeep)">
            <summary>
            load keep from Db object and load keep component and object of keep
            </summary>
            <param name="keep"></param>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.LoadFromDatabase(DOL.Database.DataObject)">
            <summary>
            load keep from DB
            </summary>
            <param name="keep"></param>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.SaveIntoDatabase">
            <summary>
            save keep in DB
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.ClaimBountyPointCost">
            <summary>
            table of claim bounty point take from guild each cycle
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.Claim(DOL.GS.GamePlayer)">
            <summary>
            claim the keep to a guild
            </summary>
            <param name="player">the player who have claim the keep</param>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.StartDeductionTimer">
            <summary>
            Starts the deduction timer
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.StopDeductionTimer">
            <summary>
            Stops the deduction timer
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.ClaimCallBack(DOL.GS.RegionTimer)">
            <summary>
            Callback method for the claim timer, it deducts bounty points and gains realm points for a guild
            </summary>
            <param name="timer"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.Release">
            <summary>
            released the keep of the guild
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.ChangeLevel(System.Byte)">
            <summary>
            upgrade keep to a target level
            </summary>
            <param name="targetLevel">the target level</param>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.StartChangeLevel(System.Byte)">
            <summary>
            Start changing the keeps level to a target level
            </summary>
            <param name="targetLevel">The target level</param>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.StartChangeLevelTimer">
            <summary>
            Starts the Change Level Timer
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.StopChangeLevelTimer">
            <summary>
            Stops the Change Level Timer
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.DestroyChangeLevelTimer">
            <summary>
            Destroys the Change Level Timer
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.ChangeLevelTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            Change Level Timer Callback, this method handles the the action part of the change level timer
            </summary>
            <param name="timer"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.CalculateTimeToUpgrade">
            <summary>
            calculate time to upgrade keep, in milliseconds
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.Reset(DOL.GS.PacketHandler.eRealm)">
            <summary>
            reset the realm when the lord have been killed
            </summary>
            <param name="realm"></param>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.ResetPlayersOfKeep">
            <summary>
            This method is important, because players could fall through air
            if they are on the top of a keep when it is captured because
            the keep size will reset
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.AbstractGameKeep.SendKeepInit(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            send keep init when player enter in region
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.KeepComponents">
            <summary>
            Keep components ( wall, tower, gate,...)
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.Doors">
            <summary>
            keep doors
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.DBKeep">
            <summary>
            the keepdb object
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.Guards">
            <summary>
            List of all guards of keep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.Banners">
            <summary>
            List of all banners
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.CurrentRegion">
            <summary>
            region of the keep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.CurrentZone">
            <summary>
            zone of the keep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.Guild">
            <summary>
            The guild which has claimed the keep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.DifficultyLevel">
            <summary>
            Difficulty level of keep for each realm
            the keep is more difficult the guild which have claimed gain more bonus
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.TargetLevel">
            <summary>
            The target level for upgrading or downgrading
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.KeepID">
            <summary>
            The Keep ID linked to the DBKeep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.Level">
            <summary>
            The Keep Level linked to the DBKeep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.Name">
            <summary>
            The Keep Name linked to the DBKeep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.Region">
            <summary>
            The Keep Region ID linked to the DBKeep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.X">
            <summary>
            The Keep X linked to the DBKeep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.Y">
            <summary>
            The Keep Y linked to the DBKeep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.Z">
            <summary>
            The Keep Z linked to the DBKeep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.Heading">
            <summary>
            The Keep Heading linked to the DBKeep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.Realm">
            <summary>
            The Keep Realm linked to the DBKeep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.OriginalRealm">
            <summary>
            The Original Keep Realm linked to the DBKeep
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.InternalID">
            <summary>
            The Keep Internal ID
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.KeepType">
            <summary>
            The Keep Type
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.ChangeLevelTimeRemaining">
            <summary>
            Time remaining for the single level change
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.AbstractGameKeep.TotalChangeLevelTimeRemaining">
            <summary>
            Time remaining for total level change
            </summary>
        </member>
        <member name="T:DOL.GS.Keeps.AbstractGameKeep.eKeepType">
            <summary>
            The Keep Type
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.eKeepType.Generic">
            <summary>
            default type when not claimed, it is like melee
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.eKeepType.Melee">
            <summary>
             some guard inside the keep are Armsman (when claimed)
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.eKeepType.Magic">
            <summary>
             some guard inside the keep are wizard (when claimed)
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.AbstractGameKeep.eKeepType.Stealth">
            <summary>
             some guard inside the keep are scout (when claimed)
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeep.UpgradeTime">
            <summary>
            time to upgrade from one level to another
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeep.CalculateTimeToUpgrade">
            <summary>
            The time to upgrade a keep
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeep.CheckForClaim(DOL.GS.GamePlayer)">
            <summary>
            The checks we need to run before allowing claim
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeep.CalculRP">
            <summary>
            The RP reward for claiming based on difficulty level
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeep.AddTower(DOL.GS.Keeps.GameKeepTower)">
            <summary>
            Add a tower to the keep
            </summary>
            <param name="tower"></param>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeep.Towers">
            <summary>
            The Keep Towers
            </summary>
        </member>
        <member name="T:DOL.GS.Movement.MovementMgr">
            <summary>
            TODO: instead movement manager we need AI when npc should travel on path and attack 
            enemies if they are near and after that return to pathing for example.
            this current implementation is incomplete but usable for horses
            </summary>
        </member>
        <member name="F:DOL.GS.Movement.MovementMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Movement.MovementMgr.m_instance">
            <summary>
            Holds the MovementMgr instance
            </summary>
        </member>
        <member name="M:DOL.GS.Movement.MovementMgr.#ctor">
            <summary>
            Constructs a new MovementMgr instance
            </summary>
        </member>
        <member name="M:DOL.GS.Movement.MovementMgr.LoadPath(System.String)">
            <summary>
            loads a path from database
            </summary>
            <param name="pathID">path to load</param>
            <returns>first pathpoint of path or null if not found</returns>
        </member>
        <member name="M:DOL.GS.Movement.MovementMgr.SavePath(System.String,DOL.GS.Movement.PathPoint)">
            <summary>
            Saves the path into the database
            </summary>
            <param name="pathID">The path ID</param>
            <param name="path">The path waypoint</param>
        </member>
        <member name="M:DOL.GS.Movement.MovementMgr.FindFirstPathPoint(DOL.GS.Movement.PathPoint)">
            <summary>
            Searches for the first point in the waypoints chain
            </summary>
            <param name="path">One of the pathpoints</param>
            <returns>The first pathpoint in the chain or null</returns>
        </member>
        <member name="M:DOL.GS.Movement.MovementMgr.MoveOnPath(DOL.GS.GameNPC,System.Int32)">
            <summary>
            let the npc travel on its path
            </summary>
            <param name="npc"></param>
            <param name="speed"></param>
        </member>
        <member name="F:DOL.GS.Movement.MovementMgr.m_closeToWaypointEvent">
            <summary>
            The OnCloseToWaypoint delegate
            </summary>
        </member>
        <member name="M:DOL.GS.Movement.MovementMgr.OnCloseToWaypoint(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            decides what to do on reached waypoint in path
            </summary>
            <param name="e"></param>
            <param name="n"></param>
            <param name="args"></param>
        </member>
        <member name="P:DOL.GS.Movement.MovementMgr.Instance">
            <summary>
            The MovementMgr instance
            </summary>
        </member>
        <member name="T:DOL.GS.Movement.MovementMgr.WaypointDelayAction">
            <summary>
            Delays movement to the next waypoint
            </summary>
        </member>
        <member name="M:DOL.GS.Movement.MovementMgr.WaypointDelayAction.#ctor(DOL.GS.GameObject)">
            <summary>
            Constructs a new WaypointDelayAction
            </summary>
            <param name="actionSource"></param>
        </member>
        <member name="M:DOL.GS.Movement.MovementMgr.WaypointDelayAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.LootGeneratorRandom">
            <summary>
            LootGeneratorRandom
            This implementation uses ItemTemplates to fetch a random item in the range of LEVEL_RANGE to moblevel   
            </summary>
        </member>
        <member name="T:DOL.GS.LootGeneratorBase">
            <summary>
            BaseLootGenerator
            At the moment this generator drops nothing, and just provides the basic functionality
            </summary>
        </member>
        <member name="T:DOL.GS.ILootGenerator">
            <summary>
            Interface for loot generators
            </summary>
            
        </member>
        <member name="M:DOL.GS.ILootGenerator.GenerateLoot(DOL.GS.GameNPC,DOL.GS.GameObject)">
            <summary>
            Generates a list of ItemTemplates that this mob should drop
            </summary>		
            <param name="mob">Mob that drops loot</param>
            <param name="killer"></param>
            <returns>List of ItemTemplates</returns>
        </member>
        <member name="P:DOL.GS.ILootGenerator.ExclusivePriority">
            <summary>
            Returns the priority of this lootgenerator,
            if priority == 0 can be used together with other generators on the same mob.
            If a generator in the list of possibe generators has priority>0 only the generator with the biggest priority will be used.
            This can be useful if you want to define a general generator for almost all mobs and define a
            special one with priority>0 for a special mob that should use the default generator.
            </summary>
        </member>
        <member name="M:DOL.GS.LootGeneratorBase.GenerateLoot(DOL.GS.GameNPC,DOL.GS.GameObject)">
            <summary>
            Generate loot for given mob
            </summary>
            <param name="mob"></param>
            <param name="killer"></param>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.LootGeneratorRandom.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.LootGeneratorRandom.m_itemTemplates">
            <summary>
            Map holding the corresponding lootTemplateName for each Moblevel group
            groups are rounded down to 1-5, 5-10, 10-15, 15-20, 20-25, etc...
            1:n Mapping between Moblevel and LootTemplate
            </summary>
        </member>
        <member name="M:DOL.GS.LootGeneratorRandom.#ctor">
            <summary>
            Constrcut a new templategenerate and load it's values from database.
            </summary>
        </member>
        <member name="M:DOL.GS.LootGeneratorRandom.PreloadItemTemplates">
            <summary>
            Loads the loottemplates
            </summary>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.Collections.Hashtable.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Collections.Hashtable.bucketListIndexes">
            <summary>
            Used for start and end indexes of sublists
            bucketListIndexes[0] = start of list 0
            bucketListIndexes[1] = end of list 0 = start of list 1
            ...
            In general: end of list i = start of list i+1
            This explains why we need an extra cell to store the end index of last list in the array
            </summary>
        </member>
        <member name="M:DOL.GS.Collections.Hashtable.GetForwardFreeSlot(System.Int32)">
            <summary>
            Tries to add one free slot to startBucket bucket by getting one from upward buckets
            NOTE : the start bucket is supposed to not contain any free slot and will not be used
            </summary>
            <param name="startBucket">the start bucket index</param>
            <returns>the index of the bucket from which a free slot has been taken or -1 if none upward</returns>
        </member>
        <member name="M:DOL.GS.Collections.Hashtable.GetBackwardFreeSlot(System.Int32)">
            <summary>
            Frees up one slot in upward buckets
            NOTE : the start bucket is supposed to not contain any free slot and will not be used
            </summary>
            <param name="startBucket"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Collections.Hashtable.ForceAdd(DOL.GS.Collections.DictionaryEntry)">
            <summary>
            IMPORTANT : 
            1) may ONLY called after a rehash has occured
            2) internalArray MUST have enough space to store gameObject (ensured by rehash())
            3) gameObject may NOT be in internalArray already
            
            If for some reasons, the 3 statements above were not fulfilled, the structure may be corrupt !!!!!
            </summary>
            <param name="entry"></param>
        </member>
        <member name="T:DOL.GS.GroupMgr">
            <summary>
            The GroupMgr holds pointers to all groups and to players
            looking for a group
            </summary>
        </member>
        <member name="F:DOL.GS.GroupMgr.m_groups">
            <summary>
            ArrayList of all groups in the game
            </summary>
        </member>
        <member name="F:DOL.GS.GroupMgr.m_lfgPlayers">
            <summary>
            ArrayList of all players looking for a group
            </summary>
        </member>
        <member name="M:DOL.GS.GroupMgr.AddGroup(System.Object,DOL.GS.Group)">
            <summary>
            Adds a group to the list of groups
            </summary>
            <param name="key"></param>
            <param name="group">The group to add</param>
            <returns>True if the function succeeded, otherwise false</returns>
        </member>
        <member name="M:DOL.GS.GroupMgr.RemoveGroup(System.Object)">
            <summary>
            Removes a group from the manager
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GroupMgr.SetPlayerLooking(DOL.GS.GamePlayer)">
            <summary>
            Adds a player to the looking for group list
            </summary>
            <param name="member">player to add to the list</param>
        </member>
        <member name="M:DOL.GS.GroupMgr.RemovePlayerLooking(DOL.GS.GamePlayer)">
            <summary>
            Removes a player from the looking for group list
            </summary>
            <param name="member">player to remove from the list</param>
        </member>
        <member name="M:DOL.GS.GroupMgr.ListGroupByStatus(System.Byte)">
            <summary>
            Returns a list of groups by their status
            </summary>
            <param name="status">statusbyte</param>
            <returns>ArrayList of groups</returns>
        </member>
        <member name="M:DOL.GS.GroupMgr.LookingForGroupPlayers">
            <summary>
            Returns an Arraylist of all players looking for a group
            </summary>
            <returns>ArrayList of all players looking for a group</returns>
        </member>
        <member name="T:DOL.GS.ServerProperties.Properties">
            <summary>
            The abstract ServerProperty class that also defines the
            static Init and Load methods for other properties that inherit
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.ServerProperties.Properties.#cctor">
            <summary>
            Init the property
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.XP_RATE">
            <summary>
            The Experience Rate
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.RP_RATE">
            <summary>
            The Realm Points Rate
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.MOTD">
            <summary>
            The Server Message of the Day
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.PVE_DAMAGE">
            <summary>
            The damage players do against monsters
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.PVP_DAMAGE">
            <summary>
            The damage players do against players
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.STARTING_MSG">
            <summary>
            The message players get when they enter the game past level 1
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.STARTING_MONEY">
            <summary>
            The amount of copper a player starts with
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.STARTING_LEVEL">
            <summary>
            The level of experience a player should start with
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.STARTING_REALM_LEVEL">
            <summary>
            The message players get when they enter the game at level 1
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.STARTING_GUILD">
            <summary>
            The a starting guild should be used
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.CRAFTING_SPEED">
            <summary>
            The crafting speed modifier
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.MONEY_DROP">
            <summary>
            The money drop modifier
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.BROADCAST_TYPE">
            <summary>
            The broadcast type
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.ALLIANCE_MAX">
            <summary>
            The max number of guilds in an alliance
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.CLAIM_NUM">
            <summary>
            The number of players needed for claiming
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.GUILD_NUM">
            <summary>
            The number of players needed to form a guild
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.STAFF_LOGIN">
            <summary>
            If the server should only accept connections from staff
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.MAX_PLAYERS">
            <summary>
            The max number of players on the server
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.RP_WORTH_SECONDS">
            <summary>
            The time until a player is worth rps again after death
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.CLIENT_VERSION_MIN">
            <summary>
            The minimum client version required to connect
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.CLIENT_VERSION_MAX">
            <summary>
            The maximum client version required to connect
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.LOAD_QUESTS">
            <summary>
            Should the server load quests
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.LOG_TRADES">
            <summary>
            Should the server log trades
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.PLAYER_CLASS">
            <summary>
            What class should the server use for players
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.CLIENT_TYPE_MAX">
            <summary>
            What is the maximum client type allowed to connect
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.DISABLE_MINOTAURS">
            <summary>
            Disable minotaurs from being created
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.LOAD_EXAMPLES">
            <summary>
            Should the server load the example scripts
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.DISABLED_REGIONS">
            <summary>
            A serialised list of disabled RegionIDs
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.DISABLED_EXPANSIONS">
            <summary>
            A serialised list of disabled expansion IDs
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.DISABLE_TUTORIAL">
            <summary>
            Should the server disable the tutorial zone
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.ALLOW_ALL_REALMS">
            <summary>
            Should users be able to create characters in all realms using the same account
            </summary>
        </member>
        <member name="F:DOL.GS.ServerProperties.Properties.DISABLE_CATACOMBS_CLASSES">
            <summary>
            Should users be allowed to create catacombs classes
            </summary>
        </member>
        <member name="M:DOL.GS.ServerProperties.Properties.Load(DOL.GS.ServerProperties.ServerPropertyAttribute)">
            <summary>
            This method loads the property from the database and returns
            the value of the property as strongly typed object based on the
            type of the default value
            </summary>
            <param name="attrib">The attribute</param>
            <returns>The real property value</returns>
        </member>
        <member name="M:DOL.GS.ServerProperties.Properties.Init(System.Type)">
            <summary>
            This method is the key. It checks all fields of a specific type and
            if the field is a ServerProperty it loads the value from the database.
            </summary>
            <param name="type">The type to analyze</param>
        </member>
        <member name="T:DOL.GS.RealmAbilities.FirstAidAbility">
            <summary>
            First Aid, healing
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.FirstAidAbility.Execute(DOL.GS.GameLiving)">
            <summary>
            Action
            </summary>
            <param name="living"></param>
        </member>
        <member name="T:DOL.GS.RealmAbilities.VehementRenewalAbility">
            <summary>
            Vehement Renewal, healing all but caster in 2000 range
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.VehementRenewalAbility.Execute(DOL.GS.GameLiving)">
            <summary>
            Action
            </summary>
            <param name="living"></param>
        </member>
        <member name="T:DOL.GS.Effects.JuggernautEffect">
            <summary>
            Effect handler for Barrier Of Fortitude
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.JuggernautEffect.#ctor">
            <summary>
            Default constructor for AmelioratingMelodiesEffect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.JuggernautEffect.Start(DOL.GS.GamePlayer,System.Int32,System.Byte)">
            <summary>
            Called when effect is to be started
            </summary>
            <param name="player">The player to start the effect for</param>
            <param name="duration">The effectduration in secounds</param>
            <param name="value">The increment of effective level</param>
        </member>
        <member name="M:DOL.GS.Effects.JuggernautEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect is to be cancelled
            </summary>
            <param name="playerCancel">Whether or not effect is player cancelled</param>
        </member>
        <member name="M:DOL.GS.Effects.JuggernautEffect.StartTimers">
            <summary>
            Starts the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.JuggernautEffect.StopTimers">
            <summary>
            Stops the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.JuggernautEffect.ExpireCallback(DOL.GS.RegionTimer)">
            <summary>
            The callback for when the effect expires
            </summary>
            <param name="timer">The ObjectTimerCallback object</param>
        </member>
        <member name="P:DOL.GS.Effects.JuggernautEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.JuggernautEffect.RemainingTime">
            <summary>
            Remaining time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.JuggernautEffect.Icon">
            <summary>
            Icon ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.JuggernautEffect.InternalID">
            <summary>
            Unique ID for identification in the effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.JuggernautEffect.DelveInfo">
            <summary>
            Delve information
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.CriticalArcheryHitChanceCalculator">
            <summary>
            The critical hit chance calculator. Returns 0 .. 100 chance.
            
            BuffBonusCategory1 unused
            BuffBonusCategory2 unused
            BuffBonusCategory3 unused
            BuffBonusCategory4 for uncapped realm ability bonus
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib178.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib178.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.78 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib179.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib179.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.79 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib180.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib180.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.80 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib181.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib181.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.81 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib182.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib182.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.82 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib183.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib183.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.83 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib184.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib184.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.83 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib185.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib185.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.85 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLib186.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLib186.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketLib for Version 1.86 clients
            </summary>
            <param name="client">the gameclient this lib is associated with</param>
        </member>
        <member name="P:DOL.GS.PacketHandler.PacketLib186.BowPrepare">
            <summary>
            The bow prepare animation
            </summary>
        </member>
        <member name="P:DOL.GS.PacketHandler.PacketLib186.BowShoot">
            <summary>
            The bow shoot animation
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.LoginRequestHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.CmdAttribute">
            <summary>
            Marks a class as a command handler
            </summary>
        </member>
        <member name="M:DOL.GS.CmdAttribute.#ctor(System.String,System.String[],System.UInt32,System.String,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="cmd">Command to handle</param>
            <param name="alias">Other names the command goes by</param>
            <param name="lvl">Minimum required plvl for this command</param>
            <param name="desc">Description of the command</param>
            <param name="usage">How to use the command</param>
        </member>
        <member name="M:DOL.GS.CmdAttribute.#ctor(System.String,System.UInt32,System.String,System.String[])">
            <summary>
            Constructor
            </summary>
            <param name="cmd">Command to handle</param>
            <param name="lvl">Minimum required plvl for this command</param>
            <param name="desc">Description of the command</param>
            <param name="usage">How to use the command</param>
        </member>
        <member name="P:DOL.GS.CmdAttribute.Cmd">
            <summary>
            Gets the command being handled
            </summary>
        </member>
        <member name="P:DOL.GS.CmdAttribute.Aliases">
            <summary>
            Gets aliases for the command being handled
            </summary>
        </member>
        <member name="P:DOL.GS.CmdAttribute.Level">
            <summary>
            Gets minimum required plvl for the command to be used
            </summary>
        </member>
        <member name="P:DOL.GS.CmdAttribute.Description">
            <summary>
            Gets the description of the command
            </summary>
        </member>
        <member name="P:DOL.GS.CmdAttribute.Usage">
            <summary>
            Gets the command usage
            </summary>
        </member>
        <member name="T:DOL.GS.GameGravestone">
            <summary>
            This class holds all information that
            EVERY object in the game world needs!
            </summary>
        </member>
        <member name="F:DOL.GS.GameGravestone.m_xpValue">
            <summary>
            how much xp are stored in this gravestone
            </summary>
        </member>
        <member name="M:DOL.GS.GameGravestone.#ctor(DOL.GS.GamePlayer,System.Int64)">
            <summary>
            Constructs a new empty Gravestone
            </summary>
        </member>
        <member name="P:DOL.GS.GameGravestone.XPValue">
            <summary>
            returns the xpvalue of this gravestone
            </summary>
        </member>
        <member name="F:DOL.GS.GameHorseBoat.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.Events.WhisperReceiveEventArgs">
            <summary>
            Holds the arguments for the WhisperReceive event of GameLivings
            </summary>
        </member>
        <member name="T:DOL.Events.SayReceiveEventArgs">
            <summary>
            Holds the arguments for the SayReceive event of GameLivings
            </summary>
        </member>
        <member name="M:DOL.Events.SayReceiveEventArgs.#ctor(DOL.GS.GameLiving,DOL.GS.GameLiving,System.String)">
            <summary>
            Constructs a new SayReceiveEventArgs
            </summary>
            <param name="source">the source that is saying something</param>
            <param name="target">the target that listened to the say</param>
            <param name="text">the text being said</param>
        </member>
        <member name="P:DOL.Events.SayReceiveEventArgs.Target">
            <summary>
            Gets the GameLiving target who listened to the say
            </summary>
        </member>
        <member name="P:DOL.Events.SayReceiveEventArgs.Text">
            <summary>
            Gets the text being said
            </summary>
        </member>
        <member name="M:DOL.Events.WhisperReceiveEventArgs.#ctor(DOL.GS.GameLiving,DOL.GS.GameLiving,System.String)">
            <summary>
            Constructs a new WhsiperReceiveEventArgs
            </summary>
            <param name="source">the source of the whisper</param>
            <param name="target">the target of the whisper</param>
            <param name="text">the text being whispered</param>
        </member>
        <member name="T:DOL.Events.WalkToEventArgs">
            <summary>
            Holds the arguments for the WalkTo event of GameNPC
            </summary>
        </member>
        <member name="M:DOL.Events.WalkToEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new WalkToEventArgs
            </summary>
            <param name="x">the target x</param>
            <param name="y">the target y</param>
            <param name="z">the target z</param>
            <param name="speed">the walk speed</param>
        </member>
        <member name="P:DOL.Events.WalkToEventArgs.X">
            <summary>
            Gets the target x
            </summary>
        </member>
        <member name="P:DOL.Events.WalkToEventArgs.Y">
            <summary>
            Gets the target y
            </summary>
        </member>
        <member name="P:DOL.Events.WalkToEventArgs.Z">
            <summary>
            Gets the target z
            </summary>
        </member>
        <member name="P:DOL.Events.WalkToEventArgs.Speed">
            <summary>
            Gets the walk speed
            </summary>
        </member>
        <member name="T:DOL.Events.PlayerDisbandedEventArgs">
            <summary>
            Holds the arguments for the PlayerDisbanded event of PlayerGroup.
            </summary>
        </member>
        <member name="M:DOL.Events.PlayerDisbandedEventArgs.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs new PlayerDisbandedEventArgs
            </summary>
            <param name="player">The disbanded player</param>
        </member>
        <member name="P:DOL.Events.PlayerDisbandedEventArgs.Player">
            <summary>
            The disbanded player
            </summary>
        </member>
        <member name="T:DOL.Events.MoveToEventArgs">
            <summary>
            Holds the arguments for the MoveTo event of GameObjects
            </summary>
        </member>
        <member name="M:DOL.Events.MoveToEventArgs.#ctor(System.UInt16,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Constructs new MoveToEventArgs
            </summary>
            <param name="regionId">the target regionid</param>
            <param name="x">the target x</param>
            <param name="y">the target y</param>
            <param name="z">the target z</param>
            <param name="heading">the target heading</param>
        </member>
        <member name="P:DOL.Events.MoveToEventArgs.RegionId">
            <summary>
            Gets the target RegionID
            </summary>
        </member>
        <member name="P:DOL.Events.MoveToEventArgs.X">
            <summary>
            Gets the target x
            </summary>
        </member>
        <member name="P:DOL.Events.MoveToEventArgs.Y">
            <summary>
            Gets the target y
            </summary>
        </member>
        <member name="P:DOL.Events.MoveToEventArgs.Z">
            <summary>
            Gets the target z
            </summary>
        </member>
        <member name="P:DOL.Events.MoveToEventArgs.Heading">
            <summary>
            Gets the target heading
            </summary>
        </member>
        <member name="T:DOL.Events.EnemyHealedEventArgs">
            <summary>
            Holds the arguments for the EnemyHealed event of GameLivings
            </summary>
        </member>
        <member name="M:DOL.Events.EnemyHealedEventArgs.#ctor(DOL.GS.GameLiving,DOL.GS.GameObject,DOL.GS.GameLiving.eHealthChangeType,System.Int32)">
            <summary>
            Constructs new EnemyHealedEventArgs
            </summary>
            <param name="enemy">The healed enemy</param>
            <param name="healSource">The heal source</param>
            <param name="changeType">The health change type</param>
            <param name="healAmount">The heal amount</param>
        </member>
        <member name="P:DOL.Events.EnemyHealedEventArgs.Enemy">
            <summary>
            Gets the healed enemy
            </summary>
        </member>
        <member name="P:DOL.Events.EnemyHealedEventArgs.HealSource">
            <summary>
            Gets the heal source
            </summary>
        </member>
        <member name="P:DOL.Events.EnemyHealedEventArgs.ChangeType">
            <summary>
            Gets the health change type
            </summary>
        </member>
        <member name="P:DOL.Events.EnemyHealedEventArgs.HealAmount">
            <summary>
            Gets the heal amount
            </summary>
        </member>
        <member name="T:DOL.Events.DOLEventHandler">
            <summary>
            The callback method for DOLEvents
            </summary>
            <remarks>Override the EventArgs class to give custom parameters</remarks>
        </member>
        <member name="T:DOL.Events.DOLEventHandlerCollection">
            <summary>
            This class represents a collection of event handlers. You can add and remove
            handlers from this list and fire events with parameters which will be routed
            through all handlers.
            </summary>
            <remarks>This class is lazy initialized, meaning as long as you don't add any
            handlers, the memory usage will be very low!</remarks>
        </member>
        <member name="F:DOL.Events.DOLEventHandlerCollection.TIMEOUT">
            <summary>
            How long to wait for a lock before failing!
            </summary>
        </member>
        <member name="F:DOL.Events.DOLEventHandlerCollection.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.Events.DOLEventHandlerCollection.m_lock">
            <summary>
            A reader writer lock used to lock event list
            </summary>
        </member>
        <member name="F:DOL.Events.DOLEventHandlerCollection.m_events">
             <summary>
            We use a HybridDictionary here to hold all event delegates
             </summary>
        </member>
        <member name="M:DOL.Events.DOLEventHandlerCollection.#ctor">
            <summary>
            Constructs a new DOLEventHandler collection
            </summary>
        </member>
        <member name="M:DOL.Events.DOLEventHandlerCollection.AddHandler(DOL.Events.DOLEvent,DOL.Events.DOLEventHandler)">
            <summary>
            Adds an event handler to the list
            </summary>
            <param name="e">The event from which we add a handler</param>
            <param name="del">The callback method</param>
        </member>
        <member name="M:DOL.Events.DOLEventHandlerCollection.AddHandlerUnique(DOL.Events.DOLEvent,DOL.Events.DOLEventHandler)">
            <summary>
            Adds an event handler to the list, if it's already added do nothing
            </summary>
            <param name="e">The event from which we add a handler</param>
            <param name="del">The callback method</param>
        </member>
        <member name="M:DOL.Events.DOLEventHandlerCollection.RemoveHandler(DOL.Events.DOLEvent,DOL.Events.DOLEventHandler)">
            <summary>
            Removes an event handler from the list
            </summary>
            <param name="e">The event from which to remove the handler</param>
            <param name="del">The callback method to remove</param>
        </member>
        <member name="M:DOL.Events.DOLEventHandlerCollection.RemoveAllHandlers(DOL.Events.DOLEvent)">
            <summary>
            Removes all callback handlers for a given event
            </summary>
            <param name="e">The event from which to remove all handlers</param>
        </member>
        <member name="M:DOL.Events.DOLEventHandlerCollection.RemoveAllHandlers">
            <summary>
            Removes all event handlers
            </summary>
        </member>
        <member name="M:DOL.Events.DOLEventHandlerCollection.Notify(DOL.Events.DOLEvent)">
            <summary>
            Notifies all registered event handlers of the occurance of an event!
            </summary>
            <param name="e">The event that occured</param>
        </member>
        <member name="M:DOL.Events.DOLEventHandlerCollection.Notify(DOL.Events.DOLEvent,System.Object)">
            <summary>
            Notifies all registered event handlers of the occurance of an event!
            </summary>
            <param name="e">The event that occured</param>
            <param name="sender">The sender of this event</param>
        </member>
        <member name="M:DOL.Events.DOLEventHandlerCollection.Notify(DOL.Events.DOLEvent,System.EventArgs)">
            <summary>
            Notifies all registered event handlers of the occurance of an event!
            </summary>
            <param name="e">The event that occured</param>
            <param name="args">The event arguments</param>
        </member>
        <member name="M:DOL.Events.DOLEventHandlerCollection.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Notifies all registered event handlers of the occurance of an event!
            </summary>
            <param name="e">The event that occured</param>
            <param name="sender">The sender of this event</param>
            <param name="eArgs">The event arguments</param>
            <remarks>Overwrite the EventArgs class to set own arguments</remarks>
        </member>
        <member name="T:DOL.GS.RegionData">
            <summary>
            Helper class for region registration
            </summary>
        </member>
        <member name="F:DOL.GS.RegionData.Id">
            <summary>
            The region id
            </summary>
        </member>
        <member name="F:DOL.GS.RegionData.Name">
            <summary>
            The region name
            </summary>
        </member>
        <member name="F:DOL.GS.RegionData.Description">
            <summary>
            The region description
            </summary>
        </member>
        <member name="F:DOL.GS.RegionData.Ip">
            <summary>
            The region IP
            </summary>
        </member>
        <member name="F:DOL.GS.RegionData.Port">
            <summary>
            The region port
            </summary>
        </member>
        <member name="F:DOL.GS.RegionData.WaterLevel">
            <summary>
            The region water level
            </summary>
        </member>
        <member name="F:DOL.GS.RegionData.DivingEnabled">
            <summary>
            The region diving flag
            </summary>
        </member>
        <member name="F:DOL.GS.RegionData.HousingEnabled">
            <summary>
            The region housing flag
            </summary>
        </member>
        <member name="F:DOL.GS.RegionData.Expansion">
            <summary>
            The region expansion
            </summary>
        </member>
        <member name="F:DOL.GS.RegionData.Mobs">
            <summary>
            The region mobs
            </summary>
        </member>
        <member name="M:DOL.GS.RegionData.CompareTo(System.Object)">
            <summary>
            Compares 2 objects
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.AreaMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.Trainer.RunemasterTrainer">
            <summary>
            Runemaster Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.RunemasterTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.RunemasterTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.RunemasterTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.EnchanterTrainer">
            <summary>
            Enchanter Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.EnchanterTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.EnchanterTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.EnchanterTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.TheurgistTrainer">
            <summary>
            Theurgist Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.TheurgistTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.TheurgistTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.TheurgistTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Spells.UnbreakableSpeedDecreaseSpellHandler">
            <summary>
            Spell handler for unbreakable speed decreasing spells
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.UnbreakableSpeedDecreaseSpellHandler.OnEffectStart(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            When an applied effect starts,
            duration spells only
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.UnbreakableSpeedDecreaseSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.UnbreakableSpeedDecreaseSpellHandler.CalculateEffectDuration(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates the effect duration in milliseconds
            </summary>
            <param name="target">The effect target</param>
            <param name="effectiveness">The effect effectiveness</param>
            <returns>The effect duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.UnbreakableSpeedDecreaseSpellHandler.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            Sends updates on effect start/stop
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:DOL.GS.Spells.UnbreakableSpeedDecreaseSpellHandler.#ctor(DOL.GS.GameLiving,DOL.GS.Spell,DOL.GS.SpellLine)">
            <summary>
            Constructs a new UnbreakableSpeedDecreaseSpellHandler
            </summary>
            <param name="caster"></param>
            <param name="spell"></param>
            <param name="line"></param>
        </member>
        <member name="T:DOL.GS.Spells.UnbreakableSpeedDecreaseSpellHandler.RestoreSpeedTimer">
            <summary>
            Slowly restores the livings speed
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.UnbreakableSpeedDecreaseSpellHandler.RestoreSpeedTimer.m_effect">
            <summary>
            The speed changing effect
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.UnbreakableSpeedDecreaseSpellHandler.RestoreSpeedTimer.#ctor(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Constructs a new RestoreSpeedTimer
            </summary>
            <param name="effect">The speed changing effect</param>
        </member>
        <member name="M:DOL.GS.Spells.UnbreakableSpeedDecreaseSpellHandler.RestoreSpeedTimer.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.UnbreakableSpeedDecreaseSpellHandler.RestoreSpeedTimer.ToString">
            <summary>
            Returns short information about the timer
            </summary>
            <returns>Short info about the timer</returns>
        </member>
        <member name="T:DOL.GS.Spells.SavageCrushResistHandler">
            <summary>
            Summary description for SavageHasteHandler.
            </summary>
        </member>
        <member name="T:DOL.GS.ServerRules.PvPServerRules">
            <summary>
            Set of rules for "PvP" server type.
            </summary>
        </member>
        <member name="T:DOL.GS.ServerRules.IServerRules">
            <summary>
            Interface for custom server rules
            </summary>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.IsAllowedToConnect(DOL.GS.GameClient,System.String)">
            <summary>
            Allows or denies a client from connecting to the server ...
            NOTE: The client has not been fully initialized when this method is called.
            For example, no account or character data has been loaded yet.
            </summary>
            <param name="client">The client that sent the login request</param>
            <param name="username">The username of the client wanting to connect</param>
            <returns>true if connection allowed, false if connection should be terminated</returns>
            <remarks>You can only send ONE packet to the client and this is the
            LoginDenied packet before returning false. Trying to send any other packet
            might result in unexpected behaviour on server and client!</remarks>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.IsAllowedToAttack(DOL.GS.GameLiving,DOL.GS.GameLiving,System.Boolean)">
            <summary>
            Is attacker allowed to attack defender.
            </summary>
            <param name="attacker">living that makes attack</param>
            <param name="defender">attacker's target</param>
            <param name="quiet">should messages be sent</param>
            <returns>true if attack is allowed</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.IsAllowedToCastSpell(DOL.GS.GameLiving,DOL.GS.GameLiving,DOL.GS.Spell,DOL.GS.SpellLine)">
            <summary>
            Is caster allowed to cast a spell
            </summary>
            <param name="caster"></param>
            <param name="target"></param>
            <param name="spell"></param>
            <param name="spellLine"></param>
            <returns>true if allowed</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.IsSameRealm(DOL.GS.GameLiving,DOL.GS.GameLiving,System.Boolean)">
            <summary>
            Does source considers target "friendly".
            Used for spells with "Realm" and "Group" spell types, friend list.
            </summary>
            <param name="source">spell source, considering object</param>
            <param name="target">spell target, considered object</param>
            <param name="quiet"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.IsAllowedCharsInAllRealms(DOL.GS.GameClient)">
            <summary>
            Does the server type allows to play/create characters in all realms on one account
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.IsAllowedToGroup(DOL.GS.GamePlayer,DOL.GS.GamePlayer,System.Boolean)">
            <summary>
            Is source allowed to group target.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="quiet"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.IsAllowedToTrade(DOL.GS.GameLiving,DOL.GS.GameLiving,System.Boolean)">
            <summary>
            Is source allowed to trade with target.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <param name="quiet"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.IsAllowedToUnderstand(DOL.GS.GameLiving,DOL.GS.GamePlayer)">
            <summary>
            Is target allowed to understand source.
            </summary>
            <param name="source"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.IsAllowedToSpeak(DOL.GS.GamePlayer,System.String)">
            <summary>
            Is source allowed to speak.
            </summary>
            <param name="source"></param>
            <param name="communicationType">type of communication used by the source: talk/yell/whisper</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.IsAllowedToBind(DOL.GS.GamePlayer,DOL.Database.BindPoint)">
            <summary>
            Is player allowed to bind
            </summary>
            <param name="player"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.IsAllowedToCraft(DOL.GS.GamePlayer,DOL.Database.ItemTemplate)">
            <summary>
            Is player allowed to make the item
            </summary>
            <param name="player"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.RulesDescription">
            <summary>
            Short description of server rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.CanTakeFallDamage(DOL.GS.GamePlayer)">
            <summary>
            Check if living can take fall damage
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.GetExperienceForLevel(System.Int32)">
            <summary>
            Experience needed for specific level
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.GetExperienceForLiving(System.Int32)">
            <summary>
            Experience living is worth
            </summary>
            <param name="level">the level of living</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.CheckAbilityToUseItem(DOL.GS.GameLiving,DOL.Database.ItemTemplate)">
            <summary>
            Checks if living has ability to use items of this type
            </summary>
            <param name="living"></param>
            <param name="item"></param>
            <returns>true if player has ability to use item</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.IsObjectTypesEqual(DOL.GS.eObjectType,DOL.GS.eObjectType)">
            <summary>
            Checks whether one object type is equal to another
            based on server type
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns>true if equals</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.GetObjectSpecLevel(DOL.GS.GamePlayer,DOL.GS.eObjectType)">
            <summary>
            Get object specialization level based on server type
            </summary>
            <param name="player">player whom specializations are checked</param>
            <param name="objectType">object type</param>
            <returns>specialization in object or 0</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.GetBaseObjectSpecLevel(DOL.GS.GamePlayer,DOL.GS.eObjectType)">
            <summary>
            Get object specialization level based on server type
            </summary>
            <param name="player">player whom specializations are checked</param>
            <param name="objectType">object type</param>
            <returns>specialization in object or 0</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.OnNPCKilled(DOL.GS.GameNPC,DOL.GS.GameObject)">
            <summary>
            Invoked on NPC death and deals out
            experience/realm points if needed
            </summary>
            <param name="killedNPC">npc that died</param>
            <param name="killer">killer</param>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.OnPlayerKilled(DOL.GS.GamePlayer,DOL.GS.GameObject)">
            <summary>
            Invoked on Player death and deals out
            experience/realm points if needed
            </summary>
            <param name="killedPlayer">player that died</param>
            <param name="killer">killer</param>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.OnLivingKilled(DOL.GS.GameLiving,DOL.GS.GameObject)">
            <summary>
            Invoked on a livings death and deals out
            experience / rps if needed
            </summary>
            <param name="living">the living that died</param>
            <param name="killer"></param>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.GetLivingRealm(DOL.GS.GamePlayer,DOL.GS.GameLiving)">
            <summary>
            Gets the Realm of an living for name text coloring
            </summary>
            <param name="player"></param>
            <param name="target"></param>
            <returns>byte code of realm</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.GetPlayerName(DOL.GS.GamePlayer,DOL.GS.GamePlayer)">
            <summary>
            Gets the player name based on server type
            </summary>
            <param name="source">The "looking" player</param>
            <param name="target">The considered player</param>
            <returns>The name of the target</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.GetPlayerLastName(DOL.GS.GamePlayer,DOL.GS.GamePlayer)">
            <summary>
            Gets the player last name based on server type
            </summary>
            <param name="source">The "looking" player</param>
            <param name="target">The considered player</param>
            <returns>The last name of the target</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.GetPlayerGuildName(DOL.GS.GamePlayer,DOL.GS.GamePlayer)">
            <summary>
            Gets the player guild name based on server type
            </summary>
            <param name="source">The "looking" player</param>
            <param name="target">The considered player</param>
            <returns>The guild name of the target</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.GetColorHandling(DOL.GS.GameClient)">
            <summary>
            Gets the server type color handling scheme
            
            ColorHandling: this byte tells the client how to handle color for PC and NPC names (over the head) 
            0: standard way, other realm PC appear red, our realm NPC appear light green 
            1: standard PvP way, all PC appear red, all NPC appear with their level color 
            2: Same realm livings are friendly, other realm livings are enemy; nearest friend/enemy buttons work
            3: standard PvE way, all PC friendly, realm 0 NPC enemy rest NPC appear light green 
            4: All NPC are enemy, all players are friendly; nearest friend button selects self, nearest enemy don't work at all
            </summary>
            <param name="client">The client asking for color handling</param>
            <returns>The color handling</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.IServerRules.FormatPlayerStatistics(DOL.GS.GamePlayer)">
            <summary>
            Formats player statistics.
            </summary>
            <param name="player">The player to read statistics from.</param>
            <returns>List of strings.</returns>
        </member>
        <member name="F:DOL.GS.ServerRules.AbstractServerRules.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.IsAllowedToConnect(DOL.GS.GameClient,System.String)">
            <summary>
            Allows or denies a client from connecting to the server ...
            NOTE: The client has not been fully initialized when this method is called.
            For example, no account or character data has been loaded yet.
            </summary>
            <param name="client">The client that sent the login request</param>
            <param name="username">The username of the client wanting to connect</param>
            <returns>true if connection allowed, false if connection should be terminated</returns>
            <remarks>You can only send ONE packet to the client and this is the
            LoginDenied packet before returning false. Trying to send any other packet
            might result in unexpected behaviour on server and client!</remarks>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.IsAllowedToAttack(DOL.GS.GameLiving,DOL.GS.GameLiving,System.Boolean)">
            <summary>
            Is attacker allowed to attack defender.
            </summary>
            <param name="attacker">living that makes attack</param>
            <param name="defender">attacker's target</param>
            <param name="quiet">should messages be sent</param>
            <returns>true if attack is allowed</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.IsAllowedToCastSpell(DOL.GS.GameLiving,DOL.GS.GameLiving,DOL.GS.Spell,DOL.GS.SpellLine)">
            <summary>
            Is caster allowed to cast a spell
            </summary>
            <param name="caster"></param>
            <param name="target"></param>
            <param name="spell"></param>
            <param name="spellLine"></param>
            <returns>true if allowed</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.IsAllowedToBind(DOL.GS.GamePlayer,DOL.Database.BindPoint)">
            <summary>
            Is player allowed to bind
            </summary>
            <param name="player"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.IsAllowedToCraft(DOL.GS.GamePlayer,DOL.Database.ItemTemplate)">
            <summary>
            Is player allowed to make the item
            </summary>
            <param name="player"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.GetObjectSpecLevel(DOL.GS.GamePlayer,DOL.GS.eObjectType)">
            <summary>
            Get object specialization level based on server type
            </summary>
            <param name="player">player whom specializations are checked</param>
            <param name="objectType">object type</param>
            <returns>specialization in object or 0</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.GetBaseObjectSpecLevel(DOL.GS.GamePlayer,DOL.GS.eObjectType)">
            <summary>
            Get object specialization level based on server type
            </summary>
            <param name="player">player whom specializations are checked</param>
            <param name="objectType">object type</param>
            <returns>specialization in object or 0</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.IsObjectTypesEqual(DOL.GS.eObjectType,DOL.GS.eObjectType)">
            <summary>
            Checks whether one object type is equal to another
            based on server type
            </summary>
            <param name="type1"></param>
            <param name="type2"></param>
            <returns>true if equals</returns>
        </member>
        <member name="F:DOL.GS.ServerRules.AbstractServerRules.m_compatibleObjectTypes">
            <summary>
            Holds arrays of compatible object types
            </summary>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.GetCompatibleObjectTypes(DOL.GS.eObjectType)">
            <summary>
            Translates object type to compatible object types based on server type
            </summary>
            <param name="objectType">The object type</param>
            <returns>An array of compatible object types</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.OnNPCKilled(DOL.GS.GameNPC,DOL.GS.GameObject)">
            <summary>
            Invoked on NPC death and deals out
            experience/realm points if needed
            </summary>
            <param name="killedNPC">npc that died</param>
            <param name="killer">killer</param>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.OnLivingKilled(DOL.GS.GameLiving,DOL.GS.GameObject)">
            <summary>
            Called on living death that is not gameplayer or gamenpc
            </summary>
            <param name="killedLiving">The living object</param>
            <param name="killer">The killer object</param>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.OnPlayerKilled(DOL.GS.GamePlayer,DOL.GS.GameObject)">
            <summary>
            Invoked on Player death and deals out
            experience/realm points if needed
            </summary>
            <param name="killedPlayer">player that died</param>
            <param name="killer">killer</param>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.GetLivingRealm(DOL.GS.GamePlayer,DOL.GS.GameLiving)">
            <summary>
            Gets the Realm of an living for name text coloring
            </summary>
            <param name="player"></param>
            <param name="target"></param>
            <returns>byte code of realm</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.GetPlayerName(DOL.GS.GamePlayer,DOL.GS.GamePlayer)">
            <summary>
            Gets the player name based on server type
            </summary>
            <param name="source">The "looking" player</param>
            <param name="target">The considered player</param>
            <returns>The name of the target</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.GetPlayerLastName(DOL.GS.GamePlayer,DOL.GS.GamePlayer)">
            <summary>
            Gets the player last name based on server type
            </summary>
            <param name="source">The "looking" player</param>
            <param name="target">The considered player</param>
            <returns>The last name of the target</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.GetPlayerGuildName(DOL.GS.GamePlayer,DOL.GS.GamePlayer)">
            <summary>
            Gets the player guild name based on server type
            </summary>
            <param name="source">The "looking" player</param>
            <param name="target">The considered player</param>
            <returns>The guild name of the target</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.GetColorHandling(DOL.GS.GameClient)">
             <summary>
             Gets the server type color handling scheme
            
             ColorHandling: this byte tells the client how to handle color for PC and NPC names (over the head)
             0: standard way, other realm PC appear red, our realm NPC appear light green
             1: standard PvP way, all PC appear red, all NPC appear with their level color
             2: Same realm livings are friendly, other realm livings are enemy; nearest friend/enemy buttons work
             3: standard PvE way, all PC friendly, realm 0 NPC enemy rest NPC appear light green
             4: All NPC are enemy, all players are friendly; nearest friend button selects self, nearest enemy don't work at all
             </summary>
             <param name="client">The client asking for color handling</param>
             <returns>The color handling</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.FormatPlayerStatistics(DOL.GS.GamePlayer)">
            <summary>
            Formats player statistics.
            </summary>
            <param name="player">The player to read statistics from.</param>
            <returns>List of strings.</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.MessageToLiving(DOL.GS.GameLiving,System.String)">
            <summary>
            Send system text message to system window
            </summary>
            <param name="living"></param>
            <param name="message"></param>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.MessageToLiving(DOL.GS.GameLiving,System.String,DOL.GS.PacketHandler.eChatType)">
            <summary>
            Send custom text message to system window
            </summary>
            <param name="living"></param>
            <param name="message"></param>
            <param name="type"></param>
        </member>
        <member name="M:DOL.GS.ServerRules.AbstractServerRules.MessageToLiving(DOL.GS.GameLiving,System.String,DOL.GS.PacketHandler.eChatType,DOL.GS.PacketHandler.eChatLoc)">
            <summary>
            Send custom text message to GameLiving
            </summary>
            <param name="living"></param>
            <param name="message"></param>
            <param name="type"></param>
            <param name="loc"></param>
        </member>
        <member name="F:DOL.GS.ServerRules.PvPServerRules.KILLED_BY_PLAYER_PROP">
            <summary>
            TempProperty set if killed by player
            </summary>
        </member>
        <member name="M:DOL.GS.ServerRules.PvPServerRules.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:DOL.GS.ServerRules.PvPServerRules.m_safetyLevel">
            <summary>
            Level at which players safety flag has no effect
            </summary>
        </member>
        <member name="M:DOL.GS.ServerRules.PvPServerRules.OnGameEntered(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Called when player enters the game for first time
            </summary>
            <param name="e">event</param>
            <param name="sender">GamePlayer object that has entered the game</param>
            <param name="args"></param>
        </member>
        <member name="M:DOL.GS.ServerRules.PvPServerRules.OnRegionChanged(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Called when player has changed the region
            </summary>
            <param name="e">event</param>
            <param name="sender">GamePlayer object that has changed the region</param>
            <param name="args"></param>
        </member>
        <member name="M:DOL.GS.ServerRules.PvPServerRules.OnReleased(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Called after player has released
            </summary>
            <param name="e">event</param>
            <param name="sender">GamePlayer that has released</param>
            <param name="args"></param>
        </member>
        <member name="M:DOL.GS.ServerRules.PvPServerRules.SetImmunity(DOL.GS.GamePlayer,System.Int32)">
            <summary>
            Sets PvP immunity for a player and starts the timer if needed
            </summary>
            <param name="player">player that gets immunity</param>
            <param name="duration">amount of milliseconds when immunity ends</param>
        </member>
        <member name="F:DOL.GS.ServerRules.PvPServerRules.m_invExpiredCallback">
            <summary>
            Holds the delegate called when PvP invulnerability is expired
            </summary>
        </member>
        <member name="M:DOL.GS.ServerRules.PvPServerRules.ImmunityOverCallback(DOL.GS.GamePlayer)">
            <summary>
            Removes PvP immunity from the players
            </summary>
            <player></player>
        </member>
        <member name="M:DOL.GS.ServerRules.PvPServerRules.OnPlayerKilled(DOL.GS.GamePlayer,DOL.GS.GameObject)">
            <summary>
            Invoked on Player death and deals out
            experience/realm points if needed
            </summary>
            <param name="killedPlayer">player that died</param>
            <param name="killer">killer</param>
        </member>
        <member name="F:DOL.GS.ServerRules.PvPServerRules.m_safeRegions">
            <summary>
            Regions where players can't be attacked
            </summary>
        </member>
        <member name="F:DOL.GS.ServerRules.PvPServerRules.m_unsafeRegions">
            <summary>
            Regions unsafe for players with safety flag
            </summary>
        </member>
        <member name="M:DOL.GS.ServerRules.PvPServerRules.IsAllowedToCastSpell(DOL.GS.GameLiving,DOL.GS.GameLiving,DOL.GS.Spell,DOL.GS.SpellLine)">
            <summary>
            Is caster allowed to cast a spell
            </summary>
            <param name="caster"></param>
            <param name="target"></param>
            <param name="spell"></param>
            <param name="spellLine"></param>
            <returns>true if allowed</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.PvPServerRules.GetColorHandling(DOL.GS.GameClient)">
            <summary>
            Gets the server type color handling scheme
            
            ColorHandling: this byte tells the client how to handle color for PC and NPC names (over the head) 
            0: standard way, other realm PC appear red, our realm NPC appear light green 
            1: standard PvP way, all PC appear red, all NPC appear with their level color 
            2: Same realm livings are friendly, other realm livings are enemy; nearest friend/enemy buttons work
            3: standard PvE way, all PC friendly, realm 0 NPC enemy rest NPC appear light green 
            4: All NPC are enemy, all players are friendly; nearest friend button selects self, nearest enemy don't work at all
            </summary>
            <param name="client">The client asking for color handling</param>
            <returns>The color handling</returns>
        </member>
        <member name="T:DOL.GS.Quests.CraftTask">
            <summary>
            Declares a Craft task.
            craft Item for NPC
            </summary>
        </member>
        <member name="T:DOL.GS.Quests.AbstractTask">
            <summary>
            Declares the abstract quest class from which all user created
            quests must derive!
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.AbstractTask.CHECK_TASK_TICK">
            <summary>
            The temp property name for next check task millisecond
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.AbstractTask.CHECK_TASK_DELAY">
            <summary>
            Time player must wait after failed task check to get new chance for a task, in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.AbstractTask.CHANCE">
            <summary>
            Chance of npc having task for player
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.AbstractTask.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.AbstractTask.m_taskPlayer">
            <summary>
            The player doing the quest
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.AbstractTask.m_dbTask">
            <summary>
            The quest database object, storing the information for the player
            and the quest. Eg. QuestStep etc.
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new Quest
            </summary>
            <param name="taskPlayer">The player doing this task</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.#ctor(DOL.GS.GamePlayer,DOL.Database.DBTask)">
            <summary>
            Constructs a new Quest from a database Object
            </summary>
            <param name="taskPlayer">The player doing the quest</param>
            <param name="dbTask">The database object</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.LoadFromDatabase(DOL.GS.GamePlayer,DOL.Database.DBTask)">
            <summary>
            Loads a quest from the databaseobject and assigns it to a player
            </summary>
            <param name="targetPlayer">Player to assign the loaded quest</param>
            <param name="dbTask">Quest to load</param>
            <returns>The created quest</returns>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.SaveIntoDatabase">
            <summary>
            Saves this quest into the database
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.DeleteFromDatabase">
            <summary>
            Deletes this quest from the database
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.AbstractTask.m_customProperties">
            <summary>
            This HybridDictionary holds all the custom properties of this quest
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.ParseCustomProperties">
            <summary>
            This method parses the custom properties string of the m_dbQuest
            into the HybridDictionary for easier use and access
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.SetCustomProperty(System.String,System.String)">
            <summary>
            This method sets a custom Property to a specific value
            </summary>
            <param name="key">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.SaveCustomProperties">
            <summary>
            Saves the custom properties into the database
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.RemoveCustomProperty(System.String)">
            <summary>
            Removes a custom property from the database
            </summary>
            <param name="key">The key name of the property</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.GetCustomProperty(System.String)">
            <summary>
            This method retrieves a custom property from the database
            </summary>
            <param name="key">The property key</param>
            <returns>The property value</returns>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.FinishTask">
            <summary>
            Called to finish the task.
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.ExpireTask">
            <summary>
            Called to abort the task
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            This method needs to be implemented in each quest.
            It is the core of the quest. The global event hook of the GamePlayer.
            This method will be called whenever a GamePlayer with this quest
            fires ANY event!
            </summary>
            <param name="e">The event type</param>
            <param name="sender">The sender of the event</param>
            <param name="args">The event arguments</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.CheckTaskExpired">
            <summary>
            Check Task available
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.GenerateItem(System.String,System.Int32,System.Int32)">
            <summary>
            Create an InventoryItem of given Name and Level
            </summary>
            <param name="ItemName">Name for the object</param>
            <param name="ItemLevel">Level to give to the object</param>
            <returns>InventoryItem of given Name and Level</returns>
        </member>
        <member name="M:DOL.GS.Quests.AbstractTask.CheckAvailability(DOL.GS.GamePlayer,DOL.GS.GameLiving,System.Int32)">
            <summary>
            Check if Player can accept a new Task
            </summary>
            <param name="player">The GamePlayer Object</param>
            <returns>True Player have no other Chart</returns>
        </member>
        <member name="P:DOL.GS.Quests.AbstractTask.TaskActive">
            <summary>
            Task already finished or still active.
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractTask.ItemName">
            <summary>
            Item related to task stored in dbTask
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractTask.Name">
            <summary>
            Retrieves the name of the quest
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractTask.Description">
            <summary>
            Retrieves the description for the current quest step
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.CraftTask.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new Task
            </summary>
            <param name="taskPlayer">The player doing this task</param>
        </member>
        <member name="M:DOL.GS.Quests.CraftTask.#ctor(DOL.GS.GamePlayer,DOL.Database.DBTask)">
            <summary>
            Constructs a new Task from a database Object
            </summary>
            <param name="taskPlayer">The player doing the task</param>
            <param name="dbTask">The database object</param>
        </member>
        <member name="M:DOL.GS.Quests.CraftTask.FinishTask">
            <summary>
            Called to finish the task.
            Should be overridden and some rewards given etc.
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.CraftTask.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            This method needs to be implemented in each task.
            It is the core of the task. The global event hook of the GamePlayer.
            This method will be called whenever a GamePlayer with this task
            fires ANY event!
            </summary>
            <param name="e">The event type</param>
            <param name="sender">The sender of the event</param>
            <param name="args">The event arguments</param>
        </member>
        <member name="M:DOL.GS.Quests.CraftTask.GenerateNPCItem(DOL.GS.GamePlayer)">
            <summary>
            Generate an Item random Named for NPC Drop
            </summary>
            <param name="player">Level of Generated Item</param>
            <returns>A Generated NPC Item</returns>
        </member>
        <member name="M:DOL.GS.Quests.CraftTask.BuildTask(DOL.GS.GamePlayer,DOL.GS.GameLiving)">
            <summary>
            Create an Item, Search for a NPC to consign the Item and give Item to the Player
            </summary>
            <param name="player">The GamePlayer Object</param>
        </member>
        <member name="M:DOL.GS.Quests.CraftTask.GetRandomNPC(DOL.GS.GamePlayer)">
            <summary>
            Find a Random NPC
            </summary>
            <param name="Player">The GamePlayer Object</param>		
            <returns>The GameNPC Searched</returns>
        </member>
        <member name="P:DOL.GS.Quests.CraftTask.Name">
            <summary>
            Retrieves the name of the task
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.CraftTask.Description">
            <summary>
            Retrieves the description
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.CraftTask.RecieverZone">
            <summary>
            Zone related to task stored in dbTask
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.DebuffEffectivnessPercentCalculator">
            <summary>
            The Spell Range bonus percent calculator
            
            BuffBonusCategory1 unused
            BuffBonusCategory2 unused
            BuffBonusCategory3 is used for debuff
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.ArcheryRangePercentCalculator">
             <summary>
             The Archery Range bonus percent calculator
            
             BuffBonusCategory1 unused
             BuffBonusCategory2 unused
             BuffBonusCategory3 is used for debuff
             BuffBonusCategory4 unused
             BuffBonusMultCategory1 unused
             </summary>
        </member>
        <member name="T:DOL.GS.Keeps.GameKeepTower">
            <summary>
            GameKeepTower is the tower in New frontiere link to keep
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepTower.ClaimBountyPointCost">
            <summary>
            table of claim bounty point take from guild each cycle
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepTower.CalculateTimeToUpgrade">
            <summary>
            The time for a tower to upgrade
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepTower.CheckForClaim(DOL.GS.GamePlayer)">
            <summary>
            The checks we need to run before we allow a player to claim
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepTower.CalculRP">
            <summary>
            The RP reward for claiming based on difficulty level
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepTower.Keep">
            <summary>
            The towers keep
            </summary>
        </member>
        <member name="T:DOL.GS.Items.DefaultAlbionItems">
            <summary>
            Creates Level 5 items given by trainer for Albion
            </summary>
        </member>
        <member name="F:DOL.GS.Items.DefaultAlbionItems.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.SelfCraftWindow">
            <summary>
            SelfCraftWindow is the object used to cambine item alone
            </summary>
        </member>
        <member name="F:DOL.GS.SelfCraftWindow.MAX_ITEMS">
            <summary>
            The max amount of items that can be added to tradewindow
            </summary>
        </member>
        <member name="F:DOL.GS.SelfCraftWindow.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.SelfCraftWindow.m_tradeItems">
            <summary>
            Holds a list of items used to combine with
            </summary>
        </member>
        <member name="F:DOL.GS.SelfCraftWindow.m_owner">
            <summary>
            Holds the owner of this window and items in it
            </summary>
        </member>
        <member name="F:DOL.GS.SelfCraftWindow.m_itemToCombine">
            <summary>
            Holds the item used to combine on
            </summary>
        </member>
        <member name="F:DOL.GS.SelfCraftWindow.m_tradeAccept">
            <summary>
            Holds if we have accepted the trade or not
            </summary>
        </member>
        <member name="F:DOL.GS.SelfCraftWindow.m_changesCount">
            <summary>
            Stores the begin changes count
            </summary>
        </member>
        <member name="M:DOL.GS.SelfCraftWindow.AddItemToTrade(DOL.Database.InventoryItem)">
            <summary>
            Adds an item to the tradewindow
            </summary>
            <param name="itemForTrade">InventoryItem to add</param>
            <returns>true if added</returns>
        </member>
        <member name="M:DOL.GS.SelfCraftWindow.AddMoneyToTrade(System.Int64)">
            <summary>
            Adds money to the tradewindow
            </summary>
            <param name="money">Array of money values to add</param>
        </member>
        <member name="M:DOL.GS.SelfCraftWindow.RemoveItemToTrade(DOL.Database.InventoryItem)">
            <summary>
            Removes an item from the tradewindow
            </summary>
            <param name="itemToRemove"></param>
        </member>
        <member name="M:DOL.GS.SelfCraftWindow.TradeUpdate">
            <summary>
            Updates the trade window
            </summary>
        </member>
        <member name="M:DOL.GS.SelfCraftWindow.AcceptTrade">
            <summary>
            Called each time a player push the accept button to accept the trade
            </summary>
        </member>
        <member name="M:DOL.GS.SelfCraftWindow.CloseTrade">
            <summary>
            Closes the tradewindow
            </summary>
        </member>
        <member name="P:DOL.GS.SelfCraftWindow.TradeItems">
            <summary>
            Returns the array of items used to combine with
            </summary>
        </member>
        <member name="P:DOL.GS.SelfCraftWindow.PartnerTradeItems">
            <summary>
            Returns the array of items the partner offer for trade
            </summary>
        </member>
        <member name="P:DOL.GS.SelfCraftWindow.TradeMoney">
            <summary>
            Returns the money we offer for trade
            </summary>
        </member>
        <member name="P:DOL.GS.SelfCraftWindow.PartnerTradeMoney">
            <summary>
            Returns the money the partner offer for trade
            </summary>
        </member>
        <member name="P:DOL.GS.SelfCraftWindow.Owner">
            <summary>
            Gets the owner of this window and items in it
            </summary>
        </member>
        <member name="P:DOL.GS.SelfCraftWindow.Partner">
            <summary>
            Gets the owner of this window and items in it
            </summary>
        </member>
        <member name="P:DOL.GS.SelfCraftWindow.Sync">
            <summary>
            Gets the access sync object for this and TradePartner windows
            </summary>
        </member>
        <member name="P:DOL.GS.SelfCraftWindow.ItemsCount">
            <summary>
            Gets the item count in trade window
            </summary>
        </member>
        <member name="P:DOL.GS.SelfCraftWindow.PartnerItemsCount">
            <summary>
            Gets the item count in partner trade window
            </summary>
        </member>
        <member name="P:DOL.GS.SelfCraftWindow.Repairing">
            <summary>
            Gets or sets the repair flag is switched
            </summary>
        </member>
        <member name="P:DOL.GS.SelfCraftWindow.Combine">
            <summary>
            Gets or sets the combine flag is switched
            </summary>
        </member>
        <member name="T:DOL.GS.LootGeneratorTemplate">
            <summary>
            TemplateLootGenerator
            This implementation uses LootTemplates to relate loots to a specific mob type.
            Used DB Tables: 
            			MobxLootTemplate  (Relation between Mob and loottemplate
            			LootTemplate	(loottemplate containing possible loot items)
            </summary>
        </member>
        <member name="F:DOL.GS.LootGeneratorTemplate.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.LootGeneratorTemplate.m_templateNameXLootTemplate">
            <summary>
            Map holding a list of dbLootTemplates for each templateName
            1:n mapping between loottemplateName and dbloottemplate entries
            </summary>
        </member>
        <member name="F:DOL.GS.LootGeneratorTemplate.m_mobXLootTemplates">
            <summary>
            Map holding the corresponding lootTemplateName for each Mob
            1:n Mapping between Mob and LootTemplate
            </summary>
        </member>
        <member name="M:DOL.GS.LootGeneratorTemplate.#ctor">
            <summary>
            Constrcut a new templategenerate and load it's values from database.
            </summary>
        </member>
        <member name="M:DOL.GS.LootGeneratorTemplate.PreloadLootTemplates">
            <summary>
            Loads the loottemplates
            </summary>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.PropertyCalc.ResistPierceCalculator">
             <summary>
             The resist pierce bonus calculator
            
             BuffBonusCategory1 is used for buffs
             BuffBonusCategory2 unused
             BuffBonusCategory3 is used for debuff (never seen on live)
             BuffBonusCategory4 unused
             BuffBonusMultCategory1 unused
             </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerRegionChangeRequestHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerRegionChangeRequestHandler.m_instanceByName">
            <summary>
            Holds jump point types
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.PlayerRegionChangeRequestHandler.RegionChangeRequestHandler">
            <summary>
            Handles player region change requests
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerRegionChangeRequestHandler.RegionChangeRequestHandler.m_zonePoint">
            <summary>
            The target zone point
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerRegionChangeRequestHandler.RegionChangeRequestHandler.m_checkHandler">
            <summary>
            Checks whether player is allowed to jump
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerRegionChangeRequestHandler.RegionChangeRequestHandler.#ctor(DOL.GS.GamePlayer,DOL.Database.ZonePoint,DOL.GS.ServerRules.IJumpPointHandler)">
            <summary>
            Constructs a new RegionChangeRequestHandler
            </summary>
            <param name="actionSource">The action source</param>
            <param name="zonePoint">The target zone point</param>
            <param name="checker">The jump point checker instance</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerRegionChangeRequestHandler.RegionChangeRequestHandler.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerPositionUpdateHandler.SPEEDHACKCOUNTER">
            <summary>
            Stores the count of times the player is above speedhack tolerance!
            If this value reaches 10 or more, a logfile entry is written.
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerPositionUpdateHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.PlayerDismountRequestHandler.DismountRequestHandler">
            <summary>
            Handles player dismount requests
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerDismountRequestHandler.DismountRequestHandler.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new DismountRequestHandler
            </summary>
            <param name="actionSource"></param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerDismountRequestHandler.DismountRequestHandler.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.PlayerAttackRequestHandler.AttackRequestHandler">
            <summary>
            Handles change attack mode requests
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerAttackRequestHandler.AttackRequestHandler.m_start">
            <summary>
            True if attack should be started
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerAttackRequestHandler.AttackRequestHandler.m_userAction">
            <summary>
            True if user initiated the action else was done by the client
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerAttackRequestHandler.AttackRequestHandler.#ctor(DOL.GS.GamePlayer,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new AttackRequestHandler
            </summary>
            <param name="actionSource">The action source</param>
            <param name="start">True if attack should be started</param>
            <param name="userAction">True if user initiated the action else was done by the client</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerAttackRequestHandler.AttackRequestHandler.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.DoorRequestHandler.ChangeDoorAction">
            <summary>
            Handles the door state change actions
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.DoorRequestHandler.ChangeDoorAction.m_doorId">
            <summary>
            The target door Id
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.DoorRequestHandler.ChangeDoorAction.m_doorState">
            <summary>
            The door state
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.DoorRequestHandler.ChangeDoorAction.#ctor(DOL.GS.GamePlayer,System.Int32,System.Int32)">
            <summary>
            Constructs a new ChangeDoorAction
            </summary>
            <param name="actionSource">The action source</param>
            <param name="doorId">The target door Id</param>
            <param name="doorState">The door state</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.DoorRequestHandler.ChangeDoorAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.Events.InteractWithEventArgs">
            <summary>
            Description résumée de InteractWithEventArgs.
            </summary>
        </member>
        <member name="P:DOL.Events.InteractWithEventArgs.Target">
            <summary>
            Gets the GameObject target whose player interact with
            </summary>
        </member>
        <member name="T:DOL.Events.CastSpellEventArgs">
            <summary>
            Holds the arguments for the CastSpell event of GameLivings
            </summary>
        </member>
        <member name="F:DOL.Events.CastSpellEventArgs.m_handler">
            <summary>
            The Spell Handler
            </summary>
        </member>
        <member name="M:DOL.Events.CastSpellEventArgs.#ctor(DOL.GS.Spells.ISpellHandler)">
            <summary>
            Constructs a new Dying event args
            </summary>
        </member>
        <member name="P:DOL.Events.CastSpellEventArgs.SpellHandler">
            <summary>
            Gets the handler
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.SureShotEffect">
            <summary>
            The helper effect for sure shot
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.SureShotEffect.m_player">
            <summary>
            The effect owner
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.SureShotEffect.#ctor">
            <summary>
            Creates a new sure shot effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.SureShotEffect.Start(DOL.GS.GamePlayer)">
            <summary>
            Start the effect on player
            </summary>
            <param name="player">The effect target</param>
        </member>
        <member name="M:DOL.GS.Effects.SureShotEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect must be canceled
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.SureShotEffect.m_id">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SureShotEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SureShotEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in seconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SureShotEffect.Icon">
            <summary>
            Icon to show on players, can be id
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SureShotEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SureShotEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.StagEffect">
            <summary>
            The helper class for the stag ability
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.StagEffect.delveString">
            <summary>
            The ability description
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.StagEffect.m_player">
            <summary>
            The ability owner
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.StagEffect.m_ability">
            <summary>
            The used ability
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.StagEffect.m_amount">
            <summary>
            The amount of max health gained
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.StagEffect.m_expireTimer">
            <summary>
            The timer that expires the ability
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StagEffect.#ctor">
            <summary>
            Creates a new stag effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StagEffect.Start(DOL.GS.GamePlayer,DOL.GS.Ability)">
            <summary>
            Start the stag on player
            </summary>
            <param name="player">The player starting new effect</param>
            <param name="ab">The ability used to start new effect</param>
        </member>
        <member name="M:DOL.GS.Effects.StagEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect must be canceled
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StagEffect.StartTimers">
            <summary>
            Starts the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StagEffect.StopTimers">
            <summary>
            Stops the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StagEffect.ExpiredCallback(DOL.GS.RegionTimer)">
            <summary>
            The callback method when the effect expires
            </summary>
            <param name="callingTimer">the gametimer of the effect</param>
            <returns>the new intervall (0) </returns>
        </member>
        <member name="F:DOL.GS.Effects.StagEffect.m_id">
            <summary>
            The internal unique effect ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StagEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StagEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StagEffect.Icon">
            <summary>
            Icon to show on players, can be id
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StagEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StagEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.ArmorCrafting">
            <summary>
            ArmorCrafting is the crafting skill to make armor
            </summary>
        </member>
        <member name="T:DOL.GS.AbstractCraftingSkill">
            <summary>
            AbstractCraftingSkill is the base class for all crafting skill
            </summary>
        </member>
        <member name="F:DOL.GS.AbstractCraftingSkill.CRAFT_DISTANCE">
            <summary>
            How close a player can be to make a item with a forge , lathe ect ...
            </summary>
        </member>
        <member name="F:DOL.GS.AbstractCraftingSkill.PLAYER_CRAFTER">
            <summary>
            The player currently crafting
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:DOL.GS.AbstractCraftingSkill.ITEM_CRAFTER" -->
        <member name="F:DOL.GS.AbstractCraftingSkill.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.AbstractCraftingSkill.m_icon">
            <summary>
            The icone number used by this craft.
            </summary>
        </member>
        <member name="F:DOL.GS.AbstractCraftingSkill.m_name">
            <summary>
            The name show for this craft.
            </summary>
        </member>
        <member name="F:DOL.GS.AbstractCraftingSkill.m_eskill">
            <summary>
            The crafting skill id of this craft
            </summary>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.CraftItem(DOL.Database.DBCraftedItem,DOL.GS.GamePlayer)">
            <summary>
            Called when player craft an item
            </summary>
            <param name="item"></param>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.MakeItem(DOL.GS.RegionTimer)">
            <summary>
            Make the item when craft time is finished 
            </summary>
            <param name="timer"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if the player own all needed tools
            </summary>
            <param name="player"></param>
            <param name="craftItemData"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.CheckSecondCraftingSkillRequirement(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if the player have enough secondary crafting skill to build the item
            </summary>
            <param name="player"></param>
            <param name="craftItemData"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.CheckRawMaterial(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            check if player have raw mateiral to make item
            </summary>
            <param name="player"></param>
            <param name="craftItemData"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.RemoveUsedMaterials(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Remove used raw material from player inventory
            </summary>
            <param name="player"></param>
            <param name="craftItemData"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.BuildCraftedItem(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Make the crafted item and add it to player's inventory
            </summary>
            <param name="player"></param>
            <param name="craftItemData"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.LooseRawMaterial(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            loose raw material when failed in craft
            </summary>
            <param name="player"></param>
            <param name="craftItemData"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.CalculateChanceToMakeItem(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Calculate chance to succes
            </summary>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.CalculateChanceToGainPoint(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Calculate chance to gain point
            </summary>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.GetCraftingTime(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Calculate crafting time
            </summary>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.CalculateChanceToLooseMaterial(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Calculate chance to lose material
            </summary>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.CalculateSecondCraftingSkillMinimumLevel(DOL.Database.DBCraftedItem)">
            <summary>
            Calculate the minumum needed secondary crafting skill level to make the item
            </summary>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.GetQuality(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Calculate crafted item quality
            </summary>
        </member>
        <member name="M:DOL.GS.AbstractCraftingSkill.GetItemCon(System.Int32,System.Int32)">
            <summary>
            get item con color compared to crafters skill, TODO no floating point calculation yet
            </summary>
            <param name="crafterSkill"></param>
            <param name="itemCraftingLevel"></param>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.AbstractCraftingSkill.eSkill">
            <summary>
            The enum index of this crafting skill
            </summary>
        </member>
        <member name="P:DOL.GS.AbstractCraftingSkill.Icon">
            <summary>
            The icon of this crafting skill
            </summary>
        </member>
        <member name="P:DOL.GS.AbstractCraftingSkill.Name">
            <summary>
            The name of this crafting skill
            </summary>
        </member>
        <member name="M:DOL.GS.ArmorCrafting.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.ArmorCrafting.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.ArmorCrafting.CalculateSecondCraftingSkillMinimumLevel(DOL.Database.DBCraftedItem)">
            <summary>
            Calculate the minumum needed secondary crafting skill level to make the item
            </summary>
        </member>
        <member name="M:DOL.GS.ArmorCrafting.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="T:DOL.GS.AbstractArea">
            <summary>
            AbstractArea extend this if you wish to implement e new custom area.
            For examples see Area.Cricle, Area.Square
            </summary>
        </member>
        <member name="T:DOL.GS.IArea">
            <summary>
            Interface for areas within game, extend this or AbstractArea if you need to define a new area shape that isn't already defined.
            Defined ones:
            - Area.Cricle
            - Area.Square
            </summary>
        </member>
        <member name="M:DOL.GS.IArea.IsIntersectingZone(DOL.GS.Zone)">
            <summary>
            Checks wether is intersects with given zone.
            This is needed to build an area.zone mapping cache for performance.		
            </summary>
            <param name="zone"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.IArea.IsContaining(DOL.GS.IPoint3D)">
            <summary>
            Checks wether given spot is within areas range or not
            </summary>
            <param name="spot"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.IArea.OnPlayerLeave(DOL.GS.GamePlayer)">
            <summary>
            Called whenever a player leaves the given area
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:DOL.GS.IArea.OnPlayerEnter(DOL.GS.GamePlayer)">
            <summary>
            Called whenever a player enters the given area
            </summary>
            <param name="player"></param>
        </member>
        <member name="P:DOL.GS.IArea.ID">
            <summary>
            Returns the ID of this zone
            </summary>
        </member>
        <member name="F:DOL.GS.AbstractArea.MAX_AREAS_PER_ZONE">
            <summary>
            Constant holding max number of areas per zone, increase if more ares are needed,
            this will slightly increase memory usage on server
            </summary>		
        </member>
        <member name="F:DOL.GS.AbstractArea.m_ID">
            <summary>
            The ID of the Area eg. 15 ( == index in Region.m_areas array)
            </summary>
        </member>
        <member name="F:DOL.GS.AbstractArea.m_Description">
            <summary>
            The description of the Area eg. "Camelot Hills"
            </summary>
        </member>
        <member name="F:DOL.GS.AbstractArea.m_sound">
            <summary>
            The area sound to play on enter/leave events
            </summary>
        </member>
        <member name="M:DOL.GS.AbstractArea.#ctor(System.String)">
            <summary>
            Constructs a new AbstractArea
            </summary>
            <param name="desc"></param>
        </member>
        <member name="M:DOL.GS.AbstractArea.IsIntersectingZone(DOL.GS.Zone)">
            <summary>
            Checks wether area intersects with given zone
            </summary>
            <param name="zone"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.AbstractArea.IsContaining(DOL.GS.IPoint3D)">
            <summary>
            Checks wether given spot is within areas boundaries or not
            </summary>
            <param name="spot"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.AbstractArea.OnPlayerLeave(DOL.GS.GamePlayer)">
            <summary>
            Called whenever a player leaves the given area
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:DOL.GS.AbstractArea.OnPlayerEnter(DOL.GS.GamePlayer)">
            <summary>
            Called whenever a player enters the given area
            </summary>
            <param name="player"></param>
        </member>
        <member name="P:DOL.GS.AbstractArea.CanBroadcast">
            <summary>
            Variable holding whether or not players can broadcast in this area
            </summary>
        </member>
        <member name="P:DOL.GS.AbstractArea.CheckLOS">
            <summary>
            Variable holding whether or not to check for LOS for spells in this area
            </summary>
        </member>
        <member name="P:DOL.GS.AbstractArea.DisplayMessage">
            <summary>
            Display entered message
            </summary>
        </member>
        <member name="P:DOL.GS.AbstractArea.IsSafeArea">
            <summary>
            Can players be attacked by other players in this area
            </summary>
        </member>
        <member name="P:DOL.GS.AbstractArea.ID">
            <summary>
            Returns the ID of this Area
            </summary>
        </member>
        <member name="P:DOL.GS.AbstractArea.Description">
            <summary>
            Return the description of this Area
            </summary>
        </member>
        <member name="P:DOL.GS.AbstractArea.Sound">
            <summary>
            Gets or sets the area sound
            </summary>
        </member>
        <member name="T:DOL.GS.Trainer.WarriorTrainer">
            <summary>
            Warrior Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.WarriorTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.WarriorTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.WarriorTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.ValkyrieTrainer">
            <summary>
            Valkyrie Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.ValkyrieTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ValkyrieTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ValkyrieTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.HunterTrainer">
            <summary>
            Hunter Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.HunterTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.HunterTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.HunterTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.EldritchTrainer">
            <summary>
            Eldritch Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.EldritchTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.EldritchTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.EldritchTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.BardTrainer">
            <summary>
            Bard Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.BardTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.BardTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.BardTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.MageTrainer">
            <summary>
            Mage Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.MageTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.MageTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.FighterTrainer">
            <summary>
            Fighter Trainer
            </summary>	
        </member>
        <member name="F:DOL.GS.Trainer.FighterTrainer.PRACTICE_WEAPON_ID">
            <summary>
            The practice weapon template ID
            </summary>
        </member>
        <member name="F:DOL.GS.Trainer.FighterTrainer.PRACTICE_SHIELD_ID">
            <summary>
            The practice shield template ID
            </summary>
        </member>
        <member name="M:DOL.GS.Trainer.FighterTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.FighterTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.ArmsmanTrainer">
            <summary>
            Armsman Trainer
            </summary>	
        </member>
        <member name="F:DOL.GS.Trainer.ArmsmanTrainer.WEAPON_ID1">
            <summary>
            The slash sword item template ID
            </summary>
        </member>
        <member name="F:DOL.GS.Trainer.ArmsmanTrainer.WEAPON_ID2">
            <summary>
            The crush sword item template ID
            </summary>
        </member>
        <member name="F:DOL.GS.Trainer.ArmsmanTrainer.WEAPON_ID3">
            <summary>
            The thrust sword item template ID
            </summary>
        </member>
        <member name="F:DOL.GS.Trainer.ArmsmanTrainer.WEAPON_ID4">
            <summary>
            The pike polearm item template ID
            </summary>
        </member>
        <member name="M:DOL.GS.Trainer.ArmsmanTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ArmsmanTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ArmsmanTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Styles.StyleLine">
            <summary>
            The style line containing all the styles able to execute
            </summary>
        </member>
        <member name="T:DOL.GS.Specialization">
            <summary>
            Specialization can be in some way an ability too and can have icons then
            its level depends from skill points that were spent to it through trainers
            </summary>
        </member>
        <member name="P:DOL.GS.Specialization.Icon">
            <summary>
            icon id (>=0x190) or 0 if spec is not clickable
            </summary>
        </member>
        <member name="P:DOL.GS.Specialization.SkillType">
            <summary>
            type of skill
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.StyleLine.m_styles">
            <summary>
            A list of styles contained in this style line
            </summary>
        </member>
        <member name="M:DOL.GS.Styles.StyleLine.#ctor(System.String,System.String,DOL.GS.Styles.Style[])">
            <summary>
            Creates a new style line
            </summary>
            <param name="keyName">The key name of this styleLine</param>
            <param name="name">The name of this styleLine, eg. "Blades"</param>
            <param name="styles">The styles for this StyleLine</param>
        </member>
        <member name="M:DOL.GS.Styles.StyleLine.GetStylesForLevel">
            <summary>
            Returns a list of Styles available at the current level of
            this StyleLine
            </summary>
            <returns>List of styles available at the current level of this styleline</returns>
        </member>
        <member name="P:DOL.GS.Styles.StyleLine.Styles">
            <summary>
            Gets or Sets all styles in this StyleLine
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.NearsightSpellHandler">
            <summary>
            Reduce range needed to cast the sepll
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.NearsightSpellHandler.OnEffectStart(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            When an applied effect starts
            duration spells only
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.NearsightSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="P:DOL.GS.Spells.NearsightSpellHandler.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DualStatBuff">
            <summary>
            Buffs two stats at once, goes into specline bonus category
            </summary>	
        </member>
        <member name="T:DOL.GS.Spells.StrengthConBuff">
            <summary>
            Str/Con stat specline buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DexterityQuiBuff">
            <summary>
            Dex/Qui stat specline buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DirectDamageSpellHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.DirectDamageSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            Execute direct damage spell
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.Spells.DirectDamageSpellHandler.OnDirectEffect(DOL.GS.GameLiving,System.Double)">
            <summary>
            execute direct effect
            </summary>
            <param name="target">target that gets the damage</param>
            <param name="effectiveness">factor from 0..1 (0%-100%)</param>
        </member>
        <member name="M:DOL.GS.Spells.DirectDamageSpellHandler.CalculateSpellResistChance(DOL.GS.GameLiving)">
            <summary>
            Calculates chance of spell getting resisted
            </summary>
            <param name="target">the target of the spell</param>
            <returns>chance that spell will be resisted for specific target</returns>
        </member>
        <member name="T:DOL.GS.Spells.SavageParryHandler">
            <summary>
            Summary description for SavageHasteHandler.
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ParryChanceBuff">
            <summary>
            Parry chance buff
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.VanishAbility">
            <summary>
            Vanish realm ability
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.VanishAbility.Execute(DOL.GS.GameLiving)">
            <summary>
            Action
            </summary>
            <param name="living"></param>
        </member>
        <member name="T:DOL.GS.RealmAbilities.WildPowerAbility">
            <summary>
            Wild power ability, critical hit chance bonus to damage spells (SpellHandler checks for it)
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.MasteryOfMageryAbility">
            <summary>
            Mastery of Magery ability, adds to effectivenes of damage spells (SpellHandler checks for it)
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.WildHealingAbility">
            <summary>
            Wild healing ability, critical heal chance bonus to heal spells (SpellHandler checks for it)
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.MasteryOfHealingAbility">
            <summary>
            Mastery of healing ability, adds to heal spells (SpellHandler checks for it)
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.MasteryOfFocusAbility">
            <summary>
            Mastery of focus ability, adds to spell-level for resist bonus (SpellHandler checks for it)
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.TrueshotEffect">
            <summary>
            Trueshot grants 50% more range for next archery attack
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.StaticEffect">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StaticEffect.#ctor">
            <summary>
            create static effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StaticEffect.Cancel(System.Boolean)">
            <summary>
            Cancel effect
            </summary>
            <param name="playerCanceled"></param>
        </member>
        <member name="M:DOL.GS.Effects.StaticEffect.Start(DOL.GS.GameLiving)">
            <summary>
            Start the effect on target
            </summary>
            <param name="target">The effect target</param>
        </member>
        <member name="M:DOL.GS.Effects.StaticEffect.Stop">
            <summary>
            Stop the effect on owner
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StaticEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StaticEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StaticEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.PropertyIndexer">
            <summary>
            helper class for memory efficient usage of property fields
            it keeps integer values indexed by integer keys
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.IPropertyIndexer">
            <summary>
            Interface for properties that are added to get final value
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.MaxManaCalculator">
            <summary>
            The Power Pool calculator
            
            BuffBonusCategory1 unused
            BuffBonusCategory2 unused
            BuffBonusCategory3 unused
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.FatigueConsumptionPercentCalculator">
             <summary>
             The Fatigue Consumption bonus percent calculator
            
             BuffBonusCategory1 is used for buffs
             BuffBonusCategory2 unused
             BuffBonusCategory3 is used for debuff
             BuffBonusCategory4 unused
             BuffBonusMultCategory1 unused
             </summary>
        </member>
        <member name="T:DOL.GS.PlayerTitles.IPlayerTitle">
            <summary>
            Denotes a class as a player title.
            </summary>
        </member>
        <member name="M:DOL.GS.PlayerTitles.IPlayerTitle.GetDescription(DOL.GS.GamePlayer)">
            <summary>
            The title description, shown in "Titles" window.
            </summary>
            <param name="player">The title owner.</param>
            <returns>The title description.</returns>
        </member>
        <member name="M:DOL.GS.PlayerTitles.IPlayerTitle.GetValue(DOL.GS.GamePlayer)">
            <summary>
            The title value, shown over player's head.
            </summary>
            <param name="player">The title owner.</param>
            <returns>The title value.</returns>
        </member>
        <member name="M:DOL.GS.PlayerTitles.IPlayerTitle.IsForced(DOL.GS.GamePlayer)">
            <summary>
            Checks whether this title can be changed by the player.
            </summary>
            <param name="player">The title owner.</param>
            <returns>True if player can not change the title.</returns>
        </member>
        <member name="M:DOL.GS.PlayerTitles.IPlayerTitle.IsSuitable(DOL.GS.GamePlayer)">
            <summary>
            Verify whether the player is suitable for this title.
            </summary>
            <param name="player">The player to check.</param>
            <returns>true if the player is suitable for this title.</returns>
        </member>
        <member name="M:DOL.GS.PlayerTitles.IPlayerTitle.OnTitleGained(DOL.GS.GamePlayer)">
            <summary>
            Callback for when player gains this title.
            </summary>
            <param name="player">The player that gained a title.</param>
        </member>
        <member name="M:DOL.GS.PlayerTitles.IPlayerTitle.OnTitleLost(DOL.GS.GamePlayer)">
            <summary>
            Callback for when player loose this title.
            </summary>
            <param name="player">The player that lost a title.</param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassMentalist">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassMentalist.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassGuardian">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassMercenary">
             <summary>
            
             </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassFighter">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassMercenary.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassInfiltrator">
             <summary>
            
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DOL.GS.Scripts.ClassInfiltrator.OnSkillTrained(DOL.GS.GamePlayer,DOL.GS.Specialization)" -->
        <member name="T:DOL.GS.Items.DefaultHiberniaItems">
            <summary>
            Creates Level 5 items given by trainer for Hibernia
            </summary>
        </member>
        <member name="F:DOL.GS.Items.DefaultHiberniaItems.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.Abilities">
            <summary>
            strong name constants for built in abilities
            </summary>
        </member>
        <member name="T:DOL.GS.Specs">
            <summary>
            strong name constants for built in specs
            </summary>
        </member>
        <member name="T:DOL.GS.NpcTemplateMgr">
            <summary>
            Manages NPC templates data
            </summary>
        </member>
        <member name="F:DOL.GS.NpcTemplateMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.NpcTemplateMgr.m_mobTemplates">
            <summary>
            Holds all NPC templates
            </summary>
        </member>
        <member name="M:DOL.GS.NpcTemplateMgr.Init">
            <summary>
            Initializes NPC templates manager
            </summary>
            <returns>success</returns>
        </member>
        <member name="M:DOL.GS.NpcTemplateMgr.AddTemplate(DOL.GS.INpcTemplate)">
            <summary>
            Adds the mob template to collection
            </summary>
            <param name="template">New mob template</param>
        </member>
        <member name="M:DOL.GS.NpcTemplateMgr.GetTemplate(System.Int32)">
            <summary>
            Gets mob template by ID, returns random if multiple templates with same ID
            </summary>
            <param name="templateId">The mob template ID</param>
            <returns>The mob template or null if nothing is found</returns>
        </member>
        <member name="T:DOL.GS.RealmAbilities.ConcentrationAbility">
            <summary>
            Concentration - refresh quickcast
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.ConcentrationAbility.Execute(DOL.GS.GameLiving)">
            <summary>
            Action
            </summary>
            <param name="living"></param>
        </member>
        <member name="T:DOL.GS.PacketHandler.PacketProcessor">
            <summary>
            This class handles the packets, receiving and sending
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.MAX_LAST_PACKETS">
            <summary>
            The count of last sent/received packets to keep.
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_client">
            <summary>
            Holds the current client for this processor
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_encoding">
            <summary>
            Holds the encoding used to encrypt/decrypt the packets
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_packetHandlers">
            <summary>
            Stores all packet handlers found when searching the gameserver assembly
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_activePacketHandler">
            <summary>
            currently active packet handler
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_handlerThreadID">
            <summary>
            thread id of running packet handler
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.#ctor(DOL.GS.GameClient)">
            <summary>
            Constructs a new PacketProcessor
            </summary>
            <param name="client">The processor client</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_lastPackets">
            <summary>
            Holds the last sent/received packets.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.SaveSentPacket(DOL.PacketOut)">
            <summary>
            Saves the sent packet for debugging
            </summary>
            <param name="pak">The sent packet</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.SaveReceivedPacket(DOL.GS.GSPacketIn)">
            <summary>
            Save the received packet for debugging
            </summary>
            <param name="pak">The received packet</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.GetLastPackets">
            <summary>
            Makes a copy of last sent/received packets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.OnScriptCompiled(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Callback function called when the scripts assembly has been compiled
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.RegisterPacketHandler(System.Int32,DOL.GS.PacketHandler.IPacketHandler)">
            <summary>
            Registers a packet handler
            </summary>
            <param name="handler">The packet handler to register</param>
            <param name="packetCode">The packet ID to register it with</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.SearchPacketHandlers(System.String,System.Reflection.Assembly)">
            <summary>
            Searches an assembly for packet handlers
            </summary>
            <param name="version">namespace of packethandlers to search eg. 'v167'</param>
            <param name="assembly">Assembly to search</param>
            <returns>The number of handlers loaded</returns>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.OnDisconnect">
            <summary>
            Called on client disconnect.
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_tcpSendBuffer">
            <summary>
            Holds the TCP send buffer
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_tcpQueue">
            <summary>
            The client TCP packet send queue
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_sendingTcp">
            <summary>
            Indicates whether data is currently being sent to the client
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.SendTCP(DOL.GS.PacketHandler.GSTCPPacketOut)">
            <summary>
            Sends a packet via TCP
            </summary>
            <param name="packet">The packet to be sent</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.SendTCP(System.Byte[])">
            <summary>
            Sends a packet via TCP
            </summary>
            <param name="buf">Buffer containing the data to be sent</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_asyncTcpCallback">
            <summary>
            Holds the TCP AsyncCallback delegate
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.AsyncTcpSendCallback(System.IAsyncResult)">
            <summary>
            Callback method for async sends
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.CombinePackets(System.Byte[],System.Collections.Queue,System.Int32,DOL.GS.GameClient)">
            <summary>
            Combines queued packets in one stream.
            </summary>
            <param name="buf">The target buffer.</param>
            <param name="q">The queued packets.</param>
            <param name="length">The max stream len.</param>
            <param name="client">The client.</param>
            <returns>The count of bytes writen.</returns>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.SendTCPRaw(DOL.GS.PacketHandler.GSTCPPacketOut)">
            <summary>
            Send the packet via TCP without changing any portion of the packet
            </summary>
            <param name="packet">Packet to send</param>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_udpSendBuffer">
            <summary>
            Holds the UDP send buffer
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_udpQueue">
            <summary>
            The client UDP packet send queue
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_udpCounter">
            <summary>
            This variable holds the current UDP counter for this sender
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_asyncUdpCallback">
            <summary>
            Holds the async udp send callback delegate
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_sendingUdp">
            <summary>
            Indicates whether UDP data is currently being sent
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.SendUDP(DOL.GS.PacketHandler.GSUDPPacketOut)">
            <summary>
            Send the packet via UDP
            </summary>
            <param name="packet">Packet to be sent</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.SendUDP(System.Byte[])">
            <summary>
            Send the packet via UDP
            </summary>
            <param name="buf">Packet to be sent</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.AsyncUdpSendCallback(System.IAsyncResult)">
            <summary>
            Finishes an asynchronous UDP transaction
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.SendUDPRaw(DOL.GS.PacketHandler.GSUDPPacketOut)">
            <summary>
            Send the UDP packet without changing any portion of the packet
            </summary>
            <param name="packet">Packet to be sent</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.ReceiveBytes(System.Int32)">
            <summary>
            Called when the client receives bytes
            </summary>
            <param name="numBytes">The number of bytes received</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.CalculateChecksum(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Calculates the packet checksum
            </summary>
            <param name="packet">The full received packet including checksum bytes</param>
            <param name="dataOffset">The offset of data for checksum calc in the buffer</param>
            <param name="dataSize">The size of data for checksum calc</param>
            <returns>The calculated checksum</returns>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketProcessor.m_activePacketThreads">
            <summary>
            Holds a list of all currently active handler threads!
            This list is updated in the HandlePacket method
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketProcessor.GetConnectionThreadpoolStacks">
            <summary>
            Retrieves a textual description of all active packet handler thread stacks
            </summary>
            <returns>A string with the stacks</returns>
        </member>
        <member name="P:DOL.GS.PacketHandler.PacketProcessor.Encoding">
            <summary>
            Gets the encoding for this processor
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.GSUDPPacketOut">
            <summary>
            Outgoing game server UDP packet
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.GSUDPPacketOut.#ctor(System.Byte)">
            <summary>
            Constructor
            </summary>
            <param name="packetCode">ID of the packet</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.GSUDPPacketOut.WritePacketLength">
            <summary>
            Calculates the packet size and prepends it
            </summary>
            <returns>The packet size</returns>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerHeadingUpdateHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.PingRequestHandler">
            <summary>
            Handles the ping packet
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PingRequestHandler.HandlePacket(DOL.GS.GameClient,DOL.GS.GSPacketIn)">
            <summary>
            Called when the packet has been received
            </summary>
            <param name="client">Client that sent the packet</param>
            <param name="packet">Packet data</param>
            <returns>Non zero if function was successfull</returns>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.MakeProductHandler">
            <summary>
            makeproducthandler handle the crafted product start
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.HouseEnterLeaveHandler.EnterLeaveHouseAction">
            <summary>
            Handles house enter/leave events
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.HouseEnterLeaveHandler.EnterLeaveHouseAction.m_house">
            <summary>
            The target house
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.HouseEnterLeaveHandler.EnterLeaveHouseAction.m_enter">
            <summary>
            The enter house flag
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.HouseEnterLeaveHandler.EnterLeaveHouseAction.#ctor(DOL.GS.GamePlayer,DOL.GS.Housing.House,System.Int32)">
            <summary>
            Constructs a new EnterLeaveHouseAction
            </summary>
            <param name="actionSource">The actions source</param>
            <param name="house">The target house</param>
            <param name="enter">The enter house flag</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.HouseEnterLeaveHandler.EnterLeaveHouseAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.Area">
            <summary>
            Collection of basic area shapes
            Circle
            Square
            </summary>
        </member>
        <member name="F:DOL.GS.Area.Square.m_X">
            <summary>
            The X coordinate of this Area
            </summary>
        </member>
        <member name="F:DOL.GS.Area.Square.m_Y">
            <summary>
            The Y coordinate of this Area 
            </summary>
        </member>
        <member name="F:DOL.GS.Area.Square.m_Width">
            <summary>
            The width of this Area 
            </summary>
        </member>
        <member name="F:DOL.GS.Area.Square.m_Height">
            <summary>
            The height of this Area 
            </summary>
        </member>
        <member name="M:DOL.GS.Area.Square.IsIntersectingZone(DOL.GS.Zone)">
            <summary>
            Checks wether area intersects with given zone
            </summary>
            <param name="zone"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Area.Square.IsContaining(DOL.GS.IPoint3D)">
            <summary>
            Checks wether given point is within area boundaries
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Area.Square.X">
            <summary>
            Returns the X Coordinate of this Area
            </summary>
        </member>
        <member name="P:DOL.GS.Area.Square.Y">
            <summary>
            Returns the Y Coordinate of this Area
            </summary>
        </member>
        <member name="P:DOL.GS.Area.Square.Width">
            <summary>
            Returns the Width of this Area
            </summary>
        </member>
        <member name="P:DOL.GS.Area.Square.Height">
            <summary>
            Returns the Height of this Area
            </summary>
        </member>
        <member name="F:DOL.GS.Area.Circle.m_X">
            <summary>
            The X coordinate of this Area
            </summary>
        </member>
        <member name="F:DOL.GS.Area.Circle.m_Y">
            <summary>
            The Y coordinate of this Area
            </summary>
        </member>
        <member name="F:DOL.GS.Area.Circle.m_Z">
            <summary>
            The Z coordinate of this Area
            </summary>
        </member>
        <member name="F:DOL.GS.Area.Circle.m_Radius">
            <summary>
            The radius of the area in Coordinates
            </summary>
        </member>
        <member name="F:DOL.GS.Area.Circle.m_RadiusRadius">
            <summary>
            Cache for radius*radius to increase performance of circle check,
            radius is still needed for square check
            </summary>
        </member>
        <member name="M:DOL.GS.Area.Circle.IsIntersectingZone(DOL.GS.Zone)">
            <summary>
            Checks wether area intersects with given zone
            </summary>
            <param name="zone"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Area.Circle.IsContaining(DOL.GS.IPoint3D,System.Boolean)">
            <summary>
            Checks wether given point is within area boundaries
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Area.Circle.X">
            <summary>
            Returns the X Coordinate of this Area
            </summary>
        </member>
        <member name="P:DOL.GS.Area.Circle.Y">
            <summary>
            Returns the Y Coordinate of this Area
            </summary>
        </member>
        <member name="P:DOL.GS.Area.Circle.Z">
            <summary>
            Returns the Width of this Area
            </summary>
        </member>
        <member name="P:DOL.GS.Area.Circle.Radius">
            <summary>
            Returns the Height of this Area
            </summary>
        </member>
        <member name="T:DOL.GS.GameServer">
            <summary>
            Class encapsulates all game server functionality
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.MINUTE_CONV">
            <summary>
            Minute conversion from milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.MAX_UDPBUF">
            <summary>
            Maximum UDP buffer size
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.BUF_SIZE">
            <summary>
            The size of all packet buffers.
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.m_gmLog">
            <summary>
            The textwrite for log operations
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.m_cheatLog">
            <summary>
            The textwrite for log operations
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.m_startTick">
            <summary>
            Holds the startSystemTick when server is up.
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.m_udplisten">
            <summary>
            Socket that listens for UDP packets
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.m_pudpbuf">
            <summary>
            Receive buffer for UDP
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.m_database">
            <summary>
            Database instance
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.m_invalidNames">
            <summary>
            Contains a list of invalid names
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.m_serverRules">
            <summary>
            Holds instance of current server rules
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.m_timer">
            <summary>
            World save timer
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.m_status">
            <summary>
            Game server status variable
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.m_instance">
            <summary>
            The instance!
            </summary>
        </member>
        <member name="M:DOL.GS.GameServer.CreateInstance(DOL.GS.GameServerConfiguration)">
            <summary>
            Creates the gameserver instance
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:DOL.GS.GameServer.LoadInvalidNames">
            <summary>
            Loads an array of invalid names
            </summary>
        </member>
        <member name="M:DOL.GS.GameServer.StartUDP">
            <summary>
            Starts the udp listening
            </summary>
            <returns>true if successfull</returns>
        </member>
        <member name="F:DOL.GS.GameServer.m_udpReceiveCallback">
            <summary>
            Holds udp receive callback delegate
            </summary>
        </member>
        <member name="M:DOL.GS.GameServer.RecvFromCallback(System.IAsyncResult)">
            <summary>
            UDP event handler. Called when a UDP packet is waiting to be read
            </summary>
            <param name="ar"></param>
        </member>
        <member name="F:DOL.GS.GameServer.m_udpSendCallback">
            <summary>
            Holds the async UDP send callback
            </summary>
        </member>
        <member name="M:DOL.GS.GameServer.SendUDP(System.Byte[],System.Int32,System.Net.EndPoint)">
            <summary>
            Sends a UDP packet
            </summary>
            <param name="bytes">Packet to be sent</param>
            <param name="count">The count of bytes to send</param>
            <param name="clientEndpoint">Address of receiving client</param>
        </member>
        <member name="M:DOL.GS.GameServer.SendUDP(System.Byte[],System.Int32,System.Net.EndPoint,System.AsyncCallback)">
            <summary>
            Sends a UDP packet
            </summary>
            <param name="bytes">Packet to be sent</param>
            <param name="count">The count of bytes to send</param>
            <param name="clientEndpoint">Address of receiving client</param>
        </member>
        <member name="M:DOL.GS.GameServer.SendToCallback(System.IAsyncResult)">
            <summary>
            Callback function for UDP sends
            </summary>
            <param name="ar">Asynchronous result of this operation</param>
        </member>
        <member name="M:DOL.GS.GameServer.Start">
            <summary>
            Starts the server
            </summary>
            <returns>True if the server was successfully started</returns>
        </member>
        <member name="M:DOL.GS.GameServer.CurrentDomain_UnhandledException(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
            Logs unhandled exceptions
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:DOL.GS.GameServer.RecompileScripts">
            <summary>
            Recomiples the scripts dll
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameServer.StartScriptComponents">
            <summary>
            Initialize all script components
            </summary>
            <returns>true if successfull, false if not</returns>
        </member>
        <member name="M:DOL.GS.GameServer.CheckDatabaseVersion">
            <summary>
            Checks and convers database to newer versions
            </summary>
            <returns>true if all went fine, false if errors</returns>
        </member>
        <member name="M:DOL.GS.GameServer.InitComponent(System.Boolean,System.String)">
            <summary>
            Prints out some text info on component initialisation
            and stops the server again if the component failed
            </summary>
            <param name="componentInitState">The state</param>
            <param name="text">The text to print</param>
            <returns>false if startup should be interrupted</returns>
        </member>
        <member name="M:DOL.GS.GameServer.Stop">
            <summary>
            Stops the server, disconnects all clients, and writes the database to disk
            </summary>
        </member>
        <member name="F:DOL.GS.GameServer.m_packetBufPool">
            <summary>
            Holds all packet buffers.
            </summary>
        </member>
        <member name="M:DOL.GS.GameServer.AllocatePacketBuffers">
            <summary>
            Allocates all packet buffers.
            </summary>
            <returns>success</returns>
        </member>
        <member name="M:DOL.GS.GameServer.AcquirePacketBuffer">
            <summary>
            Gets packet buffer from the pool.
            </summary>
            <returns>byte array that will be used as packet buffer.</returns>
        </member>
        <member name="M:DOL.GS.GameServer.ReleasePacketBuffer(System.Byte[])">
            <summary>
            Releases previously acquired packet buffer.
            </summary>
            <param name="buf">The released buf</param>
        </member>
        <member name="M:DOL.GS.GameServer.GetNewClient">
            <summary>
            Creates a new client
            </summary>
            <returns>An instance of a new client</returns>
        </member>
        <member name="M:DOL.GS.GameServer.LogGMAction(System.String)">
            <summary>
            Writes a line to the gm log file
            </summary>
            <param name="text">the text to log</param>
        </member>
        <member name="M:DOL.GS.GameServer.LogCheatAction(System.String)">
            <summary>
            Writes a line to the cheat log file
            </summary>
            <param name="text">the text to log</param>
        </member>
        <member name="M:DOL.GS.GameServer.InitDB">
            <summary>
            Initializes the database
            </summary>
            <returns>True if the database was successfully initialized</returns>
        </member>
        <member name="M:DOL.GS.GameServer.SaveDatabase">
            <summary>
            Writes the database to disk
            </summary>
        </member>
        <member name="M:DOL.GS.GameServer.SaveTimerProc(System.Object)">
            <summary>
            Function called at X interval to write the database to disk
            </summary>
            <param name="sender">Object that generated the event</param>
        </member>
        <member name="M:DOL.GS.GameServer.#ctor">
            <summary>
            Default game server constructor
            </summary>
        </member>
        <member name="M:DOL.GS.GameServer.#ctor(DOL.GS.GameServerConfiguration)">
            <summary>
            Constructor with a given configuration
            </summary>
            <param name="config">A valid game server configuration</param>
        </member>
        <member name="P:DOL.GS.GameServer.Instance">
            <summary>
            Returns the instance
            </summary>
        </member>
        <member name="P:DOL.GS.GameServer.Configuration">
            <summary>
            Retrieves the server configuration
            </summary>
        </member>
        <member name="P:DOL.GS.GameServer.ServerStatus">
            <summary>
            Gets the server status
            </summary>
        </member>
        <member name="P:DOL.GS.GameServer.ServerRules">
            <summary>
            Gets the current rules used by server
            </summary>
        </member>
        <member name="P:DOL.GS.GameServer.Database">
            <summary>
            Gets the database instance
            </summary>
        </member>
        <member name="P:DOL.GS.GameServer.SaveInterval">
            <summary>
            Gets or sets the world save interval
            </summary>
        </member>
        <member name="P:DOL.GS.GameServer.InvalidNames">
            <summary>
            Gets an array of invalid player names
            </summary>
        </member>
        <member name="P:DOL.GS.GameServer.IsRunning">
            <summary>
            True if the server is listening
            </summary>
        </member>
        <member name="P:DOL.GS.GameServer.TickCount">
            <summary>
            Gets the number of millisecounds elapsed since the GameServer started.
            </summary>
        </member>
        <member name="P:DOL.GS.GameServer.UDPSocket">
            <summary>
            Gets the UDP Socket of this server instance
            </summary>
        </member>
        <member name="P:DOL.GS.GameServer.UDPBuffer">
            <summary>
            Gets the UDP buffer of this server instance
            </summary>
        </member>
        <member name="P:DOL.GS.GameServer.PacketPoolSize">
            <summary>
            Gets the count of packet buffers in the pool.
            </summary>
        </member>
        <member name="M:DOL.GS.SiegeTimer.#ctor(DOL.GS.GameSiegeWeapon)">
            <summary>
            Constructs a new UseSlotAction
            </summary>
            <param name="siegeWeapon">The siege weapon</param>
        </member>
        <member name="T:DOL.GS.GameHorse">
            <summary>
            
            </summary>
        </member>
        <member name="F:DOL.GS.CraftNPC.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.Events.GameClientEvent">
            <summary>
            This class holds all possible GameClient events.
            Only constants defined here!
            </summary>
        </member>
        <member name="M:DOL.Events.GameClientEvent.#ctor(System.String)">
            <summary>
            Constructs a new GameClientEvent
            </summary>
            <param name="name">the name of the event</param>
        </member>
        <member name="F:DOL.Events.GameClientEvent.Created">
            <summary>
            The Created event is fired whenever a GameClient is created
            </summary>
        </member>
        <member name="F:DOL.Events.GameClientEvent.Connected">
            <summary>
            The Connected event is fired whenever a GameClient has connected
            </summary>
        </member>
        <member name="F:DOL.Events.GameClientEvent.Disconnected">
            <summary>
            The Disconnected event is fired whenever a GameClient has disconnected
            </summary>
        </member>
        <member name="F:DOL.Events.GameClientEvent.PlayerLoaded">
            <summary>
            The PlayerLoaded event is fired whenever a player is set for the GameClient
            </summary>
        </member>
        <member name="F:DOL.Events.GameClientEvent.StateChanged">
            <summary>
            The StateChanged event is fired whenever the GameClient's state changed
            </summary>
        </member>
        <member name="F:DOL.Events.GameClientEvent.AccountLoaded">
            <summary>
            The AccountLoaded event is fired whenever an account has been set for the GameClient
            </summary>
        </member>
        <member name="T:DOL.Events.ScriptEvent">
            <summary>
            This class holds all possible script events.
            Only constants defined here!
            </summary>
        </member>
        <member name="M:DOL.Events.ScriptEvent.#ctor(System.String)">
            <summary>
            Constructs a new ScriptEvent
            </summary>
            <param name="name">the event name</param>
        </member>
        <member name="F:DOL.Events.ScriptEvent.Loaded">
            <summary>
            The Loaded event is fired whenever the scripts have loaded
            </summary>
        </member>
        <member name="F:DOL.Events.ScriptEvent.Unloaded">
            <summary>
            The Unloaded event is fired whenever the scripts should unload
            </summary>
        </member>
        <member name="T:DOL.GS.Tailoring">
            <summary>
            The tailoring crafting skill
            </summary>
        </member>
        <member name="M:DOL.GS.Tailoring.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.Tailoring.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.Tailoring.CalculateSecondCraftingSkillMinimumLevel(DOL.Database.DBCraftedItem)">
            <summary>
            Calculate the minumum needed secondary crafting skill level to make the item
            </summary>
        </member>
        <member name="M:DOL.GS.Tailoring.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="T:DOL.GS.SiegeCrafting">
            <summary>
            SiegeCrafting is the crafting skill to make siege weapon like catapult, balista,...
            </summary>
        </member>
        <member name="M:DOL.GS.SiegeCrafting.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.SiegeCrafting.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.SiegeCrafting.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="T:DOL.GS.HerbalCrafting">
            <summary>
            The cloth crafting skill
            </summary>
        </member>
        <member name="M:DOL.GS.HerbalCrafting.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.HerbalCrafting.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.HerbalCrafting.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="T:DOL.GS.Fletching">
            <summary>
            Fletching is the crafting skill to make fletch for archer
            </summary>
        </member>
        <member name="M:DOL.GS.Fletching.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.Fletching.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.Fletching.CalculateSecondCraftingSkillMinimumLevel(DOL.Database.DBCraftedItem)">
            <summary>
            Calculate the minumum needed secondary crafting skill level to make the item
            </summary>
        </member>
        <member name="M:DOL.GS.Fletching.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="T:DOL.AI.Brain.CasterBrain">
            <summary>
            Caster Guards Brain
            </summary>
        </member>
        <member name="T:DOL.AI.Brain.KeepGuardBrain">
            <summary>
            Brain Class for Area Capture Guards
            </summary>
        </member>
        <member name="T:DOL.AI.Brain.StandardMobBrain">
            <summary>
            Standard brain for standard mobs
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DOL.AI.APlayerVicinityBrain" -->
        <member name="T:DOL.AI.ABrain">
            <summary>
            This class is the base of all arteficial intelligence in game objects
            </summary>
        </member>
        <member name="F:DOL.AI.ABrain.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.AI.ABrain.m_body">
            <summary>
            The body of this brain
            </summary>
        </member>
        <member name="F:DOL.AI.ABrain.m_brainTimer">
            <summary>
            The timer used to check for player proximity
            </summary>
        </member>
        <member name="M:DOL.AI.ABrain.#ctor">
            <summary>
            Constructs a new brain for a body
            </summary>
        </member>
        <member name="M:DOL.AI.ABrain.ToString">
            <summary>
            Returns the string representation of the ABrain
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.AI.ABrain.Start">
            <summary>
            Starts the brain thinking
            </summary>
            <returns>true if started</returns>
        </member>
        <member name="M:DOL.AI.ABrain.Stop">
            <summary>
            Stops the brain thinking
            </summary>
            <returns>true if stopped</returns>
        </member>
        <member name="M:DOL.AI.ABrain.BrainTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            The callback timer for the brain ticks
            </summary>
            <param name="callingTimer">the calling timer</param>
            <returns>the new tick intervall</returns>
        </member>
        <member name="M:DOL.AI.ABrain.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Receives all messages of the body
            </summary>
            <param name="e">The event received</param>
            <param name="sender">The event sender</param>
            <param name="args">The event arguments</param>
        </member>
        <member name="M:DOL.AI.ABrain.Think">
            <summary>
            This method is called whenever the brain does some thinking
            </summary>
        </member>
        <member name="P:DOL.AI.ABrain.Body">
            <summary>
            Gets/sets the body of this brain
            </summary>
        </member>
        <member name="P:DOL.AI.ABrain.IsActive">
            <summary>
            Returns weather this brain is active or not
            </summary>
        </member>
        <member name="P:DOL.AI.ABrain.ThinkInterval">
            <summary>
            The interval at which the brain will fire, in milliseconds
            </summary>
        </member>
        <member name="F:DOL.AI.APlayerVicinityBrain.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.AI.APlayerVicinityBrain.#ctor">
            <summary>
            constructor of this brain
            </summary>
        </member>
        <member name="M:DOL.AI.APlayerVicinityBrain.ToString">
            <summary>
            Returns the string representation of the APlayerVicinityBrain
            </summary>
            <returns></returns>
        </member>
        <member name="F:DOL.AI.APlayerVicinityBrain.noPlayersStopCountdown">
            <summary>
            The number of ticks this brain stays active while no player
            is in the vicinity.
            </summary>
        </member>
        <member name="M:DOL.AI.APlayerVicinityBrain.Start">
            <summary>
            Starts the brain thinking and resets the inactivity countdown
            </summary>
            <returns>true if started</returns>
        </member>
        <member name="M:DOL.AI.APlayerVicinityBrain.BrainTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            Called whenever the brain should do some thinking.
            We check if there is at least one player around and nothing
            bad has happened. If so, we shutdown our brain.
            </summary>
            <param name="callingTimer"></param>
        </member>
        <member name="P:DOL.AI.APlayerVicinityBrain.NoPlayersStopDelay">
            <summary>
            The number of milliseconds this brain will stay active even when no player is close
            This abstract class always returns 45 Seconds
            </summary>
        </member>
        <member name="F:DOL.AI.Brain.StandardMobBrain.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.#ctor">
            <summary>
            Constructs a new StandardMobBrain
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.ToString">
            <summary>
            Returns the string representation of the StandardMobBrain
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.Think">
            <summary>
            Do the mob AI
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.CheckNPCAggro">
            <summary>
            Check for aggro against close NPCs
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.CheckPlayerAggro">
            <summary>
            Check for aggro against players
            </summary>
        </member>
        <member name="F:DOL.AI.Brain.StandardMobBrain.m_aggroMaxRange">
            <summary>
            Max Aggro range in that this npc searches for enemies
            </summary>
        </member>
        <member name="F:DOL.AI.Brain.StandardMobBrain.m_aggroLevel">
            <summary>
            Aggressive Level of this npc
            </summary>
        </member>
        <member name="F:DOL.AI.Brain.StandardMobBrain.m_aggroTable">
            <summary>
            List of livings that this npc has aggro on, living => aggroamount
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.AddToAggroList(DOL.GS.GameLiving,System.Int32)">
            <summary>
            Add living to the aggrolist
            aggroamount can be negative to lower amount of aggro		
            </summary>
            <param name="living"></param>
            <param name="aggroamount"></param>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.GetAggroAmountForLiving(DOL.GS.GameLiving)">
            <summary>
            Get current amount of aggro on aggrotable
            </summary>
            <param name="living"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.RemoveFromAggroList(DOL.GS.GameLiving)">
            <summary>
            Remove one living from aggro list
            </summary>
            <param name="living"></param>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.ClearAggroList">
            <summary>
            Remove all livings from the aggrolist
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.CloneAggroList">
            <summary>
            Makes a copy of current aggro list
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.AttackMostWanted">
            <summary>
            Selects and attacks the next target or does nothing
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.CalculateNextAttackTarget">
            <summary>
            Returns the best target to attack
            </summary>
            <returns>the best target</returns>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.CalculateAggroLevelToTarget(DOL.GS.GameLiving)">
            <summary>
            calculate the aggro of this npc against another living
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Receives all messages of the body
            </summary>
            <param name="e">The event received</param>
            <param name="sender">The event sender</param>
            <param name="args">The event arguments</param>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.OnFollowLostTarget(DOL.GS.GameObject)">
            <summary>
            Lost follow target event
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.OnAttackedByEnemy(DOL.GS.AttackData)">
            <summary>
            Attacked by enemy event
            </summary>
            <param name="ad"></param>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.FindFriendForAttack">
            <summary>
            searches for a friend to group for combat
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.CheckSpells">
            <summary>
            Checks the Spells list the NPC has for useable spells and casts them
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.CheckPositiveCastingSpells">
            <summary>
            Checks for positive spells which need casting
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.CheckInstantSpells">
            <summary>
            Checks for instant spells, both positive and negative
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.StandardMobBrain.CheckAbilities">
            <summary>
            Checks for Abilities the NPC can use
            </summary>
        </member>
        <member name="P:DOL.AI.Brain.StandardMobBrain.ThinkInterval">
            <summary>
            The interval for thinking, min 1.5 seconds
            10 seconds for 0 aggro mobs
            </summary>
        </member>
        <member name="P:DOL.AI.Brain.StandardMobBrain.AggroLevel">
            <summary>
            Aggressive Level in % 0..100, 0 means not Aggressive
            </summary>
        </member>
        <member name="P:DOL.AI.Brain.StandardMobBrain.AggroRange">
            <summary>
            Range in that this npc aggros
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.KeepGuardBrain.#ctor">
            <summary>
            Constructor for the Brain setting default values
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.KeepGuardBrain.Think">
            <summary>
            Actions to be taken on each Think pulse
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.KeepGuardBrain.CheckPlayerAggro">
            <summary>
            Check Area for Players to attack
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.KeepGuardBrain.CheckNPCAggro">
            <summary>
            Check area for NPCs to attack
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.CasterBrain.Think">
            <summary>
            Brain Think
            </summary>
        </member>
        <member name="T:DOL.GS.GameLocation">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Point3D">
            <summary>
            Defines a 3D point
            </summary>
        </member>
        <member name="T:DOL.GS.Point2D">
            <summary>
            represents a point in 2 dimensional space
            </summary>
        </member>
        <member name="F:DOL.GS.Point2D.HEADING_CONST">
            <summary>
            This constant is used to calculate the heading quickly
            </summary>
        </member>
        <member name="F:DOL.GS.Point2D.m_x">
            <summary>
            The X coord of this point
            </summary>
        </member>
        <member name="F:DOL.GS.Point2D.m_y">
            <summary>
            The Y coord of this point
            </summary>
        </member>
        <member name="M:DOL.GS.Point2D.#ctor">
            <summary>
            Constructs a new 2D point object
            </summary>
        </member>
        <member name="M:DOL.GS.Point2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new 2D point object
            </summary>
            <param name="x">The X coord</param>
            <param name="y">The Y coord</param>
        </member>
        <member name="M:DOL.GS.Point2D.#ctor(DOL.GS.IPoint2D)">
            <summary>
            Constructs a new 2D point object
            </summary>
            <param name="point">The 2D point</param>
        </member>
        <member name="M:DOL.GS.Point2D.GetHashCode">
            <summary>
            Calculates the hashcode of this point
            </summary>
            <returns>The hashcode</returns>
        </member>
        <member name="M:DOL.GS.Point2D.ToString">
            <summary>
            Creates the string representation of this point
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Point2D.Equals(System.Object)">
            <summary>
            Compares this point to any object
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if object is IPoint2D and equals this point</returns>
        </member>
        <member name="M:DOL.GS.Point2D.GetHeadingToLocation(DOL.GS.IPoint2D,DOL.GS.IPoint2D)">
            <summary>
            calculate heading from point1 to point2
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Point2D.X">
            <summary>
            X coord of this point
            </summary>
        </member>
        <member name="P:DOL.GS.Point2D.Y">
            <summary>
            Y coord of this point
            </summary>
        </member>
        <member name="F:DOL.GS.Point3D.m_z">
            <summary>
            The Z coord of this point
            </summary>
        </member>
        <member name="M:DOL.GS.Point3D.#ctor">
            <summary>
            Constructs a new 3D point object
            </summary>
        </member>
        <member name="M:DOL.GS.Point3D.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new 3D point object
            </summary>
            <param name="x">The X coord</param>
            <param name="y">The Y coord</param>
            <param name="z">The Z coord</param>
        </member>
        <member name="M:DOL.GS.Point3D.#ctor(DOL.GS.IPoint2D,System.Int32)">
            <summary>
            Constructs a new 3D point object
            </summary>
            <param name="point">2D point</param>
            <param name="z">Z coord</param>
        </member>
        <member name="M:DOL.GS.Point3D.#ctor(DOL.GS.IPoint3D)">
            <summary>
            Constructs a new 3D point object
            </summary>
            <param name="point">3D point</param>
        </member>
        <member name="M:DOL.GS.Point3D.GetHashCode">
            <summary>
            Calculates the hashcode of this point
            </summary>
            <returns>The hashcode</returns>
        </member>
        <member name="M:DOL.GS.Point3D.ToString">
            <summary>
            Creates the string representation of this point
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Point3D.Equals(System.Object)">
            <summary>
            Compares this point to any object
            </summary>
            <param name="obj">The object to compare</param>
            <returns>True if object is IPoint3D and equals this point</returns>
        </member>
        <member name="M:DOL.GS.Point3D.GetDistance(DOL.GS.IPoint3D,DOL.GS.IPoint3D)">
            <summary>
            calculates distance between 2 points
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Point3D.GetDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            calculates distance between 2 points
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="z1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z2"></param>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Point3D.Z">
            <summary>
            Z coord of this point
            </summary>
        </member>
        <member name="T:DOL.GS.IGameLocation">
            <summary>
            interface for classes that represent a point in 3d space
            </summary>
        </member>
        <member name="M:DOL.GS.GameLocation.GetDistance(DOL.GS.IGameLocation,DOL.GS.IGameLocation)">
            <summary>
            calculates distance between 2 points
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLocation.GetDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            calculates distance between 2 locations
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="z1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="z2"></param>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.GameLocation.Heading">
            <summary>
            heading of this point
            </summary>
        </member>
        <member name="P:DOL.GS.GameLocation.RegionID">
            <summary>
            RegionID of this point
            </summary>
        </member>
        <member name="P:DOL.GS.GameLocation.Name">
            <summary>
            Name of this point
            </summary>
        </member>
        <member name="T:DOL.GS.Trainer.HeroTrainer">
            <summary>
            Hero Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.HeroTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.HeroTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.HeroTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.SorcererTrainer">
            <summary>
            Sorcerer Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.SorcererTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.SorcererTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.SorcererTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.PaladinTrainer">
            <summary>
            Paladin Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.PaladinTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.PaladinTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.PaladinTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Styles.StyleProcessor">
            <summary>
            Processes styles and style related stuff.
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.StyleProcessor.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.Styles.StyleProcessor.CanUseStyle(DOL.GS.GameLiving,DOL.GS.Styles.Style,DOL.Database.InventoryItem)">
            <summary>
            Returns wether this player can use a particular style
            right now. Tests for all preconditions like prerequired
            styles, previous attack result, ...
            </summary>
            <param name="living">The living wanting to execute a style</param>
            <param name="style">The style to execute</param>
            <param name="weapon">The weapon used to execute the style</param>
            <returns>true if the player can execute the style right now, false if not</returns>
        </member>
        <member name="M:DOL.GS.Styles.StyleProcessor.TryToUseStyle(DOL.GS.GameLiving,DOL.GS.Styles.Style)">
            <summary>
            Tries to queue a new style in the player's style queue.
            Takes care of all conditions like setting backup styles and
            canceling styles if the style was queued already.
            </summary>
            <param name="living">The living to execute the style</param>
            <param name="style">The style to execute</param>
        </member>
        <member name="M:DOL.GS.Styles.StyleProcessor.ExecuteStyle(DOL.GS.GameLiving,DOL.GS.AttackData,DOL.Database.InventoryItem)">
            <summary>
            Executes the style of the given player. Prints
            out messages to the player notifying him of his success or failure.
            </summary>
            <param name="living">The living executing the styles</param>
            <param name="attackData">
            The AttackData that will be modified to contain the 
            new damage and the executed style.
            </param>
            <param name="weapon">The weapon used to execute the style</param>
            <returns>true if a style was performed, false if not</returns>
        </member>
        <member name="M:DOL.GS.Styles.StyleProcessor.CalculateEnduranceCost(DOL.GS.GameLiving,DOL.GS.Styles.Style,System.Int32)">
            <summary>
            Calculates endurance needed to use style
            </summary>
            <param name="style">The style to be used</param>
            <param name="weaponSpd">The weapon speed</param>
            <returns>Endurance needed to use style</returns>
        </member>
        <member name="M:DOL.GS.Styles.StyleProcessor.CheckWeaponType(DOL.GS.Styles.Style,DOL.GS.GameLiving,DOL.Database.InventoryItem)">
            <summary>
            Returns whether player has correct weapon
            active for particular style
            </summary>
            <param name="style">The style to execute</param>
            <param name="living">The living wanting to execute the style</param>
            <param name="weapon">The weapon used to execute the style</param>
            <returns>true if correct weapon active</returns>
        </member>
        <member name="M:DOL.GS.Styles.StyleProcessor.CreateMagicEffect(DOL.GS.GameLiving,DOL.GS.GameLiving,System.Int32)">
            <summary>
            Add the magical effect to target
            </summary>
            <param name="caster">The player who execute the style</param>
            <param name="target">The target of the style</param>
            <param name="spellID">The spellid of the magical effect</param>
        </member>
        <member name="T:DOL.GS.Spell">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Spell.ToString">
            <summary>
            Returns the string representation of the Spell
            </summary>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Spells.CastingCompleteCallback">
            <summary>
            Callback when spell handler has done its cast work
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.SpellEndsCallback">
            <summary>
            Callback when spell handler is completely done and duration spell expired
            or concentration spell was canceled
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.PveResurrectionIllness">
            <summary>
            Pve Resurrection Illness
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.AbstractIllnessSpellHandler">
            <summary>
            Contains all common code for illness spell handlers (and negative spell effects without animation) 
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.AbstractIllnessSpellHandler.CalculateEffectDuration(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates the effect duration in milliseconds
            </summary>
            <param name="target">The effect target</param>
            <param name="effectiveness">The effect effectiveness</param>
            <returns>The effect duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.PveResurrectionIllness.OnEffectStart(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            When an applied effect starts
            duration spells only
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.PveResurrectionIllness.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="P:DOL.GS.Spells.PveResurrectionIllness.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.StyleTaunt">
            <summary>
            Style taunt effect spell handler
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.StyleTaunt.IsOverwritable(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Determines wether this spell is compatible with given spell
            and therefore overwritable by better versions
            spells that are overwritable cannot stack
            </summary>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Quests.BaseQuestPart">
             <summary>
             BaseQuestParts are the core element of the new questsystem,
             you can add as many QuestAction to a quest as you want. 
             
             A QuestAction contains basically 3 Things: Trigger, Requirements, Actions 
            
             Triggers: A trigger defines the circumstances under which a certain QuestAction is fired.
             This can be eTriggerAction.Interact, eTriggerAction.GiveItem, eTriggerAction.Attack, etc...
             Additional there are two variables to add the needed parameters for the triggertype (Item to give for GiveItem, NPC to interact for Interact, etc...). To fire a QuestAction at least one of the added triggers must be fulfilled. 
            
             Requirements: Requirements describe what must be true to allow a QuestAction to fire.
             Level of player, Step of Quest, Class of Player, etc... There are also some variables to add
             additional parameters. To fire a QuestAction ALL requirements must be fulfilled. 
            
             Actions: If one trigger and all requirements are fulfilled the corresponding actions of
             a QuestAction will we executed one after another. Actions can be more or less anything:
             at the moment there are: GiveItem, TakeItem, Talk, Give Quest, Increase Quest Step, FinishQuest,
             etc....
             </summary>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.#ctor(System.Type,DOL.GS.GameNPC)">
            <summary>
            Creates a QuestPart for the given questtype with the default npc.
            </summary>
            <param name="questType">type of Quest this QuestPart will belong to.</param>
            <param name="npc">NPC associated with his questpart typically NPC talking to or mob killing, etc...</param>        
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.AddTrigger(DOL.GS.Quests.eTriggerType)">
            <summary>
            Adds a trigger to the questpart for details about parameters look at documentation of used triggertype
            Both keyword and variable will be null.
            </summary>
            <param name="triggerType"></param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.AddTrigger(DOL.GS.Quests.eTriggerType,System.String)">
            <summary>
            Adds a trigger to the questpart for details about parameters look at documentation of used triggertype
            Variable I will be null
            </summary>
            <param name="triggerType">triggertype</param>
            <param name="keyword">keyword (K), meaning depends on triggertype</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.AddTrigger(DOL.GS.Quests.eTriggerType,System.String,System.Object)">
            <summary>
            Adds a trigger to the questpart for details about parameters look at documentation of used triggertype
            </summary>
            <param name="triggerType">triggertype</param>
            <param name="keyword">keyword (K), meaning depends on triggertype</param>
            <param name="var">variable (I), meaning depends on triggertype</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.AddTrigger(DOL.GS.Quests.IQuestTrigger)">
            <summary>
            Adds a trigger to the questpart for details about parameters look at documentation of used triggertype
            </summary>
            <param name="trigger"></param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.CheckTriggers(DOL.Events.DOLEvent,System.Object,System.EventArgs,DOL.GS.GamePlayer)">
            <summary>
            Checks the added triggers, this method is called whenever a event associated with this questparts quest
            or a manualy associated eventhandler is notified.
            </summary>
            <param name="e">DolEvent of notify call</param>
            <param name="sender">Sender of notify call</param>
            <param name="args">EventArgs of notify call</param>
            <param name="player">GamePlayer this call is related to, can be null</param>
            <returns>true if QuestPart should be executes, else false</returns>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.AddAction(DOL.GS.Quests.eActionType,System.Object)">
            <summary>
            Adds an Action to the QuestPart that will be performed once the QuestPart fires
            </summary>
            <param name="actionType">ActionType</param>
            <param name="p">First Action Variable, meaning depends on ActionType</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.AddAction(DOL.GS.Quests.eActionType,System.Object,System.Object)">
            <summary>
            Adds an Action to the QuestPart that will be performed once the QuestPart fires
            </summary>
            <param name="actionType">ActionType</param>
            <param name="p">First Action Variable, meaning depends on ActionType</param>
            <param name="q">Second Action Variable, meaning depends on ActionType</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.AddAction(DOL.GS.Quests.IQuestAction)">
            <summary>
            Adds an Action to the QuestPart that will be performed once the QuestPart fires
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.AddRequirement(DOL.GS.Quests.eRequirementType,System.Object)">
            <summary>
            Adds a new Requirement to the QuestPart.
            V will be null and Comparator will be eComparator.None
            </summary>
            <param name="requirementType">RequirementType</param>
            <param name="requirementN">First Requirement Variable, meaning depends on RequirementType</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.AddRequirement(DOL.GS.Quests.eRequirementType,System.Object,System.Object)">
            <summary>
            Adds a new Requirement to the QuestPart.
            Comparator will be eComparator.None
            </summary>
            <param name="requirementType">RequirementType</param>
            <param name="requirementN">First Requirement Variable, meaning depends on RequirementType</param>
            <param name="requirmentV">Second Requirement Variable, meaning depends on RequirementType</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.AddRequirement(DOL.GS.Quests.eRequirementType,System.Object,DOL.GS.Quests.eComparator)">
            <summary>
            Adds a new Requirement to the QuestPart.
            V will be null
            </summary>
            <param name="requirementType"></param>
            <param name="requirementN">First Requirement Variable, meaning depends on RequirementType</param>
            <param name="requirementComparator">Comparator used if some values are veeing compared</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.AddRequirement(DOL.GS.Quests.IQuestRequirement)">
            <summary>
            Adds a new Requirement to the QuestPart.        
            </summary>
            <param name="requ"></param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.AddRequirement(DOL.GS.Quests.eRequirementType,System.Object,System.Object,DOL.GS.Quests.eComparator)">
            <summary>
            Adds a new Requirement to the QuestPart.
            </summary>
            <param name="requirementType">RequirementType</param>
            <param name="requirementN">First Requirement Variable, meaning depends on RequirementType</param>
            <param name="requirementV">Second Requirement Variable, meaning depends on RequirementType</param>
            <param name="requirementComparator">Comparator used if some values are veeing compared</param>        
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.CheckRequirements(DOL.Events.DOLEvent,System.Object,System.EventArgs,DOL.GS.GamePlayer)">
            <summary>
            Checks the added requirements whenever a trigger associated with this questpart fires.(returns true)
            </summary>        
            <param name="e">DolEvent of notify call</param>
            <param name="sender">Sender of notify call</param>
            <param name="args">EventArgs of notify call</param>
            <param name="player">GamePlayer this call is related to, can be null</param>
            <returns>true if all Requirements forQuestPart where fullfilled, else false</returns>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            QuestPart Notify method 
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestPart.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs,DOL.GS.GamePlayer)">
            <summary>
            This method is called by the BaseQuest whenever a event associated with the Quest accurs
            or a automatically added eventhandler for the trigers fires
            </summary>
            <param name="e">DolEvent of notify call</param>
            <param name="sender">Sender of notify call</param>
            <param name="args">EventArgs of notify call</param>
            <param name="player">GamePlayer this call is related to, can be null</param>
        </member>
        <member name="P:DOL.GS.Quests.BaseQuestPart.QuestType">
            <summary>
            Type of quest this questpart belnogs to
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.BaseQuestPart.NPC">
            <summary>
            NPC assigned with questPart
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.BaseQuestPart.QuestPartAdded">
            <summary>
            Wether this questpart has already been added to a quest or not?
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.BaseQuestPart.Triggers">
            <summary>
            List of triggers that can initiate a questpart
            Note: At least one trigger must be fulfilled to fire questpart
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.BaseQuestPart.Actions">
            <summary>
            List of action that will be performed whenever this questpart fires, depending on requirements and triggers
            All actions of questpart will be performed once questpart fires
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.BaseQuestPart.Requirements">
            <summary>
            List of Requirements that must be fulfilled to fire this questpart
            Note: All Requirmenets must be fulfilled to fire questpart
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.MaxConcentrationCalculator">
            <summary>
            The Concentration point calculator
            
            BuffBonusCategory1 unused
            BuffBonusCategory2 unused
            BuffBonusCategory3 unused
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="F:DOL.GS.PropertyCalc.MaxConcentrationCalculator.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassWarden">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassNaturalist">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassWarden.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepBanner.AlbionModel">
            <summary>
            Albion unclaimed banner model
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepBanner.MidgardModel">
            <summary>
            Midgard unclaimed banner model
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepBanner.HiberniaModel">
            <summary>
            Hibernia unclaimed banner model
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepBanner.AlbionGuildModel">
            <summary>
            Albion claimed banner model
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepBanner.MidgardGuildModel">
            <summary>
            Midgard claimed banner model
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepBanner.HiberniaGuildModel">
            <summary>
            Hibernia claimed banner model
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepBanner.SaveIntoDatabase">
            <summary>
            save the banner to DB
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepBanner.ChangeGuild">
            <summary>
            This function when keep is claimed to change guild for banner
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepBanner.GetEmblem">
            <summary>
            get the emblem of of realm or of guild when keep is claimed
            </summary>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.RealmAbilities.DeterminationAbility">
            <summary>
            Determination
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.BedazzlingAuraEffect">
            <summary>
            Effect handler for Barrier Of Fortitude
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.BedazzlingAuraEffect.#ctor">
            <summary>
            Default constructor for AmelioratingMelodiesEffect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.BedazzlingAuraEffect.Start(DOL.GS.GamePlayer,System.Int32,System.Int32)">
            <summary>
            Called when effect is to be started
            </summary>
            <param name="player">The player to start the effect for</param>
            <param name="duration">The effectduration in secounds</param>
            <param name="value">The percentage additional value for all magic resis</param>
        </member>
        <member name="M:DOL.GS.Effects.BedazzlingAuraEffect.PlayerLeftWorld(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Called when a player leaves the game
            </summary>
            <param name="e">The event which was raised</param>
            <param name="sender">Sender of the event</param>
            <param name="args">EventArgs associated with the event</param>
        </member>
        <member name="M:DOL.GS.Effects.BedazzlingAuraEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect is to be cancelled
            </summary>
            <param name="playerCancel">Whether or not effect is player cancelled</param>
        </member>
        <member name="M:DOL.GS.Effects.BedazzlingAuraEffect.StartTimers">
            <summary>
            Starts the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.BedazzlingAuraEffect.StopTimers">
            <summary>
            Stops the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.BedazzlingAuraEffect.ExpireCallback(DOL.GS.RegionTimer)">
            <summary>
            The callback for when the effect expires
            </summary>
            <param name="timer">The ObjectTimerCallback object</param>
        </member>
        <member name="P:DOL.GS.Effects.BedazzlingAuraEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.BedazzlingAuraEffect.RemainingTime">
            <summary>
            Remaining time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.BedazzlingAuraEffect.Icon">
            <summary>
            Icon ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.BedazzlingAuraEffect.InternalID">
            <summary>
            Unique ID for identification in the effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.BedazzlingAuraEffect.DelveInfo">
            <summary>
            Delve information
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.PlayerTargetHandler">
            <summary>
            Handles player target changes
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerTargetHandler.HandlePacket(DOL.GS.GameClient,DOL.GS.GSPacketIn)">
            <summary>
            Handles every received packet
            </summary>
            <param name="client">The client that sent the packet</param>
            <param name="packet">The received packet data</param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.PlayerTargetHandler.ChangeTargetAction">
            <summary>
            Changes players target
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerTargetHandler.ChangeTargetAction.m_newTargetId">
            <summary>
            The new target OID
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerTargetHandler.ChangeTargetAction.m_targetInView">
            <summary>
            The 'target in view' flag
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerTargetHandler.ChangeTargetAction.m_examineTarget">
            <summary>
            The 'examine target' bit
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerTargetHandler.ChangeTargetAction.#ctor(DOL.GS.GamePlayer,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new TargetChangeAction
            </summary>
            <param name="actionSource">The action source</param>
            <param name="newTargetId">The new target OID</param>
            <param name="targetInView">The target LOS bit</param>
            <param name="examineTarget">The 'examine target' bit</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerTargetHandler.ChangeTargetAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PetWindowHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.PetWindowHandler.HandlePetCommandAction">
            <summary>
            Handles pet command actions
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PetWindowHandler.HandlePetCommandAction.m_aggroState">
            <summary>
            The pet aggro state
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PetWindowHandler.HandlePetCommandAction.m_walkState">
            <summary>
            The pet walk state
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PetWindowHandler.HandlePetCommandAction.m_command">
            <summary>
            The pet command
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PetWindowHandler.HandlePetCommandAction.#ctor(DOL.GS.GamePlayer,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new HandlePetCommandAction
            </summary>
            <param name="actionSource">The action source</param>
            <param name="aggroState">The pet aggro state</param>
            <param name="walkState">The pet walk state</param>
            <param name="command">The pet command</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PetWindowHandler.HandlePetCommandAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.GameNPCInventory">
            <summary>
            A class for individual NPC inventories
            this bypasses shared inventory templates which we sometimes need
            </summary>
        </member>
        <member name="T:DOL.GS.GameLivingInventory">
            <summary>
            Description rsume de GameLivingInventory.
            </summary>
        </member>
        <member name="T:DOL.GS.IGameInventory">
            <summary>
            Description résume de IGameInventory.
            </summary>		
        </member>
        <member name="F:DOL.GS.GameLivingInventory.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GameLivingInventory.m_items">
            <summary>
            The complete inventory of all living including
            for players the vault, the equipped items and the backpack
            and for mob the quest drops ect ...
            </summary>
        </member>
        <member name="F:DOL.GS.GameLivingInventory.m_changesCounter">
            <summary>
            Holds the begin changes counter for slot updates
            </summary>
        </member>
        <member name="F:DOL.GS.GameLivingInventory.m_changedSlots">
            <summary>
            Holds all changed slots
            </summary>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.#ctor">
            <summary>
            Constructs a new empty inventory
            </summary>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.LoadFromDatabase(System.String)">
            <summary>
            LoadFromDatabase
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.SaveIntoDatabase(System.String)">
            <summary>
            SaveIntoDatabase
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.GetValidInventorySlot(DOL.GS.eInventorySlot)">
            <summary>
            Check if the slot is valid in the inventory
            </summary>
            <param name="slot">SlotPosition to check</param>
            <returns>the slot if it's valid or eInventorySlot.Invalid if not</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.CountSlots(System.Boolean,DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Counts used/free slots between min and max
            </summary>
            <param name="countUsed"></param>
            <param name="minSlot"></param>
            <param name="maxSlot"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.CountItemTemplate(System.String,DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Count items of some type
            </summary>
            <param name="itemtemplateID">template to count</param>
            <param name="minSlot">first slot</param>
            <param name="maxSlot">last slot</param>
            <returns>number of matched items found</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.IsSlotsFree(System.Int32,DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Checks if specified count of slots is free
            </summary>
            <param name="count"></param>
            <param name="minSlot"></param>
            <param name="maxSlot"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.FindSlot(DOL.GS.eInventorySlot,DOL.GS.eInventorySlot,System.Boolean,System.Boolean)">
            <summary>
            Searches between two slots for the first or last full or empty slot
            </summary>
            <param name="first"></param>
            <param name="last"></param>
            <param name="searchFirst"></param>
            <param name="searchNull"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.FindFirstEmptySlot(DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Find the first empty slot in the inventory
            </summary>
            <param name="first">SlotPosition to start the search</param>
            <param name="last">SlotPosition to stop the search</param>
            <returns>the empty inventory slot or eInventorySlot.Invalid if they are all full</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.FindLastEmptySlot(DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Find the last empty slot in the inventory
            </summary>
            <param name="first">SlotPosition to start the search</param>
            <param name="last">SlotPosition to stop the search</param>
            <returns>the empty inventory slot or eInventorySlot.Invalid</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.FindFirstFullSlot(DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Find the first full slot in the inventory
            </summary>
            <param name="first">SlotPosition to start the search</param>
            <param name="last">SlotPosition to stop the search</param>
            <returns>the empty inventory slot or eInventorySlot.Invalid</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.FindLastFullSlot(DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Find the last full slot in the inventory
            </summary>
            <param name="first">SlotPosition to start the search</param>
            <param name="last">SlotPosition to stop the search</param>
            <returns>the empty inventory slot or eInventorySlot.Invalid</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.GetItemRange(DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Get all the items in the specified range
            </summary>
            <param name="minSlot">Slot Position where begin the search</param>
            <param name="maxSlot">Slot Position where stop the search</param>
            <returns>all items found</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.GetFirstItemByID(System.String,DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Searches for the first occurrence of an item with given
            ID between specified slots
            </summary>
            <param name="uniqueID">item ID</param>
            <param name="minSlot">fist slot for search</param>
            <param name="maxSlot">last slot for search</param>
            <returns>found item or null</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.GetFirstItemByObjectType(System.Int32,DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Searches for the first occurrence of an item with given
            objecttype between specified slots
            </summary>
            <param name="objectType">object Type</param>
            <param name="minSlot">fist slot for search</param>
            <param name="maxSlot">last slot for search</param>
            <returns>found item or null</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.GetFirstItemByName(System.String,DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Searches for the first occurrence of an item with given
            name between specified slots
            </summary>
            <param name="name">name</param>
            <param name="minSlot">fist slot for search</param>
            <param name="maxSlot">last slot for search</param>
            <returns>found item or null</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.AddItem(DOL.GS.eInventorySlot,DOL.Database.InventoryItem)">
            <summary>
            Adds an item to the inventory and DB
            </summary>
            <param name="slot"></param>
            <param name="item"></param>
            <returns>The eInventorySlot where the item has been added</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.RemoveItem(DOL.Database.InventoryItem)">
            <summary>
            Removes an item from the inventory
            </summary>
            <param name="item">the item to remove</param>
            <returns>true if successfull</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.AddCountToStack(DOL.Database.InventoryItem,System.Int32)">
            <summary>
            Adds count of items to the inventory item
            </summary>
            <param name="item"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.RemoveCountFromStack(DOL.Database.InventoryItem,System.Int32)">
            <summary>
            Removes count of items from the inventory item
            </summary>
            <param name="item">the item to remove</param>
            <param name="count">the count of items to be removed from the stack</param>
            <returns>true one item removed</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.GetItem(DOL.GS.eInventorySlot)">
            <summary>
            Get the item to the inventory in the specified slot
            </summary>
            <param name="slot">SlotPosition</param>
            <returns>the item in the specified slot if the slot is valid and null if not</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.MoveItem(DOL.GS.eInventorySlot,DOL.GS.eInventorySlot,System.Int32)">
            <summary>
            Exchange two Items in form specified slot
            </summary>
            <param name="fromSlot">Source slot</param>
            <param name="toSlot">Destination slot</param>
            <returns>true if successfull false if not</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.AddTemplate(DOL.Database.ItemTemplate,System.Int32,DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Adds needed amount of items to inventory if there
            is enough space else nothing is done
            </summary>
            <param name="template">The ItemTemplate</param>
            <param name="count">The count of items to add</param>
            <param name="minSlot">The first slot</param>
            <param name="maxSlot">The last slot</param>
            <returns>True if all items were added</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.RemoveTemplate(System.String,System.Int32,DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Removes needed amount of items from inventory if
            enough amount of items are in inventory
            </summary>
            <param name="templateID">The ItemTemplate ID</param>
            <param name="count">The count of items to add</param>
            <param name="minSlot">The first slot</param>
            <param name="maxSlot">The last slot</param>
            <returns>True if all items were added</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.CombineItems(DOL.Database.InventoryItem,DOL.Database.InventoryItem)">
            <summary>
            Combine 2 items together if possible
            </summary>
            <param name="fromItem">First Item</param>
            <param name="toItem">Second Item</param>
            <returns>true if items combined successfully</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.StackItems(System.Int32,System.Int32,System.Int32)">
            <summary>
            Stack an item with another one
            </summary>
            <param name="fromSlot">First SlotPosition</param>
            <param name="toSlot">Second SlotPosition</param>
            <param name="itemCount">How many items to move</param>
            <returns>true if items stacked successfully</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.ExchangeItems(System.Int32,System.Int32)">
            <summary>
            Exchange one item position with another one
            </summary>
            <param name="fromSlot">First SlotPosition</param>
            <param name="toSlot">Second SlotPosition</param>
            <returns>true if items exchanged successfully</returns>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.BeginChanges">
            <summary>
            Increments changes counter
            </summary>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.CommitChanges">
            <summary>
            Commits changes if all started changes are finished
            </summary>
        </member>
        <member name="M:DOL.GS.GameLivingInventory.UpdateChangedSlots">
            <summary>
            Updates changed slots, inventory is already locked
            </summary>
        </member>
        <member name="P:DOL.GS.GameLivingInventory.VisibleItems">
            <summary>
            Get the list of all visible items
            </summary>
        </member>
        <member name="P:DOL.GS.GameLivingInventory.EquippedItems">
            <summary>
            Get the list of all equipped items
            </summary>
        </member>
        <member name="P:DOL.GS.GameLivingInventory.AllItems">
            <summary>
            Get the list of all items in the inventory
            </summary>
        </member>
        <member name="P:DOL.GS.GameLivingInventory.InventoryWeight">
            <summary>
            Gets the inventory weight
            </summary>
        </member>
        <member name="M:DOL.GS.GameNPCInventory.#ctor(DOL.GS.GameNpcInventoryTemplate)">
            <summary>
            Creates a Guard Inventory from an Inventory Template
            </summary>
            <param name="template"></param>
        </member>
        <member name="T:DOL.GS.GameMoney">
            <summary>
            Zusammenfassung für GameLoot.
            </summary>
        </member>
        <member name="T:DOL.GS.GameStaticItemTimed">
            <summary>
            Holds a static item in the world that will disappear after some interval
            </summary>
        </member>
        <member name="F:DOL.GS.GameStaticItemTimed.m_removeDelay">
            <summary>
            How long this object can stay in the world without being removed
            </summary>
        </member>
        <member name="F:DOL.GS.GameStaticItemTimed.m_removeItemAction">
            <summary>
            The timer that will remove this object from the world after a delay
            </summary>
        </member>
        <member name="M:DOL.GS.GameStaticItemTimed.#ctor">
            <summary>
            Creates a new static item that will disappear after 2 minutes
            </summary>
        </member>
        <member name="M:DOL.GS.GameStaticItemTimed.#ctor(System.Int32)">
            <summary>
            Creates a new static item that will disappear after the given
            tick-count
            </summary>
            <param name="vanishTicks">milliseconds after which the item will vanish</param>
        </member>
        <member name="M:DOL.GS.GameStaticItemTimed.Delete">
            <summary>
            Removes this object from the world
            </summary>
        </member>
        <member name="M:DOL.GS.GameStaticItemTimed.AddToWorld">
            <summary>
            Adds this object to the world
            </summary>
            <returns>true if successfull</returns>
        </member>
        <member name="P:DOL.GS.GameStaticItemTimed.RemoveDelay">
            <summary>
            Gets or Sets the delay in gameticks after which this object is removed
            </summary>
        </member>
        <member name="T:DOL.GS.GameStaticItemTimed.RemoveItemAction">
            <summary>
            The callback function that will remove this bag after some time
            </summary>
        </member>
        <member name="M:DOL.GS.GameStaticItemTimed.RemoveItemAction.#ctor(DOL.GS.GameStaticItemTimed)">
            <summary>
            Constructs a new remove action
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:DOL.GS.GameStaticItemTimed.RemoveItemAction.OnTick">
            <summary>
            The callback function that will remove this bag after some time
            </summary>
        </member>
        <member name="F:DOL.GS.GameMoney.m_copperValue">
            <summary>
            The value of copper in this coinbag
            </summary>
        </member>
        <member name="F:DOL.GS.GameMoney.NAMES">
            <summary>
            The list of money loot names
            </summary>
        </member>
        <member name="M:DOL.GS.GameMoney.#ctor(System.Int64)">
            <summary>
            Constructs a new Money bag with a value that will disappear after 2 minutes
            </summary>
            <param name="copperValue">the coppervalue of this bag</param>
        </member>
        <member name="M:DOL.GS.GameMoney.IsItemMoney(System.String)">
            <summary>
            Checks whether the name is money item name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameMoney.#ctor(System.Int64,DOL.GS.GameObject)">
            <summary>
            Constructs a new Money bag with a value and the position of the dropper
            It will disappear after 2 minutes
            </summary>
            <param name="copperValue">the coppervalue of this bag</param>
            <param name="dropper">the gameobject that dropped this bag</param>
        </member>
        <member name="P:DOL.GS.GameMoney.Mithril">
            <summary>
            Returns the number of mithril pieces in this bag
            </summary>
        </member>
        <member name="P:DOL.GS.GameMoney.Platinum">
            <summary>
            Returns the number of platinum pieces in this bag
            </summary>
        </member>
        <member name="P:DOL.GS.GameMoney.Gold">
            <summary>
            Returns the number of gold pieces in this bag
            </summary>
        </member>
        <member name="P:DOL.GS.GameMoney.Silver">
            <summary>
            Returns the number of silver pieces in this bag
            </summary>
        </member>
        <member name="P:DOL.GS.GameMoney.Copper">
            <summary>
            Returns the number of copper pieces in this bag
            </summary>
        </member>
        <member name="P:DOL.GS.GameMoney.TotalCopper">
            <summary>
            Gets/Sets the total copper value of this bag
            </summary>
        </member>
        <member name="T:DOL.Events.ReceiveItemEventArgs">
            <summary>
            Holds the arguments for the ReceiveItem event of GameLivings
            </summary>
        </member>
        <member name="M:DOL.Events.ReceiveItemEventArgs.#ctor(DOL.GS.GameLiving,DOL.GS.GameLiving,DOL.Database.InventoryItem)">
            <summary>
            Constructs new ReceiveItemEventArgs
            </summary>
            <param name="source">the source of the item</param>
            <param name="target">the target of the item</param>
            <param name="item">the item to transfer</param>
        </member>
        <member name="P:DOL.Events.ReceiveItemEventArgs.Source">
            <summary>
            Gets the GameLiving who gives the item
            </summary>
        </member>
        <member name="P:DOL.Events.ReceiveItemEventArgs.Target">
            <summary>
            Gets the GameLiving who receives the item
            </summary>
        </member>
        <member name="P:DOL.Events.ReceiveItemEventArgs.Item">
            <summary>
            Gets the item to transfer
            </summary>
        </member>
        <member name="T:DOL.Events.PlayerPromotedEventArgs">
            <summary>
            Holds the arguments for the PlayerPromoted event of GameMerchants
            </summary>
        </member>
        <member name="M:DOL.Events.PlayerPromotedEventArgs.#ctor(DOL.GS.GamePlayer,DOL.GS.IClassSpec)">
            <summary>
            Constructs a new PlayerPromoted event argument class
            </summary>
            <param name="player">the player that was promoted</param>
            <param name="oldClass">the player old class</param>
        </member>
        <member name="P:DOL.Events.PlayerPromotedEventArgs.Player">
            <summary>
            Gets the player that was promoted
            </summary>
        </member>
        <member name="P:DOL.Events.PlayerPromotedEventArgs.OldClass">
            <summary>
            Gets the class player was using before promotion
            </summary>
        </member>
        <member name="T:DOL.Events.AttackFinishedEventArgs">
            <summary>
            Holds the arguments for the AttackFinished event of GameLivings
            </summary>
        </member>
        <member name="F:DOL.Events.AttackFinishedEventArgs.m_attackData">
            <summary>
            The attack data
            </summary>
        </member>
        <member name="M:DOL.Events.AttackFinishedEventArgs.#ctor(DOL.GS.AttackData)">
            <summary>
            Constructs a new AttackFinished
            </summary>
            <param name="attackData">The attack data</param>
        </member>
        <member name="P:DOL.Events.AttackFinishedEventArgs.AttackData">
            <summary>
            Gets the attack data
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.RapidFireEffect">
            <summary>
            The helper effect for sure shot
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.RapidFireEffect.m_player">
            <summary>
            The effect owner
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.RapidFireEffect.#ctor">
            <summary>
            Creates a new sure shot effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.RapidFireEffect.Start(DOL.GS.GamePlayer)">
            <summary>
            Start the effect on player
            </summary>
            <param name="player">The effect target</param>
        </member>
        <member name="M:DOL.GS.Effects.RapidFireEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect must be canceled
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.RapidFireEffect.m_id">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.RapidFireEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.RapidFireEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in seconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.RapidFireEffect.Icon">
            <summary>
            Icon to show on players, can be id
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.RapidFireEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.RapidFireEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.DatabaseConverters.IDatabaseConverter">
            <summary>
            Interface for all database format converters
            </summary>
        </member>
        <member name="M:DOL.GS.DatabaseConverters.IDatabaseConverter.ConvertDatabase">
            <summary>
            Converts the database to new version specified in attribute
            </summary>
        </member>
        <member name="T:DOL.GS.WorldMgr">
            <summary>
            The WorldMgr is used to retrieve information and objects from
            the world. It contains lots of functions that can be used. It
            is a static class.
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.PING_TIMEOUT">
            <summary>
            Ping timeout definition in seconds
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.MAX_EXPFORKILL_DISTANCE">
            <summary>
            Holds the distance which player get experience from a living object
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.WHISPER_DISTANCE">
            <summary>
            Is the distance a whisper can be heard
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.SAY_DISTANCE">
            <summary>
            Is the distance a say is broadcast
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.INFO_DISTANCE">
            <summary>
            Is the distance info messages are broadcast (player attacks, spell cast, player stunned/rooted/mezzed, loot dropped)
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.DEATH_MESSAGE_DISTANCE">
            <summary>
            Is the distance a death message is broadcast when player dies
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.YELL_DISTANCE">
            <summary>
            Is the distance a yell is broadcast
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.GIVE_ITEM_DISTANCE">
            <summary>
            Is the distance at which livings can give a item
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.INTERACT_DISTANCE">
            <summary>
            Is the distance at which livings can interact
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.VISIBILITY_DISTANCE">
            <summary>
            Is the distance an player can see
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.VISIBILITY_SQUARE_DISTANCE">
            <summary>
            Is the square distance a player can see
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.OBJ_UPDATE_DISTANCE">
            <summary>
            Holds the distance at which objects are updated
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.PLAYER_UPDATE_TIME">
            <summary>
            How often players are updated
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.PICKUP_DISTANCE">
            <summary>
            How close a player can be to pick up loot
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.DAY">
            <summary>
            This constant defines the day constant
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_REG_ID">
            <summary>
            Region ID INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_REG_IP">
            <summary>
            Region IP INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_REG_PORT">
            <summary>
            Region port INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_REG_DESC">
            <summary>
            Region description INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_REG_DIVING_ENABLE">
            <summary>
            Region diving enable INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_REG_HOUSING_ENABLE">
            <summary>
            Region diving enable INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_REG_WATER_LEVEL">
            <summary>
            Region water level INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_REG_EXPANSION">
            <summary>
            Region expansion INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_ZONE_ZONEID">
            <summary>
            Zone ID INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_ZONE_REGIONID">
            <summary>
            Zone region INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_ZONE_DESC">
            <summary>
            Zone description INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_ZONE_OFFX">
            <summary>
            Zone X offset INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_ZONE_OFFY">
            <summary>
            Zone Y offset INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_ZONE_WIDTH">
            <summary>
            Zone width INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.ENTRY_ZONE_HEIGHT">
            <summary>
            Zone height INI field
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.m_regions">
            <summary>
            This hashtable holds all regions in the world
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.m_zones">
            <summary>
            This hashtable holds all zones in the world, for easy access
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.m_clients">
            <summary>
            This array holds all gameclients connected to the game
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.m_pingCheckTimer">
            <summary>
            Timer for ping timeout checks
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.m_NPCUpdateThread">
            <summary>
            This thread is used to update the NPCs around a player
            as fast as possible
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.m_dayStartTick">
            <summary>
            This holds the tick when the day started
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.m_dayIncrement">
            <summary>
            This holds the speed of our days
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.m_dayResetTimer">
            <summary>
            A timer that will send the daytime to all playing
            clients after a certain intervall;
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.m_relocationThread">
            <summary>
            Relocation threads for relocation of zones
            </summary>
        </member>
        <member name="F:DOL.GS.WorldMgr.m_regionTimeManagers">
            <summary>
            Holds all region timers
            </summary>
        </member>
        <member name="M:DOL.GS.WorldMgr.EarlyInit(DOL.GS.RegionData[]@)">
            <summary>
            Initializes the most important things that is needed for some code
            </summary>
            <param name="regionsData">The loaded regions data</param>
        </member>
        <member name="M:DOL.GS.WorldMgr.Init(DOL.GS.RegionData[])">
            <summary>
            Initializes the WorldMgr. This function must be called
            before the WorldMgr can be used!
            </summary>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetRegionTimeManagers">
            <summary>
            Gets all region time managers
            </summary>
            <returns>A copy of region time managers array</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.PingCheck(System.Object)">
            <summary>
            perform the ping timeout check and disconnect clients that timed out
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetRelocateRegionsStacktrace">
            <summary>
            Gets the RelocateRegions() thread stacktrace
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.DayReset(System.Object)">
            <summary>
            This timer callback resets the day on all clients
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:DOL.GS.WorldMgr.StartDay(System.UInt32,System.UInt32)">
            <summary>
            Starts a new day with a certain increment
            </summary>
            <param name="dayInc"></param>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetCurrentDayTime">
            <summary>
            Gets the current daytime
            </summary>
            <returns>current time</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetDayIncrement">
            <summary>
            Returns the day increment
            </summary>
            <returns>the day increment</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetNpcUpdateStacktrace">
            <summary>
            Gets the npc update thread stacktrace
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.NPCUpdateThreadStart">
            <summary>
            This thread updates the NPCs around the player at very short
            intervalls! But since the update is very quick the thread will
            sleep most of the time!
            </summary>
        </member>
        <member name="M:DOL.GS.WorldMgr.Exit">
            <summary>
            Cleans up and stops all the RegionMgr tasks inside
            the regions.
            </summary>
        </member>
        <member name="M:DOL.GS.WorldMgr.RegisterRegion(DOL.GS.GameTimer.TimeManager,DOL.GS.RegionData)">
            <summary>
            Creates and adds a new region to the WorldMgr
            </summary>
            <param name="time">Time manager for the region</param>
            <param name="data">The region data</param>
            <returns>Registered region</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetRegionList">
            <summary>
            Creates an array of region entries
            </summary>
            <returns>An array of regions available on the server</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.RegisterZone(System.UInt16,System.UInt16,System.String,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Registers a Zone into a Region
            </summary>
            <param name="zoneID">ID of the Zone</param>
            <param name="regionID">ID of the Region the Zone belongs to</param>
            <param name="desc">Description of Zone</param>
            <param name="offx">X offset within Region</param>
            <param name="offy">Y offset within Region</param>
            <param name="width">Width of Zone</param>
            <param name="height">Height of Zone</param>
        </member>
        <member name="M:DOL.GS.WorldMgr.StartRegionMgrs">
            <summary>
            Starts all RegionMgrs inside the Regions
            </summary>
            <returns>true</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.StopRegionMgrs">
            <summary>
            Stops all Regionmgrs inside the Regions
            </summary>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetRegion(System.UInt16)">
            <summary>
            Fetch a Region by it's ID
            </summary>
            <param name="regionID">ID to search</param>
            <returns>Region or null if not found</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetZone(System.UInt16)">
            <summary>
            Gets a Zone object by it's ID
            </summary>
            <param name="zoneID">the zoneID</param>
            <returns>the zone object or null</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.CreateSessionID(DOL.GS.GameClient)">
            <summary>
            Creates a new SessionID for a GameClient object
            </summary>
            <param name="obj">The GameClient for which we need an ID</param>
            <returns>The new ID or -1 if none free</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetObjectsByNameFromRegion(System.String,System.UInt16,DOL.GS.PacketHandler.eRealm,System.Type)">
            <summary>
            Searches for all objects with the given name, from a specific region and realm
            </summary>
            <param name="name">The name of the object to search</param>
            <param name="regionID">The region to search</param>
            <param name="realm">The realm of the object we search!</param>
            <param name="objectType">The type of the object you search</param>
            <returns>All objects with the specified parameters</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetObjectsByName(System.String,DOL.GS.PacketHandler.eRealm,System.Type)">
            <summary>
            Searches for all objects with the given name and realm in ALL regions!
            </summary>
            <param name="name">The name of the object to search</param>
            <param name="realm">The realm of the object we search!</param>
            <param name="objectType">The type of the object you search</param>
            <returns>All objects with the specified parameters</returns>b
        </member>
        <member name="M:DOL.GS.WorldMgr.GetNPCsByNameFromRegion(System.String,System.UInt16,DOL.GS.PacketHandler.eRealm)">
            <summary>
            Searches for all NPCs with the given name, from a specific region and realm
            </summary>
            <param name="name">The name of the object to search</param>
            <param name="regionID">The region to search</param>
            <param name="realm">The realm of the object we search!</param>
            <returns>All NPCs with the specified parameters</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetNPCsByName(System.String,DOL.GS.PacketHandler.eRealm)">
            <summary>
            Searches for all NPCs with the given name and realm in ALL regions!
            </summary>
            <param name="name">The name of the object to search</param>
            <param name="realm">The realm of the object we search!</param>
            <returns>All NPCs with the specified parameters</returns>b
        </member>
        <member name="M:DOL.GS.WorldMgr.GetClientFromID(System.Int32)">
            <summary>
            Fetch a GameClient based on it's ID
            </summary>
            <param name="id">ID to search</param>
            <returns>The found GameClient or null if not found</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.RemoveClient(DOL.GS.GameClient)">
            <summary>
            Removes a GameClient and free's it's ID again!
            </summary>
            <param name="entry">The GameClient to be removed</param>
        </member>
        <member name="M:DOL.GS.WorldMgr.RemoveSessionID(System.Int32)">
            <summary>
            Removes a GameClient based on it's ID
            </summary>
            <param name="id">The SessionID to free</param>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetDistance(DOL.GS.GameObject,DOL.GS.GameObject)">
            <summary>
            Get's the distance of two GameObjects
            </summary>
            <param name="obj1">Object1</param>
            <param name="obj2">Object2</param>
            <returns>The distance in units or -1 if they are not the same Region</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetDistance(DOL.GS.GameObject,DOL.GS.GameObject,System.Double)">
            <summary>
            Get's the distance of two GameObjects
            </summary>
            <param name="obj1">Object1</param>
            <param name="obj2">Object2</param>
            <param name="zfactor">Factor for Z distance use lower 0..1 to lower Z influence</param>
            <returns>The distance in units or -1 if they are not the same Region</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the distance of two arbitary points in space
            </summary>
            <param name="x1">X of Point1</param>
            <param name="y1">Y of Point1</param>
            <param name="z1">Z of Point1</param>
            <param name="x2">X of Point2</param>
            <param name="y2">Y of Point2</param>
            <param name="z2">Z of Point2</param>
            <returns>The distance</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Gets the distance of two arbitary points in space
            </summary>
            <param name="x1">X of Point1</param>
            <param name="y1">Y of Point1</param>
            <param name="z1">Z of Point1</param>
            <param name="x2">X of Point2</param>
            <param name="y2">Y of Point2</param>
            <param name="z2">Z of Point2</param>
            <param name="zfactor">Factor for Z distance use lower 0..1 to lower Z influence</param>
            <returns>The distance</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetDistance(DOL.GS.GameObject,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the distance of an Object to an arbitary point
            </summary>
            <param name="obj">GameObject used as Point1</param>
            <param name="x">X of Point2</param>
            <param name="y">Y of Point2</param>
            <param name="z">Z of Point2</param>
            <returns>The distance</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetClientsOfRealmCount(System.Int32)">
            <summary>
            Returns the number of playing Clients inside a realm
            </summary>
            <param name="realmID">ID of Realm (1=Alb, 2=Mid, 3=Hib)</param>
            <returns>Client count of that realm</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetClientsOfRealm(System.Int32)">
            <summary>
            Returns an array of GameClients currently playing from a specific realm
            </summary>
            <param name="realmID">ID of Realm (1=Alb, 2=Mid, 3=Hib)</param>
            <returns>An ArrayList of clients</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetClientsOfRegionCount(System.UInt16)">
            <summary>
            Returns the number of playing Clients in a certain Region
            </summary>
            <param name="regionID">The ID of the Region</param>
            <returns>Number of playing Clients in that Region</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetClientsOfRegion(System.UInt16)">
            <summary>
            Returns a list of playing clients inside a region
            </summary>
            <param name="regionID">The ID of the Region</param>
            <returns>Array of GameClients from that Region</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetClientByAccountName(System.String,System.Boolean)">
            <summary>
            Finds a GameClient by the AccountName
            </summary>
            <param name="accountName">AccountName to search</param>
            <param name="exactMatch">true if AccountName match exactly</param>
            <returns>The found GameClient or null</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetClientByPlayerName(System.String,System.Boolean,System.Boolean)">
            <summary>
            Find a GameClient by the Player's name
            Case-insensitive, make sure you use returned Player.Name instead of what player typed.
            </summary>
            <param name="playerName">Name to search</param>
            <param name="exactMatch">true if AccountName match exactly</param>
            <returns>The found GameClient or null</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetClientByPlayerNameAndRealm(System.String,System.Int32,System.Boolean)">
            <summary>
            Find a GameClient by the Player's name.
            Case-insensitive now, make sure you use returned Player.Name instead of what player typed.
            </summary>
            <param name="playerName">Name to search</param>
            <param name="realmID">search in: 0=all realms or player.Realm</param>
            <returns>The found GameClient or null</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GuessClientByPlayerNameAndRealm(System.String,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Guess a GameClient by first letters of Player's name
            Case-insensitive, make sure you use returned Player.Name instead of what player typed.
            </summary>
            <param name="playerName">Name to search</param>
            <param name="realmID">search in: 0=all realms or player.Realm</param>
            <param name="result">returns: 1=no name found, 2=name is not unique, 3=exact match, 4=guessed name</param>
            <returns>The found GameClient or null</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetClientByPlayerNameFromRegion(System.String,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Find a GameClient by the Player's name from a specific region
            </summary>
            <param name="playerName">Name to search</param>
            <param name="regionID">Region ID of region to search through</param>
            <param name="exactMatch">true if the Name must match exactly</param>
            <returns>The first found GameClient or null</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetAllPlayingClients">
            <summary>
            Gets a copy of all playing clients
            </summary>
            <returns>ArrayList of playing GameClients</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetAllPlayingClientsCount">
            <summary>
            Returns the number of all playing clients
            </summary>
            <returns>Count of all playing clients</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetAllClients">
            <summary>
            Gets a copy of ALL clients no matter at what state they are
            </summary>
            <returns>ArrayList of GameClients</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetObjectByIDFromRegion(System.UInt16,System.UInt16)">
            <summary>
            Fetch an Object from a specific Region by it's ID
            </summary>
            <param name="regionID">Region ID of Region to search through</param>
            <param name="oID">Object ID to search</param>
            <returns>GameObject found in the Region or null</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetObjectTypeByIDFromRegion(System.UInt16,System.UInt16,System.Type)">
            <summary>
            Fetch an Object of specific type from a specific Region
            </summary>
            <param name="regionID">Region ID of Regin to search through</param>
            <param name="oID">Object ID to search</param>
            <param name="type">Type of Object to search</param>
            <returns>GameObject of specific type or null if not found</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetPlayersCloseToSpot(System.UInt16,System.Int32,System.Int32,System.Int32,System.UInt16,System.Boolean)">
            <summary>
            Returns an IEnumerator of GamePlayers that are close to a certain
            spot in the region
            </summary>
            <param name="regionid">Region to search</param>
            <param name="x">X inside region</param>
            <param name="y">Y inside region</param>
            <param name="z">Z inside region</param>
            <param name="withDistance">Wether or not to return the objects with distance</param>
            <param name="radiusToCheck">Radius to sarch for GameClients</param>
            <returns>IEnumerator that can be used to go through all players</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetPlayersCloseToSpot(System.UInt16,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Returns an IEnumerator of GamePlayers that are close to a certain
            spot in the region
            </summary>
            <param name="regionid">Region to search</param>
            <param name="x">X inside region</param>
            <param name="y">Y inside region</param>
            <param name="z">Z inside region</param>
            <param name="radiusToCheck">Radius to sarch for GameClients</param>
            <returns>IEnumerator that can be used to go through all players</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetPlayersCloseToObject(DOL.GS.GameObject,System.UInt16,System.Boolean)">
            <summary>
            Returns an IEnumerator of GamePlayers close to another GameObject
            </summary>
            <param name="obj">GameObject to check</param>
            <param name="radiusToCheck">Radius around GameObject to check for clients</param>
            <param name="withDistance">Wether or not to return the objects with distance</param>
            <returns>IEnumerator of players close to the target object</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetPlayersCloseToObject(DOL.GS.GameObject,System.UInt16)">
            <summary>
            Returns an IEnumerator of GamePlayers close to another GameObject
            </summary>
            <param name="obj">GameObject to check</param>
            <param name="radiusToCheck">Radius around GameObject to check for clients</param>
            <returns>IEnumerator of players close to the target object</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetNPCsCloseToSpot(System.UInt16,System.Int32,System.Int32,System.Int32,System.UInt16,System.Boolean)">
            <summary>
            Returns an IEnumerator of GameNPCs that are close to a certain
            spot in the region
            </summary>
            <param name="regionid">Region to search</param>
            <param name="x">X inside region</param>
            <param name="y">Y inside region</param>
            <param name="z">Z inside region</param>
            <param name="radiusToCheck">Radius to sarch for GameNPCs</param>
            <param name="withDistance">Wether or not to return the objects with distance</param>
            <returns>IEnumerator that can be used to go through all NPCs</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetNPCsCloseToSpot(System.UInt16,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Returns an IEnumerator of GameNPCs that are close to a certain
            spot in the region
            </summary>
            <param name="regionid">Region to search</param>
            <param name="x">X inside region</param>
            <param name="y">Y inside region</param>
            <param name="z">Z inside region</param>
            <param name="radiusToCheck">Radius to sarch for GameNPCs</param>
            <returns>IEnumerator that can be used to go through all NPCs</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetNPCsCloseToObject(DOL.GS.GameObject,System.UInt16,System.Boolean)">
            <summary>
            Returns an IEnumerator of GameNPCs close to another GameObject
            </summary>
            <param name="obj">GameObject to check</param>
            <param name="radiusToCheck">Radius around GameObject to check for NPCs</param>
            <param name="withDistance">Wether or not to return the objects with distance</param>
            <returns>IEnumerator of NPCs close to the target object</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetNPCsCloseToObject(DOL.GS.GameObject,System.UInt16)">
            <summary>
            Returns an IEnumerator of GameNPCs close to another GameObject
            </summary>
            <param name="obj">GameObject to check</param>
            <param name="radiusToCheck">Radius around GameObject to check for NPCs</param>
            <returns>IEnumerator of NPCs close to the target object</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetItemsCloseToSpot(System.UInt16,System.Int32,System.Int32,System.Int32,System.UInt16,System.Boolean)">
            <summary>
            Returns an IEnumerator of GameItems that are close to a certain
            spot in the region
            </summary>
            <param name="regionid">Region to search</param>
            <param name="x">X inside region</param>
            <param name="y">Y inside region</param>
            <param name="z">Z inside region</param>
            <param name="radiusToCheck">Radius to sarch for GameItems</param>
            <param name="withDistance">Wether or not to return the objects with distance</param>
            <returns>IEnumerator that can be used to go through all items</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetItemsCloseToSpot(System.UInt16,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Returns an IEnumerator of GameItems that are close to a certain
            spot in the region
            </summary>
            <param name="regionid">Region to search</param>
            <param name="x">X inside region</param>
            <param name="y">Y inside region</param>
            <param name="z">Z inside region</param>
            <param name="radiusToCheck">Radius to sarch for GameItems</param>
            <returns>IEnumerator that can be used to go through all items</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetItemsCloseToObject(DOL.GS.GameObject,System.UInt16,System.Boolean)">
            <summary>
            Returns an IEnumerator of GameItems close to another GameObject
            </summary>
            <param name="obj">GameObject to check</param>
            <param name="radiusToCheck">Radius around GameObject to check for items</param>
            <param name="withDistance">Wether or not to return the objects with distance</param>
            <returns>IEnumerator of items close to the target object</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.GetItemsCloseToObject(DOL.GS.GameObject,System.UInt16)">
            <summary>
            Returns an IEnumerator of GameItems close to another GameObject
            </summary>
            <param name="obj">GameObject to check</param>
            <param name="radiusToCheck">Radius around GameObject to check for items</param>
            <returns>IEnumerator of items close to the target object</returns>
        </member>
        <member name="M:DOL.GS.WorldMgr.SaveToDatabase">
            <summary>
            Saves the world to the DB
            </summary>
        </member>
        <member name="M:DOL.GS.WorldMgr.SavePlayers">
            <summary>
            Saves all players into the database.
            </summary>
            <returns>The count of players saved</returns>
        </member>
        <member name="T:DOL.GS.WeatherMgr">
            <summary>
            The WeatherMgr takes care of rain/snow and other goodies inside
            all the regions
            </summary>
        </member>
        <member name="F:DOL.GS.WeatherMgr.CHECK_INTERVAL">
            <summary>
            The interval in which the weather chance will be tested, in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.WeatherMgr.CHANCE">
            <summary>
            The chance to start the weather.
            Will be tested every CHECK_INTERVAL milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.WeatherMgr.ZONE_WIDTH">
            <summary>
            The width of zone
            </summary>
        </member>
        <member name="F:DOL.GS.WeatherMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.WeatherMgr.m_startX">
            <summary>
            The starting line of the weather
            </summary>
        </member>
        <member name="F:DOL.GS.WeatherMgr.m_width">
            <summary>
            The duration of the weather that will be sent to the client
            SH: Actually I think this is the size of the weather 
            ... the width in coordinates
            </summary>
        </member>
        <member name="F:DOL.GS.WeatherMgr.m_fogDiffusion">
            <summary>
            The fog diffusion of this weather
            </summary>
        </member>
        <member name="F:DOL.GS.WeatherMgr.m_speed">
            <summary>
            The speed of this weather in coordinates/second
            </summary>
        </member>
        <member name="F:DOL.GS.WeatherMgr.m_intensity">
            <summary>
            The intensity of this weather
            </summary>
        </member>
        <member name="F:DOL.GS.WeatherMgr.m_regionID">
            <summary>
            For which region is this weather?
            </summary>
        </member>
        <member name="F:DOL.GS.WeatherMgr.m_weatherTimer">
            <summary>
            The gametimer for this weather, which will check the start
            </summary>
        </member>
        <member name="F:DOL.GS.WeatherMgr.m_weatherStartTick">
            <summary>
            The tickcount when this weather started
            </summary>
        </member>
        <member name="F:DOL.GS.WeatherMgr.m_weathers">
            <summary>
            Holds all weather managers currently active
            </summary>
        </member>
        <member name="M:DOL.GS.WeatherMgr.#ctor(System.UInt16)">
            <summary>
            Constructs a new RegionWeather object for a given region
            </summary>
            <param name="regionID"></param>
        </member>
        <member name="M:DOL.GS.WeatherMgr.GetWeatherForRegion(System.UInt16)">
            <summary>
            Gets a specific weather manager for a region
            </summary>
            <param name="regionID">The region to retrieve the weather manager for</param>
            <returns>The retrieved weather manager or null if none for this region</returns>
        </member>
        <member name="M:DOL.GS.WeatherMgr.CheckWeatherTimerCallback(System.Object)">
            <summary>
            This is the GameTimer callback that will be called to test if to start
            a weather or not
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:DOL.GS.WeatherMgr.StartStorm">
            <summary>
            This method forces the weather for this region to start with a random intensity,
            no matter if it is already active or not
            </summary>
        </member>
        <member name="M:DOL.GS.WeatherMgr.RestartStorm">
            <summary>
            Restarts the storm with the current storm parameters
            </summary>
        </member>
        <member name="M:DOL.GS.WeatherMgr.StartStorm(System.UInt32,System.UInt32,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Starts the storm in the region
            </summary>
            <param name="x">The starting line of the storm in coordinates</param>
            <param name="duration">The cloude width in coordinates</param>
            <param name="speed">The speed of the storm in coordinates/second</param>
            <param name="intensity">The intensity of the storm</param>
        </member>
        <member name="M:DOL.GS.WeatherMgr.StopStorm">
            <summary>
            This method forces the weather for this region to stop if it is running
            </summary>
        </member>
        <member name="M:DOL.GS.WeatherMgr.UpdatePlayerWeather(DOL.GS.GamePlayer)">
            <summary>
            This method will be called from the PlayerInitRequestHandler
            </summary>
            <param name="player">The player entering the region</param>
        </member>
        <member name="M:DOL.GS.WeatherMgr.Load">
            <summary>
            Initializes all weather manager instances for the regions
            </summary>
            <returns>true if successfull</returns>
        </member>
        <member name="M:DOL.GS.WeatherMgr.Unload">
            <summary>
            Stops all weather managers
            </summary>
        </member>
        <member name="P:DOL.GS.WeatherMgr.IsActive">
            <summary>
            Gets if the weather manager currently is active
            </summary>
        </member>
        <member name="P:DOL.GS.WeatherMgr.CurrentWeatherLine">
            <summary>
            Gets the weather line based on the time passed since the weather started
            </summary>
        </member>
        <member name="T:DOL.GS.Trainer.VampiirTrainer">
            <summary>
            Vampiir Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.VampiirTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.VampiirTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.VampiirTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.WizardTrainer">
            <summary>
            Wizard Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.WizardTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.WizardTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.WizardTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Spells.BodyResistBuff">
            <summary>
            Body resistance buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ColdResistBuff">
            <summary>
            Cold resistance buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.EnergyResistBuff">
            <summary>
            Energy resistance buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.HeatResistBuff">
            <summary>
            Heat resistance buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.MatterResistBuff">
            <summary>
            Matter resistance buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.SpiritResistBuff">
            <summary>
            Spirit resistance buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.BodySpiritEnergyBuff">
            <summary>
            Body/Spirit/Energy resistance buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.HeatColdMatterBuff">
            <summary>
            Heat/Cold/Matter resistance buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.CrushSlashThrustBuff">
            <summary>
            Crush/Slash/Thrust resistance buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ThrustResistBuff">
            <summary>
            Thrust buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DirectDamageDebuffSpellHandler">
            <summary>
            Damages the target and lowers their resistance to the spell's type.
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.AbstractResistDebuff">
            <summary>
            Base class for all resist debuffs, needed to set effectiveness and duration
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.AbstractResistDebuff.ApplyEffectOnTarget(DOL.GS.GameLiving,System.Double)">
            <summary>
            Apply effect on target or do spell action if non duration spell
            </summary>
            <param name="target">target that gets the effect</param>
            <param name="effectiveness">factor from 0..1 (0%-100%)</param>
        </member>
        <member name="M:DOL.GS.Spells.AbstractResistDebuff.CalculateEffectDuration(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates the effect duration in milliseconds
            </summary>
            <param name="target">The effect target</param>
            <param name="effectiveness">The effect effectiveness</param>
            <returns>The effect duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.AbstractResistDebuff.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            Updates changes properties to living
            </summary>
            <param name="target"></param>
        </member>
        <member name="P:DOL.GS.Spells.AbstractResistDebuff.DebuffTypeName">
            <summary>
            Gets debuff type name for delve info
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.AbstractResistDebuff.BonusCategory1">
            <summary>
            Debuff category is 3 for debuffs
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.AbstractResistDebuff.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.DirectDamageDebuffSpellHandler.ApplyEffectOnTarget(DOL.GS.GameLiving,System.Double)">
            <summary>
            Apply effect on target or do spell action if non duration spell
            </summary>
            <param name="target">target that gets the effect</param>
            <param name="effectiveness">factor from 0..1 (0%-100%)</param>
        </member>
        <member name="P:DOL.GS.Spells.DirectDamageDebuffSpellHandler.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DamageAddSpellHandler">
            <summary>
            Effect that stays on target and does additional
            damage after each melee attack
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.AbstractDamageAddSpellHandler">
            <summary>
            Contains all common code for damage add and shield spell handlers
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.AbstractDamageAddSpellHandler.EventHandler(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            The event handler of given event type
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.AbstractDamageAddSpellHandler.m_minDamageSpread">
            <summary>
            Holds min damage spread based on spec level caster
            had the moment spell was casted
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.AbstractDamageAddSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            called when spell effect has to be started and applied to targets
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.Spells.AbstractDamageAddSpellHandler.StartSpell(DOL.GS.GameLiving)">
            <summary>
            called when spell effect has to be started and applied to targets
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.AbstractDamageAddSpellHandler.ApplyEffectOnTarget(DOL.GS.GameLiving,System.Double)">
            <summary>
            Apply effect on target or do spell action if non duration spell
            </summary>
            <param name="target">target that gets the effect</param>
            <param name="effectiveness">factor from 0..1 (0%-100%)</param>
        </member>
        <member name="M:DOL.GS.Spells.AbstractDamageAddSpellHandler.OnEffectStart(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            When an applied effect starts
            duration spells only
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.AbstractDamageAddSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="P:DOL.GS.Spells.AbstractDamageAddSpellHandler.EventType">
            <summary>
            The event type to hook on
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.DamageAddSpellHandler.EventHandler(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Handler fired on every melee attack by effect target
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="P:DOL.GS.Spells.DamageAddSpellHandler.EventType">
            <summary>
            The event type to hook on
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DamageShieldSpellHandler">
            <summary>
            Effect that stays on target and does addition
            damage on every attack against this target
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.DamageShieldSpellHandler.EventHandler(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Handler fired whenever effect target is attacked
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="P:DOL.GS.Spells.DamageShieldSpellHandler.EventType">
            <summary>
            The event type to hook on
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.HealthToEndurance">
            <summary>
            Damage Over Time spell handler
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.HealthToEndurance.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            Execute damage over time spell
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:DOL.GS.Spells.PowerHealSpellHandler">
             <summary>
            
             </summary>
        </member>
        <member name="M:DOL.GS.Spells.PowerHealSpellHandler.StartSpell(DOL.GS.GameLiving)">
            <summary>
            Execute heal spell
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.Spells.PowerHealSpellHandler.HealTarget(DOL.GS.GameLiving,System.Int32)">
            <summary>
            Heals hit points of one target and sends needed messages, no spell effects
            </summary>
            <param name="target"></param>
            <param name="amount">amount of hit points to heal</param>
            <returns>true if heal was done</returns>
        </member>
        <member name="M:DOL.GS.Spells.PowerHealSpellHandler.CalculateHealVariance(System.Int32@,System.Int32@)">
            <summary>
            Calculates heal variance based on spec
            </summary>
            <param name="min">store min variance here</param>
            <param name="max">store max variance here</param>
        </member>
        <member name="T:DOL.GS.Spells.AmnesiaSpellHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.AmnesiaSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            Execute direct damage spell
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.Spells.AmnesiaSpellHandler.OnDirectEffect(DOL.GS.GameLiving,System.Double)">
            <summary>
            execute non duration spell effect on target
            </summary>
            <param name="target"></param>
            <param name="effectiveness"></param>
        </member>
        <member name="M:DOL.GS.Spells.AmnesiaSpellHandler.OnSpellResisted(DOL.GS.GameLiving)">
            <summary>
            When spell was resisted
            </summary>
            <param name="target">the target that resisted the spell</param>
        </member>
        <member name="T:DOL.GS.SkillHandler.SprintAbilityHandler">
            <summary>
            Handler for Sprint Ability clicks
            </summary>
        </member>
        <member name="T:DOL.GS.SkillHandler.ProtectAbilityHandler">
            <summary>
            Handler for protect ability clicks
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.ProtectAbilityHandler.PROTECT_DISTANCE">
            <summary>
            The Protect Distance
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.ProtectAbilityHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.Config.ResourceUtil">
            <summary>
            Helps managing embedded resources
            </summary>
        </member>
        <member name="M:DOL.Config.ResourceUtil.GetResourceStream(System.String)">
            <summary>
            Searches for a specific resource and returns the stream
            </summary>
            <param name="fileName">the resource name</param>
            <returns>the resource stream</returns>
        </member>
        <member name="M:DOL.Config.ResourceUtil.ExtractResource(System.String)">
            <summary>
            Extracts a given resource
            </summary>
            <param name="fileName">the resource name</param>
        </member>
        <member name="M:DOL.Config.ResourceUtil.ExtractResource(System.String,System.String)">
            <summary>
            Extracts a given resource
            </summary>
            <param name="resourceName">the resource name</param>
            <param name="fileName">the external file name</param>
        </member>
        <member name="T:DOL.GS.RealmAbilities.TrueshotAbility">
            <summary>
            Trueshot RA, grants 50% more range on next archery attack
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.TrueshotAbility.Execute(DOL.GS.GameLiving)">
            <summary>
            Action
            </summary>
            <param name="living"></param>
        </member>
        <member name="T:DOL.GS.RealmAbilities.SecondWindAbility">
            <summary>
            Second Wind, restores 100% endu
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.SecondWindAbility.Execute(DOL.GS.GameLiving)">
            <summary>
            Action
            </summary>
            <param name="living"></param>
        </member>
        <member name="T:DOL.GS.RealmAbilities.PurgeAbility">
            <summary>
            Purge Ability, removes negative effects
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.PurgeAbility.Execute(DOL.GS.GameLiving)">
            <summary>
            Action
            </summary>
            <param name="living"></param>
        </member>
        <member name="T:DOL.GS.RealmAbilities.AvoidanceOfMagicAbility">
            <summary>
            Avoidance of Magic RA, reduces magical damage
            </summary>
        </member>
        <member name="F:DOL.GS.RealmAbilities.AvoidanceOfMagicAbility.properties">
            <summary>
            The list of properties this RA affects
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.PhysicalDefenceAbility">
            <summary>
            Physical Defence RA, reduces melee damage
            </summary>
        </member>
        <member name="F:DOL.GS.RealmAbilities.PhysicalDefenceAbility.properties">
            <summary>
            The list of properties this RA affects
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.MultiplicativePropertiesHybrid">
            <summary>
            Implements multiplicative properties using HybridDictionary
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.IMultiplicativeProperties">
            <summary>
            Interface for properties that are multiplied to get final value (like max speed)
            </summary>
        </member>
        <member name="M:DOL.GS.PropertyCalc.IMultiplicativeProperties.Set(System.Int32,System.Object,System.Double)">
            <summary>
            Adds new value, if key exists value will be overwriten
            </summary>
            <param name="index">The property index</param>
            <param name="key">The key used to remove value later</param>
            <param name="value">The value added</param>
        </member>
        <member name="M:DOL.GS.PropertyCalc.IMultiplicativeProperties.Remove(System.Int32,System.Object)">
            <summary>
            Removes stored value
            </summary>
            <param name="index">The property index</param>
            <param name="key">The key use to add the value</param>
        </member>
        <member name="M:DOL.GS.PropertyCalc.IMultiplicativeProperties.Get(System.Int32)">
            <summary>
            Gets the property value
            </summary>
            <param name="index">The property index</param>
            <returns>The property value (1.0 = 100%)</returns>
        </member>
        <member name="M:DOL.GS.PropertyCalc.MultiplicativePropertiesHybrid.Set(System.Int32,System.Object,System.Double)">
            <summary>
            Adds new value, if key exists value will be overwriten
            </summary>
            <param name="index">The property index</param>
            <param name="key">The key used to remove value later</param>
            <param name="value">The value added</param>
        </member>
        <member name="M:DOL.GS.PropertyCalc.MultiplicativePropertiesHybrid.Remove(System.Int32,System.Object)">
            <summary>
            Removes stored value
            </summary>
            <param name="index">The property index</param>
            <param name="key">The key use to add the value</param>
        </member>
        <member name="M:DOL.GS.PropertyCalc.MultiplicativePropertiesHybrid.Get(System.Int32)">
            <summary>
            Gets the property value
            </summary>
            <param name="index">The property index</param>
            <returns>The property value (1.0 = 100%)</returns>
        </member>
        <member name="T:DOL.GS.PropertyCalc.MeleeSpeedPercentCalculator">
             <summary>
             The Melee Speed bonus percent calculator
            
             BuffBonusCategory1 is used for buffs
             BuffBonusCategory2 unused
             BuffBonusCategory3 is used for debuff
             BuffBonusCategory4 unused
             BuffBonusMultCategory1 unused
             </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassEldritch">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassEldritch.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Keeps.GameKeepDoor">
            <summary>
            keep door in world
            </summary>
        </member>
        <member name="T:DOL.GS.IDoor">
            <summary>
            IDoor is interface for door and keepdoor
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepDoor.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.GameKeepDoor.m_state">
            <summary>
            door state (open or closed)
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepDoor.TakeDamage(DOL.GS.GameObject,DOL.GS.eDamageType,System.Int32,System.Int32)">
            <summary>
            This methode is override to remove XP system
            </summary>
            <param name="source">the damage source</param>
            <param name="damageType">the damage type</param>
            <param name="damageAmount">the amount of damage</param>
            <param name="criticalAmount">the amount of critical damage</param>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepDoor.Interact(DOL.GS.GamePlayer)">
            <summary>
            This function is called from the ObjectInteractRequestHandler
            It teleport player in the keep if player and keep have the same realm
            </summary>
            <param name="player">GamePlayer that interacts with this object</param>
            <returns>false if interaction is prevented</returns>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepDoor.StartPowerRegeneration">
            <summary>
            Starts the power regeneration
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepDoor.StartEnduranceRegeneration">
            <summary>
            Starts the endurance regeneration
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepDoor.SaveIntoDatabase">
            <summary>
            save the keep door object in DB
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepDoor.LoadFromDatabase(DOL.Database.DataObject)">
            <summary>
            load the keep door object from DB object
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepDoor.Open">
            <summary>
            call when player try to open door
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepDoor.Close">
            <summary>
            call when player try to close door
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepDoor.Die(DOL.GS.GameObject)">
            <summary>
            This function is called when door "die" to open door
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepDoor.CloseDoor">
            <summary>
            This method is called when door is repair or keep is reset
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepDoor.BroadcastDoorStatus">
            <summary>
            boradcast the door statut to all player near the door
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepDoor.Repair(System.Int32)">
            <summary>
            This Function is called when door has been repaired
            </summary>
            <param name="amount">how many HP is repaired</param>
        </member>
        <member name="M:DOL.GS.Keeps.GameKeepDoor.Reset(DOL.GS.PacketHandler.eRealm)">
            <summary>
            This Function is called when keep is taken to repair door
            </summary>
            <param name="realm">new realm of keep taken</param>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepDoor.DoorID">
            <summary>
            The door index which is unique
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepDoor.Flag">
            <summary>
            This flag is send in packet(keep door = 4, regular door = 0)
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepDoor.Realm">
            <summary>
            Get the realm of the keep door from keep owner
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepDoor.State">
            <summary>
            door state (open or closed)
            call the broadcast of state in area
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.GameKeepDoor.Level">
            <summary>
            The level of door is keep level now
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.BarrierOfFortitudeEffect">
            <summary>
            Effect handler for Barrier Of Fortitude
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.BarrierOfFortitudeEffect.#ctor">
            <summary>
            Default constructor for AmelioratingMelodiesEffect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.BarrierOfFortitudeEffect.Start(DOL.GS.GamePlayer,System.Int32,System.Int32)">
            <summary>
            Called when effect is to be started
            </summary>
            <param name="player">The player to start the effect for</param>
            <param name="duration">The effectduration in secounds</param>
            <param name="value">The percentage additional value for melee absorb</param>
        </member>
        <member name="M:DOL.GS.Effects.BarrierOfFortitudeEffect.PlayerLeftWorld(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Called when a player leaves the game
            </summary>
            <param name="e">The event which was raised</param>
            <param name="sender">Sender of the event</param>
            <param name="args">EventArgs associated with the event</param>
        </member>
        <member name="M:DOL.GS.Effects.BarrierOfFortitudeEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect is to be cancelled
            </summary>
            <param name="playerCancel">Whether or not effect is player cancelled</param>
        </member>
        <member name="M:DOL.GS.Effects.BarrierOfFortitudeEffect.StartTimers">
            <summary>
            Starts the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.BarrierOfFortitudeEffect.StopTimers">
            <summary>
            Stops the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.BarrierOfFortitudeEffect.ExpireCallback(DOL.GS.RegionTimer)">
            <summary>
            The callback for when the effect expires
            </summary>
            <param name="timer">The ObjectTimerCallback object</param>
        </member>
        <member name="P:DOL.GS.Effects.BarrierOfFortitudeEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.BarrierOfFortitudeEffect.RemainingTime">
            <summary>
            Remaining time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.BarrierOfFortitudeEffect.Icon">
            <summary>
            Icon ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.BarrierOfFortitudeEffect.InternalID">
            <summary>
            Unique ID for identification in the effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.BarrierOfFortitudeEffect.DelveInfo">
            <summary>
            Delve information
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.PlayerCancelsEffectHandler">
            <summary>
            Handles effect cancel requests
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.PlayerCancelsEffectHandler.CancelEffectHandler">
            <summary>
            Handles players cancel effect actions
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerCancelsEffectHandler.CancelEffectHandler.m_effectId">
            <summary>
            The effect Id
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerCancelsEffectHandler.CancelEffectHandler.#ctor(DOL.GS.GamePlayer,System.Int32)">
            <summary>
            Constructs a new CancelEffectHandler
            </summary>
            <param name="actionSource">The action source</param>
            <param name="effectId">The effect Id</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerCancelsEffectHandler.CancelEffectHandler.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.RelicMgr">
            <summary>
            RelicManager
            The manager that keeps track of the relics.
            </summary>
        </member>
        <member name="F:DOL.GS.RelicMgr.m_relics">
            <summary>
            table of all relics, id as key
            </summary>
        </member>
        <member name="F:DOL.GS.RelicMgr.m_relicPads">
            <summary>
            list of all relicPads
            </summary>
        </member>
        <member name="F:DOL.GS.RelicMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.RelicMgr.Init">
            <summary>
            load all relics from DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.RelicMgr.AddRelicPad(DOL.GS.GameRelicPad)">
            <summary>
            This is called when the GameRelicPads are added to world
            </summary>
            <param name="pad"></param>
        </member>
        <member name="M:DOL.GS.RelicMgr.GetPadAtRelicLocation(DOL.GS.GameRelic)">
            <summary>
            This is called on during the loading. It looks for relicpads and where it could be stored.
            </summary>
            <returns>null if no GameRelicPad was found at the relic's position.</returns>
        </member>
        <member name="M:DOL.GS.RelicMgr.getRelic(System.Int32)">
            <summary>
            get relic by ID
            </summary>
            <param name="id">id of relic</param>
            <returns> Relic object with relicid = id</returns>
        </member>
        <member name="M:DOL.GS.RelicMgr.getRelics(System.Byte)">
            <summary>
            Returns an enumeration with all mounted Relics of an realm
            </summary>
            <param name="Realm"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.RelicMgr.getRelics(System.Byte,DOL.GS.eRelicType)">
            <summary>
            Returns an enumeration with all mounted Relics of an realm by a specified RelicType
            </summary>
            <param name="Realm"></param>
            <param name="Type"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.RelicMgr.GetRelicCount(System.Byte)">
            <summary>
            get relic count by realm
            </summary>
            <param name="realm"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.RelicMgr.GetRelicCount(System.Byte,DOL.GS.eRelicType)">
            <summary>
            get relic count by realm and relictype
            </summary>
            <param name="realm"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.RelicMgr.GetRelicBonusModifier(System.Byte,DOL.GS.eRelicType)">
            <summary>
            Gets the bonus modifier for a realm/relictype.
            </summary>
            <param name="realm"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.RelicMgr.CanPickupRelicFromShrine(DOL.GS.GamePlayer,DOL.GS.GameRelic)">
            <summary>
            Returns if a player is allowed to pick up a mounted relic (depends if they own their own relic of the same type)
            </summary>
            <param name="player"></param>
            <param name="relic"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.RelicMgr.GetAllRelics">
            <summary>
            Gets a copy of the current relics table, keyvalue is the relicId
            </summary>
            <returns></returns>
        </member>
        <member name="T:DOL.Events.RelicPadEvent">
            <summary>
            This class holds all possible relic events.
            Only constants defined here!
            </summary>
        </member>
        <member name="M:DOL.Events.RelicPadEvent.IsValidFor(System.Object)">
            <summary>
            Tests if this event is valid for the specified object
            </summary>
            <param name="o">The object for which the event wants to be registered</param>
            <returns>true if valid, false if not</returns>
        </member>
        <member name="F:DOL.Events.RelicPadEvent.RelicStolen">
            <summary>
            The RelicStolen event is fired whenever a relic has been removed from the pad
            </summary>
        </member>
        <member name="F:DOL.Events.RelicPadEvent.RelicMounted">
            <summary>
            The RelicMounted event is fired whenever a relic is stored to the pad	
            </summary>
        </member>
        <member name="T:DOL.Events.KeepEvent">
            <summary>
            This class holds all possible keep events.
            Only constants defined here!
            </summary>
        </member>
        <member name="M:DOL.Events.KeepEvent.IsValidFor(System.Object)">
            <summary>
            Tests if this event is valid for the specified object
            </summary>
            <param name="o">The object for which the event wants to be registered</param>
            <returns>true if valid, false if not</returns>
        </member>
        <member name="F:DOL.Events.KeepEvent.KeepClaimed">
            <summary>
            The KeepClaimed event is fired whenever the keep is claimed by a guild	
            </summary>
        </member>
        <member name="F:DOL.Events.KeepEvent.KeepTaken">
            <summary>
            The KeepTaken event is fired whenever the keep is taken by another realm (lord killed)	
            </summary>
        </member>
        <member name="F:DOL.Events.KeepEvent.TowerRaized">
            <summary>
            The TowerRaized event is fired when a tower is raized
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.GuardEffect">
            <summary>
            The helper class for the guard ability
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GuardEffect.delveString">
            <summary>
            The ability description
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GuardEffect.m_guardSource">
            <summary>
            Holds guarder
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GuardEffect.m_guardTarget">
            <summary>
            Holds guarded player
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GuardEffect.m_playerGroup">
            <summary>
            Holds player group
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GuardEffect.#ctor">
            <summary>
            Creates a new guard effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GuardEffect.Start(DOL.GS.GamePlayer,DOL.GS.GamePlayer)">
            <summary>
            Start the guarding on player
            </summary>
            <param name="guardSource">The guarder</param>
            <param name="guardTarget">The player guarded by guarder</param>
        </member>
        <member name="M:DOL.GS.Effects.GuardEffect.GroupDisbandCallback(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Cancels guard if one of players disbands
            </summary>
            <param name="e"></param>
            <param name="sender">The group</param>
            <param name="args"></param>
        </member>
        <member name="M:DOL.GS.Effects.GuardEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect must be canceled
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GuardEffect.m_id">
            <summary>
            The internal unique effect ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GuardEffect.GuardSource">
            <summary>
            Gets guarder
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GuardEffect.GuardTarget">
            <summary>
            Gets guarded player
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GuardEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GuardEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GuardEffect.Icon">
            <summary>
            Icon to show on players, can be id
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GuardEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GuardEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.GameSpellAndImmunityEffect">
            <summary>
            Spell Effect assists SpellHandler with duration spells with immunity
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.GameSpellEffect">
            <summary>
            Spell Effect assists SpellHandler with duration spells
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.IConcentrationEffect">
            <summary>
            An effect that can be added to concentration list
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.IConcentrationEffect.Cancel(System.Boolean)">
            <summary>
            Effect must be canceled
            </summary>
            <param name="playerCanceled">true if player decided to cancel that effect by shift + rightclick</param>
        </member>
        <member name="P:DOL.GS.Effects.IConcentrationEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.IConcentrationEffect.OwnerName">
            <summary>
            The name of the owner
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.IConcentrationEffect.Icon">
            <summary>
            Effect icon ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.IConcentrationEffect.Concentration">
            <summary>
            Amount of concentration used by effect
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameSpellEffect.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameSpellEffect.m_handler">
            <summary>
            The spell handler of this effect
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameSpellEffect.m_owner">
            <summary>
            The owner of this effect
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameSpellEffect.m_id">
            <summary>
            The internal unique ID of this effect
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameSpellEffect.m_duration">
            <summary>
            The effect duration in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameSpellEffect.m_pulseFreq">
            <summary>
            The effect frequency in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameSpellEffect.m_effectiveness">
            <summary>
            The effectiveness of this effect
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameSpellEffect.m_expired">
            <summary>
            The flag indicating that this effect has expired
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameSpellEffect.m_timer">
            <summary>
            The timer for pulsing effects
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellEffect.#ctor(DOL.GS.Spells.ISpellHandler,System.Int32,System.Int32)">
            <summary>
            Creates a new game spell effect
            </summary>
            <param name="handler">the spell handler</param>
            <param name="duration">the spell duration in milliseconds</param>
            <param name="pulseFreq">the pulse frequency in milliseconds</param>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellEffect.#ctor(DOL.GS.Spells.ISpellHandler,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a new game spell effect
            </summary>
            <param name="handler">the spell handler</param>
            <param name="duration">the spell duration in milliseconds</param>
            <param name="pulseFreq">the pulse frequency in milliseconds</param>
            <param name="effectiveness">the effectiveness</param>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellEffect.ToString">
            <summary>
            Returns the string representation of the GameSpellEffect
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellEffect.Start(DOL.GS.GameLiving)">
            <summary>
            Starts the effect
            </summary>
            <param name="target">the target</param>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellEffect.Cancel(System.Boolean)">
            <summary>
            Cancels the effect
            </summary>
            <param name="playerCanceled">true if canceled by the player</param>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellEffect.Overwrite(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Overwrites the effect
            concentration based effects should never be overwritten
            </summary>
            <param name="effect">the new effect</param>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellEffect.StartTimers">
            <summary>
            Starts the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellEffect.StopTimers">
            <summary>
            Stops the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellEffect.ExpiredCallback">
            <summary>
            The callback method when the effect expires
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellEffect.PulseCallback">
            <summary>
            Pulse callback
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellEffect.OwnerName">
            <summary>
            The name of the owner
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellEffect.Concentration">
            <summary>
            Amount of concentration used by effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellEffect.Icon">
            <summary>
            Icon to show on players Effects bar
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellEffect.RemainingTime">
            <summary>
            Remaining Effect duration in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellEffect.Owner">
            <summary>
            The living to that this effect is applied to
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellEffect.Effectiveness">
            <summary>
            Effectiveness of the spell effect 0..1
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellEffect.Duration">
            <summary>
            Duration of the spell effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellEffect.PulseFreq">
            <summary>
            Effect frequency
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellEffect.SpellHandler">
            <summary>
            associated Spell handler
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellEffect.Spell">
            <summary>
            Spell thats used
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellEffect.DelveInfo">
            <summary>
            Delve information
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.GameSpellEffect.PulsingEffectTimer">
            <summary>
            Handles effect pulses
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameSpellEffect.PulsingEffectTimer.m_effect">
            <summary>
            The pulsing effect
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameSpellEffect.PulsingEffectTimer.m_timeSinceStart">
            <summary>
            The time in milliseconds since timer start
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellEffect.PulsingEffectTimer.#ctor(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Constructs a new pulsing timer
            </summary>
            <param name="effect">The pulsing effect</param>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellEffect.PulsingEffectTimer.Start(System.Int32)">
            <summary>
            Starts the timer with defined initial delay
            </summary>
            <param name="initialDelay">The initial timer delay. Must be more than 0 and less than MaxInterval</param>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellEffect.PulsingEffectTimer.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellEffect.PulsingEffectTimer.ToString">
            <summary>
            Returns short information about the timer
            </summary>
            <returns>Short info about the timer</returns>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellEffect.PulsingEffectTimer.TimeSinceStart">
            <summary>
            Gets the effect remaining time, decreased every interval
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameSpellAndImmunityEffect.m_startedCount">
            <summary>
            The amount of times this effect started
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellAndImmunityEffect.#ctor(DOL.GS.Spells.ISpellHandler,System.Int32,System.Int32)">
            <summary>
            Creates a new game spell effect
            </summary>
            <param name="handler"></param>
            <param name="duration"></param>
            <param name="pulseFreq"></param>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellAndImmunityEffect.#ctor(DOL.GS.Spells.ISpellHandler,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a new game spell effect
            </summary>
            <param name="handler"></param>
            <param name="duration"></param>
            <param name="pulseFreq"></param>
            <param name="effectiveness"></param>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellAndImmunityEffect.ExpiredCallback">
            <summary>
            The callback method when the effect expires
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellAndImmunityEffect.StartTimers">
            <summary>
            Starts the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameSpellAndImmunityEffect.Cancel(System.Boolean)">
            <summary>
            Cancels the effect
            </summary>
            <param name="playerCanceled">true if canceled by the player</param>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellAndImmunityEffect.StartedCount">
            <summary>
            Gets the amount of times this effect started
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.GameSpellAndImmunityEffect.ImmunityState">
            <summary>
            True if effect is in immunity state
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.EngageEffect">
            <summary>
            The helper class for the engage ability
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.EngageEffect.delveString">
            <summary>
            The ability description
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.EngageEffect.m_engageSource">
            <summary>
            The player that defends the target
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.EngageEffect.m_engageTarget">
            <summary>
            The player that is defended by the engage source
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.EngageEffect.#ctor">
            <summary>
            Creates a new engage effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.EngageEffect.Start(DOL.GS.GamePlayer,DOL.GS.GameLiving)">
            <summary>
            Start the berserk on player
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.EngageEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect must be canceled
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.EngageEffect.m_id">
            <summary>
            Stores the internal effect ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.EngageEffect.EngageSource">
            <summary>
            Gets the player that defends the target
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.EngageEffect.EngageTarget">
            <summary>
            Gets the defended player
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.EngageEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.EngageEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.EngageEffect.Icon">
            <summary>
            Icon to show on players, can be id
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.EngageEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.EngageEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.SpellCrafting">
            <summary>
            spell crafdting skill
            </summary>
        </member>
        <member name="T:DOL.GS.AdvancedCraftingSkill">
            <summary>
            AdvancedCraftingSkill is the skill for alchemy and spellcrafting whitch add all combine system
            </summary>
        </member>
        <member name="M:DOL.GS.AdvancedCraftingSkill.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.AdvancedCraftingSkill.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="M:DOL.GS.AdvancedCraftingSkill.CombineItems(DOL.GS.GamePlayer)">
            <summary>
            Called when player accept to combine items
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.AdvancedCraftingSkill.IsAllowedToCombine(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Check if the player can enchant the item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.AdvancedCraftingSkill.ApplyMagicalEffect(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Apply the magical bonus to the item
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SpellCrafting.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.SpellCrafting.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.SpellCrafting.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="M:DOL.GS.SpellCrafting.IsAllowedToCombine(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            This function is called when player accept the combine
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="M:DOL.GS.SpellCrafting.ApplyMagicalEffect(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Apply all needed magical bonus to the item
            </summary>
            <param name="player"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SpellCrafting.ApplyMagicalDusts(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Apply all magical dust
            </summary>
            <param name="player"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SpellCrafting.ApplySpellcraftGems(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Apply all spellcraft gems bonus
            </summary>
            <param name="player"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SpellCrafting.ShowSpellCraftingInfos(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Shaw to player all infos about the current spellcraft
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="M:DOL.GS.SpellCrafting.CalculateChanceToOverchargeItem(DOL.GS.GamePlayer,DOL.Database.InventoryItem,System.Int32,System.Int32)">
            <summary>
            Get the sucess chance to overcharge the item
            </summary>
            <param name="player"></param>
            <param name="maxBonusLevel"></param>
            <param name="bonusLevel"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SpellCrafting.GetItemMaxImbuePoints(DOL.Database.InventoryItem)">
            <summary>
            Get the maximum bonus level the item can hold
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SpellCrafting.GetTotalImbuePoints(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Get gems bonus level
            </summary>
            <param name="player">player spellcrafting</param>
            <param name="item">item to calculate imbues for</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SpellCrafting.GetGemImbuePoints(System.Int32,System.Int32)">
            <summary>
            Get how much the gem use like bonus point
            </summary>
            <param name="gem"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SpellCrafting.GetOverchargePenality(System.Int32,System.Int32)">
            <summary>
            Get the % overcharge penality
            </summary>
            <param name="maxBonusLevel"></param>
            <param name="bonusLevel"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SpellCrafting.CalculateChanceToPreserveItem(DOL.GS.GamePlayer,DOL.Database.InventoryItem,System.Int32,System.Int32)">
            <summary>
            Get the chance to preserve item while overcharging
            </summary>
            <param name="player"></param>
            <param name="maxBonusLevel"></param>
            <param name="bonusLevel"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.AI.Brain.HealerBrain">
            <summary>
            Healer Guard Brain
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.HealerBrain.Think">
            <summary>
            Brain Think Method
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.HealerBrain.CheckAreaForHealing">
            <summary>
            Checks the areas for friendlies to heal if we can cast spells
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.HealerBrain.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            To be honest, I don't really know what this does, 
            I think it stops telling all mobs in area that this guard has healed
            I had some problems before with guards wanting to attack themselves and eachother
            </summary>
            <param name="e">The event</param>
            <param name="sender">The sender</param>
            <param name="args">The arguments</param>
        </member>
        <member name="T:DOL.GS.Region">
            <summary>
            This class represents a region in DAOC. A region is everything where you
            need a loadingscreen to go there. Eg. whole Albion is one Region, Midgard and
            Hibernia are just one region too. Darkness Falls is a region. Each dungeon, city
            is a region ... you get the clue. Each Region can hold an arbitary number of
            Zones! Camelot Hills is one Zone, Tir na Nog is one Zone (and one Region)...
            </summary>
        </member>
        <member name="F:DOL.GS.Region.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Region.MAXOBJECTS">
            <summary>
            IMPORTANT: This variable defines the maximum number of objects
            that can exist in a realm! Setting it lower will quicken up certain
            loops but you can not add more than this number of objects to the realm
            at any given time then! Setting it higher will slow down certain
            loops but allows for more objects
            </summary>
        </member>
        <member name="F:DOL.GS.Region.MINIMUMSIZE">
            <summary>
            This is the minimumsize for object array that is allocated when
            the first object is added to the region must be dividable by 32 (optimization)
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_objects">
            <summary>
            This holds all objects inside this region. Their index = their id!
            </summary>
        </member>
        <member name="F:DOL.GS.Region.ObjectsSyncLock">
            <summary>
            Object to lock when changing objects in the array
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_objectsInRegion">
            <summary>
            This holds a counter with the absolute count of all objects that are actually in this region
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_objectsAllocatedSlots">
            <summary>
            This array holds a bitarray
            Its used to know which slots in region object array are free and what allocated
            This is used to accelerate inserts a lot
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_nextObjectSlot">
            <summary>
            This holds the index of a possible next object slot
            but needs further checks (basically its lastaddedobjectIndex+1)
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_graveStones">
            <summary>
            This holds the gravestones in this region for fast access
            Player unique id(string) -> GameGraveStone
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_Zones">
            <summary>
            Holds all the Zones inside this Region
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_Areas">
             <summary>
             Holds all the Areas inside this Region
            
             Areas can be registed to a reagion via AddArea
             and events will be thrown if players/npcs/objects enter leave area
             </summary>
        </member>
        <member name="F:DOL.GS.Region.m_ZoneAreas">
            <summary>
            Cache for zone area mapping to quickly access all areas within a certain zone
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_ZoneAreasCount">
            <summary>
            /// Cache for number of items in m_ZoneAreas array.
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_Name">
            <summary>
            The Region Name eg. "Region000"
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_Description">
            <summary>
            The Region Description eg. "Camelot Hills"
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_ID">
            <summary>
            The Region ID eg. 11
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_ServerIP">
            <summary>
            The region Server IP ... for future use
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_ServerPort">
            <summary>
            The region Server Port ... for future use
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_waterLevel">
            <summary>
            Z coordinate after which water starts in this region
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_expansion">
            <summary>
            The region expansion
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_divingEnabled">
            <summary>
            Is diving enabled in region
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_housingEnabled">
            <summary>
            Is housing enabled in region
            </summary>
        </member>
        <member name="F:DOL.GS.Region.CLEANUPTIMER">
            <summary>
            How often shall we remove unused objects
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_numPlrs">
            <summary>
            Contains the # of players in the region
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_lastRelocation">
            <summary>
            last relocation time
            </summary>
        </member>
        <member name="F:DOL.GS.Region.m_timeManager">
            <summary>
            The region time manager
            </summary>
        </member>
        <member name="M:DOL.GS.Region.#ctor(DOL.GS.GameTimer.TimeManager,DOL.GS.RegionData)">
            <summary>
            Constructs a new empty Region
            </summary>
            <param name="time">The time manager for this region</param>
            <param name="data">The region data</param>
        </member>
        <member name="M:DOL.GS.Region.StartRegionMgr">
            <summary>
            Starts the RegionMgr
            </summary>
        </member>
        <member name="M:DOL.GS.Region.StopRegionMgr">
            <summary>
            Stops the RegionMgr
            </summary>
        </member>
        <member name="M:DOL.GS.Region.PreAllocateRegionSpace(System.Int32)">
            <summary>
            Reallocates objects array with given size
            </summary>
            <param name="count">The size of new objects array, limited by MAXOBJECTS</param>
        </member>
        <member name="M:DOL.GS.Region.LoadFromDatabase(DOL.Database.Mob[],System.Int64@,System.Int64@,System.Int64@,System.Int64@)">
            <summary>
            Loads the region from database
            </summary>
            <param name="mobCount">The count of loaded mobs</param>
            <param name="merchantCount">The count of loaded merchants</param>
            <param name="itemCount">The count of loaded items</param>
        </member>
        <member name="M:DOL.GS.Region.SaveToDatabase">
            <summary>
            Saves the Region information to the DB
            </summary>
        </member>
        <member name="M:DOL.GS.Region.AddObject(DOL.GS.GameObject)">
            <summary>
            Adds an object to the region and assigns the object an id
            </summary>
            <param name="obj">A GameObject to be added to the region</param>
            <returns>success</returns>
        </member>
        <member name="M:DOL.GS.Region.RemoveObject(DOL.GS.GameObject)">
            <summary>
            Removes the object with the specified ID from the region
            </summary>
            <param name="obj">A GameObject to be removed from the region</param>
        </member>
        <member name="M:DOL.GS.Region.FindGraveStone(DOL.GS.GamePlayer)">
            <summary>
            Searches for players gravestone in this region
            </summary>
            <param name="player"></param>
            <returns>the found gravestone or null</returns>
        </member>
        <member name="M:DOL.GS.Region.GetObject(System.UInt16)">
            <summary>
            Gets the object with the specified ID
            </summary>
            <param name="id">The ID of the object to get</param>
            <returns>The object with the specified ID, null if it didn't exist</returns>
        </member>
        <member name="M:DOL.GS.Region.GetZone(System.Int32,System.Int32)">
            <summary>
            Returns the zone that contains the specified x and y values
            </summary>
            <param name="x">X value for the zone you're retrieving</param>
            <param name="y">Y value for the zone you're retrieving</param>
            <returns>The zone you're retrieving or null if it couldn't be found</returns>
        </member>
        <member name="M:DOL.GS.Region.GetXOffInZone(System.Int32,System.Int32)">
            <summary>
            Gets the X offset for the specified zone
            </summary>
            <param name="x">X value for the zone's offset you're retrieving</param>
            <param name="y">Y value for the zone's offset you're retrieving</param>
            <returns>The X offset of the zone you specified or 0 if it couldn't be found</returns>
        </member>
        <member name="M:DOL.GS.Region.GetYOffInZone(System.Int32,System.Int32)">
            <summary>
            Gets the Y offset for the specified zone
            </summary>
            <param name="x">X value for the zone's offset you're retrieving</param>
            <param name="y">Y value for the zone's offset you're retrieving</param>
            <returns>The Y offset of the zone you specified or 0 if it couldn't be found</returns>
        </member>
        <member name="M:DOL.GS.Region.AddArea(DOL.GS.IArea)">
            <summary>
            Adds an area to the region and updates area-zone cache
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Region.RemoveArea(DOL.GS.IArea)">
            <summary>
            Removes an are from the list of areas and updates area-zone chache
            </summary>
            <param name="area"></param>
        </member>
        <member name="M:DOL.GS.Region.GetAreasOfSpot(DOL.GS.IPoint3D)">
            <summary>
            Gets the areas for given location,
            less performant than getAreasOfZone so use other on if possible
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Region.GetAreasOfSpot(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the areas for a certain spot,
            less performant than getAreasOfZone so use other on if possible
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Region.GetAreasOfZone(DOL.GS.Zone,DOL.GS.IPoint3D,System.Boolean)">
            <summary>
            Gets the areas for a certain spot
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Region.GetInRadius(DOL.GS.Zone.eGameObjectType,System.Int32,System.Int32,System.Int32,System.UInt16,System.Boolean)">
            <summary>
            Gets objects in a radius around a point
            </summary>
            <param name="type">OBJECT_TYPE (0=item, 1=npc, 2=player)</param>
            <param name="x">origin X</param>
            <param name="y">origin Y</param>
            <param name="z">origin Z</param>
            <param name="radius">radius around origin</param>
            <param name="withDistance">Get an ObjectDistance enumerator</param>
            <returns>IEnumerable to be used with foreach</returns>
        </member>
        <member name="M:DOL.GS.Region.CheckShortestDistance(DOL.GS.Zone,System.Int32,System.Int32,System.UInt32)">
            <summary>
            get the shortest distance from a point to a zone
            </summary>
            <param name="zone">The zone to check</param>
            <param name="x">X value of the point</param>
            <param name="y">Y value of the point</param>
            <param name="squareRadius">The square radius to compare the distance with</param>
            <returns>True if the distance is shorter false either</returns>
        </member>
        <member name="M:DOL.GS.Region.GetItemsInRadius(System.Int32,System.Int32,System.Int32,System.UInt16,System.Boolean)">
            <summary>
            Gets Items in a radius around a spot
            </summary>
            <param name="x">origin X</param>
            <param name="y">origin Y</param>
            <param name="z">origin Z</param>
            <param name="radius">radius around origin</param>
            <param name="withDistance">Get an ObjectDistance enumerator</param>
            <returns>IEnumerable to be used with foreach</returns>
        </member>
        <member name="M:DOL.GS.Region.GetNPCsInRadius(System.Int32,System.Int32,System.Int32,System.UInt16,System.Boolean)">
            <summary>
            Gets NPCs in a radius around a spot
            </summary>
            <param name="x">origin X</param>
            <param name="y">origin Y</param>
            <param name="z">origin Z</param>
            <param name="radius">radius around origin</param>
            <param name="withDistance">Get an ObjectDistance enumerator</param>
            <returns>IEnumerable to be used with foreach</returns>
        </member>
        <member name="M:DOL.GS.Region.GetPlayerInRadius(System.Int32,System.Int32,System.Int32,System.UInt16,System.Boolean)">
            <summary>
            Gets Players in a radius around a spot
            </summary>
            <param name="x">origin X</param>
            <param name="y">origin Y</param>
            <param name="z">origin Z</param>
            <param name="radius">radius around origin</param>
            <param name="withDistance">Get an ObjectDistance enumerator</param>
            <returns>IEnumerable to be used with foreach</returns>
        </member>
        <member name="P:DOL.GS.Region.NumPlayers">
            <summary>
            Gets the # of players in the region
            </summary>
        </member>
        <member name="P:DOL.GS.Region.Name">
            <summary>
            The Region Name eg. Region000
            </summary>
        </member>
        <member name="P:DOL.GS.Region.Description">
            <summary>
            The Region Description eg. Cursed Forest
            </summary>
        </member>
        <member name="P:DOL.GS.Region.ID">
            <summary>
            The ID of the Region eg. 21
            </summary>
        </member>
        <member name="P:DOL.GS.Region.ServerIP">
            <summary>
            The Region Server IP ... for future use
            </summary>
        </member>
        <member name="P:DOL.GS.Region.ServerPort">
            <summary>
            The Region Server Port ... for future use
            </summary>
        </member>
        <member name="P:DOL.GS.Region.Zones">
            <summary>
            An ArrayList of all Zones within this Region
            </summary>
        </member>
        <member name="P:DOL.GS.Region.Objects">
            <summary>
            Returns the object array of this region
            </summary>
        </member>
        <member name="P:DOL.GS.Region.Expansion">
            <summary>
            Gets or Sets the region expansion
            </summary>
        </member>
        <member name="P:DOL.GS.Region.WaterLevel">
            <summary>
            Gets or Sets the water level in this region
            </summary>
        </member>
        <member name="P:DOL.GS.Region.DivingEnabled">
            <summary>
            Gets or Sets diving flag for region
            </summary>
        </member>
        <member name="P:DOL.GS.Region.HousingEnabled">
            <summary>
            Gets or Sets housing flag for region
            </summary>
        </member>
        <member name="P:DOL.GS.Region.LastRelocation">
            <summary>
            Gets last relocation time
            </summary>
        </member>
        <member name="P:DOL.GS.Region.TimeManager">
            <summary>
            Gets the region time manager
            </summary>
        </member>
        <member name="P:DOL.GS.Region.Time">
            <summary>
            Gets the current region time in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Region.IsDisabled">
            <summary>
            Is this region disabled
            </summary>
        </member>
        <member name="T:DOL.GS.Region.EmptyEnumerator">
            <summary>
            An empty enumerator returned when no objects are found
            close to a certain range
            </summary>
        </member>
        <member name="M:DOL.GS.Region.EmptyEnumerator.GetEnumerator">
            <summary>
            Implementation of the IEnumerable interface
            </summary>
            <returns>An Enumeration Interface of this class</returns>
        </member>
        <member name="M:DOL.GS.Region.EmptyEnumerator.MoveNext">
            <summary>
            Implementation of the IEnumerator interface
            </summary>
            <returns>Always false to prevent Current</returns>
        </member>
        <member name="M:DOL.GS.Region.EmptyEnumerator.Reset">
            <summary>
            Implementation of the IEnumerator interface
            </summary>
        </member>
        <member name="P:DOL.GS.Region.EmptyEnumerator.Current">
            <summary>
            Implementation of the IEnumerator interface,
            always returns null because it shouldn't be
            called at all.
            </summary>
        </member>
        <member name="T:DOL.GS.Region.ObjectEnumerator">
            <summary>
            An enumerator over GameObjects. Used to enumerate over
            certain objects and do some testing before returning an
            object.
            </summary>
        </member>
        <member name="F:DOL.GS.Region.ObjectEnumerator.m_current">
            <summary>
            Counter to the current object
            </summary>
        </member>
        <member name="M:DOL.GS.Region.ObjectEnumerator.MoveNext">
            <summary>
            Get the next GameObjcte from the zone subset created in constructor
            and by restrictuing according distance
            </summary>
            <returns>The Next GameObject of this Enumerator</returns>
        </member>
        <member name="M:DOL.GS.Region.ObjectEnumerator.Reset">
            <summary>
            Resets the Enumerator
            </summary>
        </member>
        <member name="P:DOL.GS.Region.ObjectEnumerator.Current">
            <summary>
            Returns the current Object in the Enumerator
            </summary>
        </member>
        <member name="T:DOL.GS.Region.PlayerDistanceEnumerator">
            <summary>
            This enumerator returns the object and the distance towards the object
            </summary>
        </member>
        <member name="T:DOL.GS.Region.NPCDistanceEnumerator">
            <summary>
            This enumerator returns the object and the distance towards the object
            </summary>
        </member>
        <member name="T:DOL.GS.Region.ItemDistanceEnumerator">
            <summary>
            This enumerator returns the object and the distance towards the object
            </summary>
        </member>
        <member name="T:DOL.GS.PlayerDistEntry">
            <summary>
            Holds a Object and it's distance towards the center
            </summary>
        </member>
        <member name="T:DOL.GS.NPCDistEntry">
            <summary>
            Holds a Object and it's distance towards the center
            </summary>
        </member>
        <member name="T:DOL.GS.ItemDistEntry">
            <summary>
            Holds a Object and it's distance towards the center
            </summary>
        </member>
        <member name="T:DOL.GS.Trainer.SkaldTrainer">
            <summary>
            Skald Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.SkaldTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.SkaldTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.SkaldTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.RangerTrainer">
            <summary>
            Ranger Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.RangerTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.RangerTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.RangerTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.DruidTrainer">
            <summary>
            Druid Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.DruidTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.DruidTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.DruidTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.InfiltratorTrainer">
            <summary>
            Infiltrator Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.InfiltratorTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.InfiltratorTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.InfiltratorTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Spells.DoTSpellHandler">
            <summary>
            Damage Over Time spell handler
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.DoTSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            Execute damage over time spell
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.Spells.DoTSpellHandler.IsOverwritable(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Determines wether this spell is compatible with given spell
            and therefore overwritable by better versions
            spells that are overwritable cannot stack
            </summary>
            <param name="compare"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.DoTSpellHandler.CalculateDamageToTarget(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates damage to target with resist chance and stores it in ad
            </summary>
            <param name="target">spell target</param>
            <param name="effectiveness">value from 0..1 to modify damage</param>
            <returns>attack data</returns>
        </member>
        <member name="M:DOL.GS.Spells.DoTSpellHandler.CalculateDamageVariance(DOL.GS.GameLiving,System.Double@,System.Double@)">
            <summary>
            Calculates min damage variance %
            </summary>
            <param name="target">spell target</param>
            <param name="min">returns min variance</param>
            <param name="max">returns max variance</param>
        </member>
        <member name="M:DOL.GS.Spells.DoTSpellHandler.SendDamageMessages(DOL.GS.AttackData)">
            <summary>
            Sends damage text messages but makes no damage
            </summary>
            <param name="ad"></param>
        </member>
        <member name="M:DOL.GS.Spells.DoTSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="T:DOL.GS.SkillHandler.QuickCastAbilityHandler">
            <summary>
            Handler for Sprint Ability clicks
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.QuickCastAbilityHandler.DISABLE_DURATION">
            <summary>
            The ability disable duration in milliseconds
            </summary>
        </member>
        <member name="M:DOL.GS.SkillHandler.QuickCastAbilityHandler.Execute(DOL.GS.Ability,DOL.GS.GamePlayer)">
            <summary>
            Executes the ability
            </summary>
            <param name="ab">The used ability</param>
            <param name="player">The player that used the ability</param>
        </member>
        <member name="T:DOL.GS.SkillHandler.EngageAbilityHandler">
            <summary>
            Handler for Sprint Ability clicks
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.EngageAbilityHandler.ENGAGE_ATTACK_DELAY_TICK">
            <summary>
            wait 5 sec to engage after attack
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.EngageAbilityHandler.ENGAGE_DURATION_LOST">
            <summary>
            Endurance lost on every attack
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.EngageAbilityHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.SkillHandler.EngageAbilityHandler.Execute(DOL.GS.Ability,DOL.GS.GamePlayer)">
            <summary>
            Execute engage ability
            </summary>
            <param name="ab">The used ability</param>
            <param name="player">The player that used the ability</param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassWarrior">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassWarrior.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassValkyrie">
             <summary>
            
             </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassThane">
             <summary>
            
             </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassVampiir">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassStalker">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassVampiir.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassAcolyte">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassSorcerer">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassMage">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassScout">
             <summary>
            
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DOL.GS.Scripts.ClassScout.OnSkillTrained(DOL.GS.GamePlayer,DOL.GS.Specialization)" -->
        <member name="T:DOL.GS.LootGeneratorMoney">
            <summary>
            MoneyLootGenerator
            At the moment this generaotr only adds money to the loot
            </summary>
        </member>
        <member name="M:DOL.GS.LootGeneratorMoney.GenerateLoot(DOL.GS.GameNPC,DOL.GS.GameObject)">
            <summary>
            Generate loot for given mob
            </summary>
            <param name="mob"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.INpcTemplate">
            <summary>
            Interface for all NPC templates
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.TemplateId">
            <summary>
            Gets the npc template ID
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Name">
            <summary>
            Gets the template npc name
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.GuildName">
            <summary>
            Gets the template npc guild name
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Model">
            <summary>
            Gets the template npc model
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Size">
            <summary>
            Gets the template npc size
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.MaxSpeed">
            <summary>
            Gets the template npc max speed
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Flags">
            <summary>
            Gets the template npc flags
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Inventory">
            <summary>
            Gets the template npc inventory
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.MeleeDamageType">
            <summary>
            Gets the template npc melee damage type
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.ParryChance">
            <summary>
            Gets the template npc parry chance
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.EvadeChance">
            <summary>
            Gets the template npc evade chance
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.BlockChance">
            <summary>
            Gets the template npc block chance
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.LeftHandSwingChance">
            <summary>
            Gets the template npc left hand swing chance
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Spells">
            <summary>
            Gets the template npc spells
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Styles">
            <summary>
            Gets the template npc styles
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.SpellLines">
            <summary>
            Gets the template npc spelllines
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Abilities">
            <summary>
            Gets the template npc abilities
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Strength">
             <summary>
             Gets the template npc Strength 
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Constitution">
             <summary>
             Gets the template npc Constitution 
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Dexterity">
             <summary>
             Gets the template npc Dexterity 
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Quickness">
             <summary>
             Gets the template npc Quickness 
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Piety">
             <summary>
             Gets the template npc Piety 
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Intelligence">
             <summary>
             Gets the template npc Intelligence 
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Empathy">
             <summary>
             Gets the template npc Empathy 
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.Charisma">
             <summary>
             Gets the template npc Charisma 
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.AggroLevel">
            <summary>
            Gets the template npc aggro level
            </summary>
        </member>
        <member name="P:DOL.GS.INpcTemplate.AggroRange">
            <summary>
            Gets the template npc aggro range
            </summary>
        </member>
        <member name="T:DOL.GS.DoorMgr">
            <summary>
            DoorMgr is manager of all door regular door and keep door
            </summary>		
        </member>
        <member name="M:DOL.GS.DoorMgr.Init">
            <summary>
            this function load all door from DB
            </summary>	
        </member>
        <member name="M:DOL.GS.DoorMgr.getDoorByID(System.Int32)">
            <summary>
            This function get the door object by door index
            </summary>
            <returns>return the door with the index</returns>
        </member>
        <member name="M:DOL.GS.DoorMgr.getDoorsCloseToSpot(System.UInt16,DOL.GS.IPoint3D,System.Int32)">
            <summary>
            This function get the door close to spot
            </summary>
            <returns>array of door</returns>
        </member>
        <member name="M:DOL.GS.DoorMgr.getDoorsCloseToSpot(System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This function get the door close to spot
            </summary>
            <returns>array of door</returns>
        </member>
        <member name="T:DOL.GS.PropertyCalc.CriticalSpellHitChanceCalculator">
            <summary>
            The critical hit chance calculator. Returns 0 .. 100 chance.
            
            BuffBonusCategory1 unused
            BuffBonusCategory2 unused
            BuffBonusCategory3 unused
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            AbilityBonus used
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.CharacterDeleteRequestHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GameRelic.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.GameRelic.Interact(DOL.GS.GamePlayer)">
            <summary>
            This method is called whenever a player tries to interact with this object
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameRelic.PlayerTakesRelic(DOL.GS.GamePlayer)">
            <summary>
            This method is called from the Interaction with the GameStaticItem
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:DOL.GS.GameRelic.PlayerLoosesRelic(System.Boolean)">
            <summary>
            Is called whenever the CurrentCarrier is supposed to loose the relic.
            </summary>
            <param name="removeFromInventory">Defines wheater the Item in the Inventory should be removed.</param>
        </member>
        <member name="M:DOL.GS.GameRelic.StartPlayerTimer(DOL.GS.GamePlayer)">
            <summary>
            Starts the "signalising effect" sequence on the carrier.
            </summary>
            <param name="player">Player to set the timer on. Timer stops if param is null</param>
        </member>
        <member name="M:DOL.GS.GameRelic.CarrierTimerTick(DOL.GS.RegionTimer)">
            <summary>
            The callback for the pulsing spelleffect
            </summary>
            <param name="timer">The ObjectTimerCallback object</param>
        </member>
        <member name="M:DOL.GS.GameRelic.SetHandlers(DOL.GS.GamePlayer,System.Boolean)">
            <summary>
            Enables or Deactivate the handlers for the carrying player behavior
            </summary>
            <param name="player"></param>
            <param name="activate"></param>
        </member>
        <member name="M:DOL.GS.GameRelic.LoadFromDatabase(DOL.Database.DataObject)">
            <summary>
            Loads the GameRelic from Database
            </summary>
            <param name="obj">The DBRelic-object for this relic</param>
        </member>
        <member name="M:DOL.GS.GameRelic.SaveIntoDatabase">
            <summary>
            Saves the current GameRelic to the database
            </summary>
        </member>
        <member name="P:DOL.GS.GameRelic.RelicType">
            <summary>
            Get the RelicType (melee or magic) 
            </summary>
        </member>
        <member name="P:DOL.GS.GameRelic.OriginalRealm">
            <summary>
            Get the original Realm of the relict (can only be 1(alb),2(mid) or 3(hibernia))
            </summary>
        </member>
        <member name="P:DOL.GS.GameRelic.CurrentRelicPad">
            <summary>
            Returns the carriing player if there is one.
            </summary>
        </member>
        <member name="P:DOL.GS.GameRelic.CurrentCarrier">
            <summary>
            Returns the carriing player if there is one.
            </summary>
        </member>
        <member name="T:DOL.GS.GameRelic.MiniTemp">
            <summary>
            Returns a Template for Name and Model for the relic
            </summary>
            <param name="Realm"></param>
            <param name="RelicType"></param>
            <returns>this object has only set Realm and Name</returns>
        </member>
        <member name="T:DOL.GS.Keeps.PositionMgr">
            <summary>
            Class to manage the guards Positions
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.PositionMgr.GetUsablePosition(DOL.GS.Keeps.GameKeepGuard)">
            <summary>
            Gets the most usable position directly from the database
            </summary>
            <param name="guard">The guard object</param>
            <returns>The position object</returns>
        </member>
        <member name="M:DOL.GS.Keeps.PositionMgr.GetUsablePosition(DOL.GS.Keeps.GameKeepBanner)">
            <summary>
            Gets the most usuable position for a banner directly from the database
            </summary>
            <param name="b">The banner object</param>
            <returns>The position object</returns>
        </member>
        <member name="M:DOL.GS.Keeps.PositionMgr.GetPosition(DOL.GS.Keeps.GameKeepGuard)">
            <summary>
            Gets the position at the exact entry from the database
            </summary>
            <param name="guard">The guard object</param>
            <returns>The position object</returns>
        </member>
        <member name="M:DOL.GS.Keeps.PositionMgr.LoadXY(DOL.GS.Keeps.GameKeepComponent,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Calculates X and Y based on component rotation and offset
            </summary>
            <param name="component">The assigned component object</param>
            <param name="inX">The argument X</param>
            <param name="inY">The argument Y</param>
            <param name="outX">The result X</param>
            <param name="outY">The result Y</param>
        </member>
        <member name="M:DOL.GS.Keeps.PositionMgr.SaveXY(DOL.GS.Keeps.GameKeepComponent,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Saves X and Y offsets
            </summary>
            <param name="component">The assigned component object</param>
            <param name="inX">The argument X</param>
            <param name="inY">The argument Y</param>
            <param name="outX">The result X</param>
            <param name="outY">The result Y</param>
        </member>
        <member name="M:DOL.GS.Keeps.PositionMgr.CreatePosition(System.Type,System.Int32,DOL.GS.GamePlayer,System.String,DOL.GS.Keeps.GameKeepComponent)">
            <summary>
            Creates a position
            </summary>
            <param name="type">The Type of the object which occupies the position</param>
            <param name="height">The height that the position is assigned to</param>
            <param name="player">The player object</param>
            <returns>The position object</returns>
        </member>
        <member name="M:DOL.GS.Keeps.PositionMgr.CreatePatrolPosition(System.String,DOL.GS.Keeps.GameKeepComponent,DOL.GS.GamePlayer)">
            <summary>
            Creates a guard patrol position
            </summary>
            <param name="guardID">The guard ID</param>
            <param name="component">The component object</param>
            <param name="player">The player object</param>
            <returns>The position object</returns>
        </member>
        <member name="M:DOL.GS.Keeps.PositionMgr.CreatePosition(System.String,DOL.GS.Keeps.GameKeepComponent,DOL.GS.GamePlayer)">
            <summary>
            Creates a position
            </summary>
            <param name="objectID">The object ID</param>
            <param name="component">The component object</param>
            <param name="player">The creating player object</param>
            <returns>The position object</returns>
        </member>
        <member name="M:DOL.GS.Keeps.PositionMgr.LoadPatrolPath(System.String,DOL.GS.Keeps.GameKeepComponent)">
            <summary>
            Method to retrieve the Patrol Path from the Patrol ID and Component
            
            We need this because we store this all using our offset system
            </summary>
            <param name="pathID">The path ID, which is the Patrol ID</param>
            <param name="component">The Component object</param>
            <returns>The Patrol path</returns>
        </member>
        <member name="M:DOL.GS.Keeps.PositionMgr.SavePatrolPath(System.String,DOL.GS.Movement.PathPoint,DOL.GS.Keeps.GameKeepComponent)">
            <summary>
            Method to save the Patrol Path using the Patrol ID and the Component
            </summary>
            <param name="pathID">The path ID, which is the Patrol ID</param>
            <param name="path">The Path object</param>
        </member>
        <member name="T:DOL.GS.Keeps.GuardLord">
            <summary>
            Class for the Lord Guard
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.GuardLord.Die(DOL.GS.GameObject)">
            <summary>
            When Lord dies, we update Area Mgr to call the various functions we need
            And update the player stats
            </summary>
            <param name="killer">The killer object</param>
        </member>
        <member name="M:DOL.GS.Keeps.GuardLord.Interact(DOL.GS.GamePlayer)">
            <summary>
            When we interact with lord, we display all possible options
            </summary>
            <param name="player">The player object</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.GuardLord.TakeDamage(DOL.GS.GameObject,DOL.GS.eDamageType,System.Int32,System.Int32)">
            <summary>
            From a great distance, damage does not harm lord
            </summary>
            <param name="source">The source of the damage</param>
            <param name="damageType">The type of the damage</param>
            <param name="damageAmount">The amount of the damage</param>
            <param name="criticalAmount">The critical hit amount of damage</param>
        </member>
        <member name="P:DOL.GS.Keeps.GuardLord.MaxHealth">
            <summary>
            Lord needs more health at the moment
            </summary>
        </member>
        <member name="F:DOL.GS.PropertyChangingAbility.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PropertyChangingAbility.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            send updates about the changes
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:DOL.Events.GameServerEvent">
            <summary>
            This class holds all possible server events.
            Only constants defined here!
            </summary>
        </member>
        <member name="M:DOL.Events.GameServerEvent.#ctor(System.String)">
            <summary>
            Constructs a new GameServerEvent
            </summary>
            <param name="name">the name of the event</param>
        </member>
        <member name="F:DOL.Events.GameServerEvent.Started">
            <summary>
            The Started event is fired whenever the GameServer has finished startup
            </summary>
        </member>
        <member name="F:DOL.Events.GameServerEvent.Stopped">
            <summary>
            The Stopped event is fired whenever the GameServer is stopping
            </summary>
        </member>
        <member name="T:DOL.Events.RiderMountEventArgs">
            <summary>
            Holds the arguments for the RiderMount event of GameNPC
            </summary>
        </member>
        <member name="M:DOL.Events.RiderMountEventArgs.#ctor(DOL.GS.GamePlayer,DOL.GS.GameLiving)">
            <summary>
            Constructs a new RiderMountEventArgs
            </summary>
            <param name="rider">the rider mounting</param>
            <param name="steed">the steed being mounted</param>
        </member>
        <member name="P:DOL.Events.RiderMountEventArgs.Rider">
            <summary>
            Gets the GamePlayer rider who is mounting the steed
            </summary>
        </member>
        <member name="P:DOL.Events.RiderMountEventArgs.Steed">
            <summary>
            Gets the GameLiving steed who is being mounted by the rider
            </summary>
        </member>
        <member name="T:DOL.Events.PlayerInventoryEvent">
            <summary>
            This class holds all possible player inventory events.
            Only constants defined here!
            </summary>
        </member>
        <member name="M:DOL.Events.PlayerInventoryEvent.#ctor(System.String)">
            <summary>
            Constructs a new PlayerInventory event
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:DOL.Events.PlayerInventoryEvent.ItemEquipped">
            <summary>
            The item was just equipped
            </summary>
        </member>
        <member name="F:DOL.Events.PlayerInventoryEvent.ItemUnequipped">
            <summary>
            The item was just unequipped
            </summary>
        </member>
        <member name="F:DOL.Events.PlayerInventoryEvent.ItemDropped">
            <summary>
            The item was just dropped
            </summary>
        </member>
        <member name="T:DOL.Events.GameNPCEvent">
            <summary>
            This class holds all possible GameNPC events.
            Only constants defined here!
            </summary>
        </member>
        <member name="M:DOL.Events.GameNPCEvent.#ctor(System.String)">
            <summary>
            Constructs a new GameNPCEvent
            </summary>
            <param name="name">the event name</param>
        </member>
        <member name="M:DOL.Events.GameNPCEvent.IsValidFor(System.Object)">
            <summary>
            Tests if this event is valid for the specified object
            </summary>
            <param name="o">The object for which the event wants to be registered</param>
            <returns>true if valid, false if not</returns>
        </member>
        <member name="F:DOL.Events.GameNPCEvent.TurnTo">
            <summary>
            The TurnTo event is fired whenever the npc turns towards some coordinates
            <seealso cref="T:DOL.Events.TurnToEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameNPCEvent.TurnToHeading">
            <summary>
            The TurnToHeading event is fired whenever the npc turns towards a specific heading
            <seealso cref="T:DOL.Events.TurnToHeadingEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameNPCEvent.ArriveAtTarget">
            <summary>
            The ArriveAtTarget event is fired whenever the npc arrives at it's WalkTo target
            <see cref="M:DOL.GS.GameNPC.WalkTo(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameNPCEvent.CloseToTarget">
            <summary>
            The CloseToTarget event is fired whenever the npc is close to it's WalkTo target
            <see cref="M:DOL.GS.GameNPC.WalkTo(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameNPCEvent.WalkTo">
            <summary>
            The WalkTo event is fired whenever the npc is commanded to walk to a specific target
            <seealso cref="T:DOL.Events.WalkToEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameNPCEvent.Walk">
            <summary>
            The Walk event is fired whenever the npc is commanded to walk
            <seealso cref="T:DOL.Events.WalkEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameNPCEvent.RiderMount">
            <summary>
            The RiderMount event is fired whenever the npc is mounted by a ride
            <seealso cref="T:DOL.Events.RiderMountEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameNPCEvent.RiderDismount">
            <summary>
            The RiderDismount event is fired whenever the rider dismounts from the npc
            <seealso cref="T:DOL.Events.RiderDismountEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.GameNPCEvent.PathMoveStarts">
            <summary>
            Fired when pathing starts
            </summary>
        </member>
        <member name="F:DOL.Events.GameNPCEvent.PathMoveEnds">
            <summary>
            Fired when npc is on end of path
            </summary>
        </member>
        <member name="F:DOL.Events.GameNPCEvent.OnAICallback">
            <summary>
            Fired on every AI callback
            </summary>
        </member>
        <member name="F:DOL.Events.GameNPCEvent.FollowLostTarget">
            <summary>
            Fired whenever following NPC lost its target
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.SprintEffect">
            <summary>
            The helper class for sprint ability
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.SprintEffect.m_tickTimer">
            <summary>
            The timer that reduce the endurance every interval
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.SprintEffect.m_player">
            <summary>
            The owner of the effect
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.SprintEffect.m_id">
            <summary>
            The internal unique effect ID
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.SprintEffect.m_idleTicks">
            <summary>
            The amount of timer ticks player was not moving
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.SprintEffect.#ctor">
            <summary>
            Creates a new sprint effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.SprintEffect.Start(DOL.GS.GamePlayer)">
            <summary>
            Start the sprinting on player
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.SprintEffect.Stop">
            <summary>
            Stop the effect on target
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.SprintEffect.PulseCallback(DOL.GS.RegionTimer)">
            <summary>
            Sprint "pulse"
            </summary>
            <param name="callingTimer"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Effects.SprintEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect must be canceled
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SprintEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SprintEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SprintEffect.Icon">
            <summary>
            Icon to show on players, can be id
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SprintEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SprintEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.ShadeEffect">
            <summary>
            The helper effect for player shade mode
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.ShadeEffect.m_player">
            <summary>
            The effect owner
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.ShadeEffect.#ctor">
            <summary>
            Creates a new stealth effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.ShadeEffect.Start(DOL.GS.GamePlayer)">
            <summary>
            Start the shade effect on player
            </summary>
            <param name="player">The effect target</param>
        </member>
        <member name="M:DOL.GS.Effects.ShadeEffect.Stop">
            <summary>
            Stop the effect on target
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.ShadeEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect must be canceled
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.ShadeEffect.m_id">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.ShadeEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.ShadeEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in seconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.ShadeEffect.Icon">
            <summary>
            Icon to show on players, can be id
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.ShadeEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.ShadeEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.GemCutting">
            <summary>
            The cloth crafting skill
            </summary>
        </member>
        <member name="M:DOL.GS.GemCutting.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.GemCutting.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.GemCutting.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="T:DOL.GS.Alchemy">
            <summary>
            Alchemy is the advanced crafting skill to add proc and reactive effect on item
            </summary>
        </member>
        <member name="M:DOL.GS.Alchemy.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.Alchemy.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.Alchemy.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="M:DOL.GS.Alchemy.IsAllowedToCombine(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            This function is called when player accept the combine
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="M:DOL.GS.Alchemy.ApplyMagicalEffect(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Apply all needed magical bonus to the item
            </summary>
            <param name="player"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Alchemy.GetItemMaxCharges(DOL.Database.InventoryItem)">
            <summary>
            Get the maximum charge the item will have
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.AI.Brain.LordBrain">
            <summary>
            The Brain for the Area Lord
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.LordBrain.Think">
            <summary>
            The Brain Think Method
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.LordBrain.CheckHealing">
            <summary>
            Check if the lord can heal himself
            </summary>
        </member>
        <member name="T:DOL.AI.Brain.ControlledNpc">
            <summary>
            A brain that can be controlled
            </summary>
        </member>
        <member name="T:DOL.AI.Brain.IControlledBrain">
            <summary>
            Interface for controllable brains
            </summary>
        </member>
        <member name="F:DOL.AI.Brain.ControlledNpc.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.AI.Brain.ControlledNpc.m_owner">
            <summary>
            Holds the controlling player of this brain
            </summary>
        </member>
        <member name="F:DOL.AI.Brain.ControlledNpc.m_walkState">
            <summary>
            Holds the walk state of the brain
            </summary>
        </member>
        <member name="F:DOL.AI.Brain.ControlledNpc.m_aggressionState">
            <summary>
            Holds the aggression level of the brain
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs new controlled npc brain
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.Attack(DOL.GS.GameObject)">
            <summary>
            Attack the target on command
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.Follow(DOL.GS.GameObject)">
            <summary>
            Follow the target on command
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.Stay">
            <summary>
            Stay at current position on command
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.ComeHere">
            <summary>
            Go to owner on command
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.Goto(DOL.GS.GameObject)">
            <summary>
            Go to targets location on command
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.UpdatePetWindow">
            <summary>
            Updates the pet window
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.FollowOwner">
            <summary>
            Start following the owner
            </summary>
        </member>
        <member name="F:DOL.AI.Brain.ControlledNpc.m_orderAttackTarget">
            <summary>
            The attack target ordered by the owner
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.Start">
            <summary>
            Starts the brain thinking and resets the inactivity countdown
            </summary>
            <returns>true if started</returns>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.Stop">
            <summary>
            Stops the brain thinking
            </summary>
            <returns>true if stopped</returns>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.Think">
            <summary>
            Do the mob AI
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Receives all messages of the body
            </summary>
            <param name="e">The event received</param>
            <param name="sender">The event sender</param>
            <param name="args">The event arguments</param>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.OnFollowLostTarget(DOL.GS.GameObject)">
            <summary>
            Lost follow target event
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.AddToAggroList(DOL.GS.GameLiving,System.Int32)">
            <summary>
            Add living to the aggrolist
            aggroamount can be negative to lower amount of aggro		
            </summary>
            <param name="living"></param>
            <param name="aggroamount"></param>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.CalculateNextAttackTarget">
            <summary>
            Returns the best target to attack
            </summary>
            <returns>the best target</returns>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.AttackMostWanted">
            <summary>
            Selects and attacks the next target or does nothing
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.ControlledNpc.OnOwnerAttacked(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Owner attacked event
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="P:DOL.AI.Brain.ControlledNpc.NoPlayersStopDelay">
            <summary>
            The number of seconds/10 this brain will stay active even when no player is close
            Overriden. Returns int.MaxValue
            </summary>
        </member>
        <member name="P:DOL.AI.Brain.ControlledNpc.ThinkInterval">
            <summary>
            The interval for thinking, 1.5 seconds
            </summary>
        </member>
        <member name="P:DOL.AI.Brain.ControlledNpc.Owner">
            <summary>
            Gets the controlling owner of the brain
            </summary>
        </member>
        <member name="P:DOL.AI.Brain.ControlledNpc.WalkState">
            <summary>
            Gets or sets the walk state of the brain
            </summary>
        </member>
        <member name="P:DOL.AI.Brain.ControlledNpc.AggressionState">
            <summary>
            Gets or sets the aggression state of the brain
            </summary>
        </member>
        <member name="T:DOL.GS.Trainer.BainsheeTrainer">
            <summary>
            Bainshee Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.BainsheeTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.BainsheeTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.BainsheeTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.DiscipleTrainer">
            <summary>
            Disciple Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.DiscipleTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.DiscipleTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.SkillHandler.StagAbilityHandler">
            <summary>
            Handler for Stag Ability clicks
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.StagAbilityHandler.REUSE_TIMER">
            <summary>
            The ability reuse time in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.StagAbilityHandler.DURATION">
            <summary>
            The ability effect duration in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.StagAbilityHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.SkillHandler.FlurryAbilityHandler">
            <summary>
            Handler for Flurry Ability clicks
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.FlurryAbilityHandler.REUSE_TIMER">
            <summary>
            The reuse time in milliseconds for flurry ability
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.FlurryAbilityHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.SkillHandler.FlurryAbilityHandler.Execute(DOL.GS.Ability,DOL.GS.GamePlayer)">
            <summary>
            Execute the ability
            </summary>
            <param name="ab">The ability executed</param>
            <param name="player">The player that used the ability</param>
        </member>
        <member name="M:DOL.GS.Quests.QuestBuilder.AddInteraction(DOL.GS.GameNPC,System.Int32,DOL.GS.Quests.eTextType,System.String,System.String)">
            <summary>
            Adds an interact QuestPart that will display some sort of text, depending on texttype.
            </summary>
            <param name="questType">type of quest this interact Questpart should be added to.</param>
            <param name="npc">NPC player must interact with</param>
            <param name="step">QuestStep Player must have to fire interaction. 
            -1 means Player does not have quest defined by questType
            0 means Player has quest defined by questType
            >0 meanst Player has quest defined by questType and is at the given QuestStep</param>
            <param name="textType"> Type of text should be displayed: Emote, Dialog, Direct Say, Brodcast, ...</param>
            <param name="triggerKeyword">Keyword Player must whisper to NPc to fire interaction, (player must click on word in brackets)</param>
            <param name="message">Actual message being displayed</param>
            <returns>generated BaseQuestPart be altered further via AddTrigger, AddRequirement, AddAction</returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestBuilder.AddInteraction(DOL.GS.GameNPC,System.Int32,System.Int32,DOL.GS.Quests.eTextType,System.String,System.String)">
            <summary>
            Adds an interact QuestPart that will display some sort of text, depending on texttype.
            </summary>
            <param name="questType">type of quest this interact Questpart should be added to.</param>
            <param name="npc">NPC player must interact with</param>
            <param name="step">QuestStep Player must have to fire interaction. 
            -1 means Player does not have quest defined by questType
            0 means Player has quest defined by questType
            >0 meanst Player has quest defined by questType and is at the given QuestStep</param>
            <param name="textType"> Type of text should be displayed: Emote, Dialog, Direct Say, Brodcast, ...</param>
            <param name="triggerKeyword">Keyword Player must whisper to NPc to fire interaction, (player must click on word in brackets)</param>
            <param name="message">Actual message being displayed</param>
            <returns>generated BaseQuestPart be altered further via AddTrigger, AddRequirement, AddAction</returns>
        </member>
        <member name="T:DOL.GS.RealmAbilities.IgnorePainAbility">
            <summary>
            Ignore Pain, healing
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.IgnorePainAbility.Execute(DOL.GS.GameLiving)">
            <summary>
            Action
            </summary>
            <param name="living"></param>
        </member>
        <member name="T:DOL.GS.Quests.IQuestRequirement">
            <summary>
            Requirements describe what must be true to allow a QuestAction to fire.
            Level of player, Step of Quest, Class of Player, etc... There are also some variables to add
            additional parameters. To fire a QuestAction ALL requirements must be fulfilled.         
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.IQuestRequirement.Check(DOL.Events.DOLEvent,System.Object,System.EventArgs,DOL.GS.GamePlayer)">
            <summary>
            Checks the requirement whenever a trigger associated with this questpart fires.(returns true)
            </summary>        
            <param name="e">DolEvent of notify call</param>
            <param name="sender">Sender of notify call</param>
            <param name="args">EventArgs of notify call</param>
            <param name="player">GamePlayer this call is related to, can be null</param>
            <returns>true if all Requirements forQuestPart where fullfilled, else false</returns>
        </member>
        <member name="T:DOL.GS.PropertyCalc.MaxHealthCalculator">
             <summary>
             The Max HP calculator
            
             BuffBonusCategory1 is used for absolute HP buffs
             BuffBonusCategory2 unused
             BuffBonusCategory3 unused
             BuffBonusCategory4 unused
             BuffBonusMultCategory1 unused
             </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.FumbleChanceCalculator">
            <summary>
            The fumble chance calculator. Returns 0 .. 1000 chance.
            
            BuffBonusCategory1 unused
            BuffBonusCategory2 unused
            BuffBonusCategory3 is used for debuff
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassBonedancer">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassMystic">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassValewalker">
             <summary>
            
             </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassForester">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassValewalker.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassHeretic">
             <summary>
            
             </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassHeretic.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.SkillHandler.CamouflageSpecHandler">
            <summary>
            Handler for Stealth Spec clicks
            </summary>
        </member>
        <member name="M:DOL.GS.SkillHandler.CamouflageSpecHandler.Execute(DOL.GS.Ability,DOL.GS.GamePlayer)">
            <summary>
            Executes the stealth ability
            </summary>
            <param name="spec"></param>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.PropertyCalc.CriticalMeleeHitChanceCalculator">
            <summary>
            The critical hit chance calculator. Returns 0 .. 100 chance.
            
            BuffBonusCategory1 unused
            BuffBonusCategory2 unused
            BuffBonusCategory3 unused
            BuffBonusCategory4 for uncapped realm ability bonus
            BuffBonusMultCategory1 unused
            
            Crit propability is capped to 50% except for berserk 
            </summary>
        </member>
        <member name="T:DOL.GS.Alliance">
            <summary>
            Alliance are the alliance between guild in game
            </summary>
        </member>
        <member name="M:DOL.GS.Alliance.SendMessageToAllianceMembers(System.String,DOL.GS.PacketHandler.eChatType,DOL.GS.PacketHandler.eChatLoc)">
            <summary>
            send message to all member of alliance
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:DOL.GS.Alliance.LoadFromDatabase(DOL.Database.DataObject)">
            <summary>
            Loads this alliance from an alliance table
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:DOL.GS.Alliance.SaveIntoDatabase">
            <summary>
            Saves this alliance to database
            </summary>
        </member>
        <member name="T:DOL.GS.GameSiegeTrebuchet">
            <summary>
            GameMovingObject is a base class for boats and siege weapons.
            </summary>
        </member>
        <member name="T:DOL.GS.GameSiegeCatapult">
            <summary>
            GameMovingObject is a base class for boats and siege weapons.
            </summary>
        </member>
        <member name="T:DOL.Events.YellEventArgs">
            <summary>
            Holds the arguments for the Yell event of GameLivings
            </summary>
        </member>
        <member name="T:DOL.Events.SayEventArgs">
            <summary>
            Holds the arguments for the Say event of GameLivings
            </summary>
        </member>
        <member name="M:DOL.Events.SayEventArgs.#ctor(System.String)">
            <summary>
            Constructs a new SayEventArgs
            </summary>
            <param name="text">the text being said</param>
        </member>
        <member name="P:DOL.Events.SayEventArgs.Text">
            <summary>
            Gets the text being said
            </summary>
        </member>
        <member name="M:DOL.Events.YellEventArgs.#ctor(System.String)">
            <summary>
            Constructs a new YellEventArgs
            </summary>
            <param name="text">the text being yelled</param>
        </member>
        <member name="T:DOL.GS.Effects.GameEffectPlayerList">
            <summary>
            Sends updates only for changed effects
            when iterating over this effect list lock the list!
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.GameEffectList">
            <summary>
            Holds &amp; manages multiple effects on livings
            when iterating over this effect list lock the list!
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameEffectList.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameEffectList.m_effects">
            <summary>
            Stores all effects
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameEffectList.m_owner">
            <summary>
            The owner of this list
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameEffectList.m_runningID">
            <summary>
            The current unique effect ID
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameEffectList.m_changesCount">
            <summary>
            The count of started changes to the list
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectList.#ctor(DOL.GS.GameLiving)">
            <summary>
            constructor
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectList.Add(DOL.GS.Effects.IGameEffect)">
            <summary>
            add a new effect to the effectlist, it does not start the effect
            </summary>
            <param name="effect">The effect to add to the list</param>
            <returns>true if the effect was added</returns>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectList.Remove(DOL.GS.Effects.IGameEffect)">
            <summary>
            remove effect
            </summary>
            <param name="effect">The effect to remove from the list</param>
            <returns>true if the effect was removed</returns>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectList.CancelAll">
            <summary>
            Cancels all effects
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectList.OnEffectsChanged(DOL.GS.Effects.IGameEffect)">
            <summary>
            Called when an effect changed
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectList.BeginChanges">
            <summary>
            Begins multiple changes to the list that should not send updates
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectList.CommitChanges">
            <summary>
            Updates all list changes to the owner since BeginChanges was called
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectList.UpdateChangedEffects">
            <summary>
            Updates the changed effects.
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectList.GetOfType(System.Type)">
            <summary>
            Find the first occurence of an effect with given type
            </summary>
            <param name="effectType"></param>
            <returns>effect or null</returns>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectList.GetAllOfType(System.Type)">
            <summary>
            Find effects of specific type
            </summary>
            <param name="effectType"></param>
            <returns>resulting effectlist</returns>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectList.CountOfType(System.Type)">
            <summary>
            Count effects of a specific type
            </summary>
            <param name="effectType"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectList.GetEnumerator">
            <summary>
            Returns an enumerator for the effects
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Effects.GameEffectList.Count">
            <summary>
            Gets count of all stored effects
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameEffectPlayerList.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameEffectPlayerList.m_changedEffects">
            <summary>
            Holds the list of changed effects
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.GameEffectPlayerList.m_lastUpdateEffectsCount">
            <summary>
            The count of effects on last update
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectPlayerList.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new GameEffectPlayerList
            </summary>
            <param name="owner">The owner of effect list</param>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectPlayerList.OnEffectsChanged(DOL.GS.Effects.IGameEffect)">
            <summary>
            Called when an effect changed
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectPlayerList.Add(DOL.GS.Effects.IGameEffect)">
            <summary>
            add a new effect to the effectlist, it does not start the effect
            </summary>
            <param name="effect">The effect to add to the list</param>
            <returns>true if the effect was added</returns>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectPlayerList.Remove(DOL.GS.Effects.IGameEffect)">
            <summary>
            remove effect
            </summary>
            <param name="effect">The effect to remove from the list</param>
            <returns>true if the effect was removed</returns>
        </member>
        <member name="M:DOL.GS.Effects.GameEffectPlayerList.UpdateChangedEffects">
            <summary>
            Updates changed effects to the owner.
            </summary>
        </member>
        <member name="T:DOL.GS.Trainer.SeerTrainer">
            <summary>
            Seer Trainer
            </summary>	
        </member>
        <member name="F:DOL.GS.Trainer.SeerTrainer.PRACTICE_WEAPON_ID">
            <summary>
            The practice weapon template ID
            </summary>
        </member>
        <member name="F:DOL.GS.Trainer.SeerTrainer.PRACTICE_SHIELD_ID">
            <summary>
            The practice shield template ID
            </summary>
        </member>
        <member name="M:DOL.GS.Trainer.SeerTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.SeerTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.ValewalkerTrainer">
            <summary>
            Valewalker Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.ValewalkerTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ValewalkerTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ValewalkerTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.GuardianTrainer">
            <summary>
            Guardian Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.GuardianTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.GuardianTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.BlademasterTrainer">
            <summary>
            Blademaster Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.BlademasterTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.BlademasterTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.BlademasterTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Spells.SavageDamageHandler">
            <summary>
            Summary description for SavageHasteHandler.
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.MeleeDamageBuff">
            <summary>
            Melee damage buff
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.MeleeDamageBuff.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            send updates about the changes
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:DOL.GS.Spells.EnduranceHealSpellHandler">
             <summary>
            
             </summary>
        </member>
        <member name="M:DOL.GS.Spells.EnduranceHealSpellHandler.StartSpell(DOL.GS.GameLiving)">
            <summary>
            Execute heal spell
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.Spells.EnduranceHealSpellHandler.HealTarget(DOL.GS.GameLiving,System.Int32)">
            <summary>
            Heals hit points of one target and sends needed messages, no spell effects
            </summary>
            <param name="target"></param>
            <param name="amount">amount of hit points to heal</param>
            <returns>true if heal was done</returns>
        </member>
        <member name="M:DOL.GS.Spells.EnduranceHealSpellHandler.CalculateHealVariance(System.Int32@,System.Int32@)">
            <summary>
            Calculates heal variance based on spec
            </summary>
            <param name="min">store min variance here</param>
            <param name="max">store max variance here</param>
        </member>
        <member name="T:DOL.GS.Spells.CombatHealSpellHandler">
            <summary>
            Palading heal chant works only in combat
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.CombatHealSpellHandler.StartSpell(DOL.GS.GameLiving)">
            <summary>
            Execute heal spell
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:DOL.GS.Spells.StrengthShear">
            <summary>
            Shears strength buff 
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.AbstractBuffShear">
            <summary>
            Base class for all buff shearing spells
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.AbstractBuffShear.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            called after normal spell cast is completed and effect has to be started
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.AbstractBuffShear.OnDirectEffect(DOL.GS.GameLiving,System.Double)">
            <summary>
            execute non duration spell effect on target
            </summary>
            <param name="target"></param>
            <param name="effectiveness"></param>
        </member>
        <member name="M:DOL.GS.Spells.AbstractBuffShear.OnSpellResisted(DOL.GS.GameLiving)">
            <summary>
            When spell was resisted
            </summary>
            <param name="target">the target that resisted the spell</param>
        </member>
        <member name="P:DOL.GS.Spells.AbstractBuffShear.ShearSpellType">
            <summary>
            The spell type to shear
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.AbstractBuffShear.DelveSpellType">
            <summary>
            The spell type shown in delve info
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.AbstractBuffShear.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DexterityShear">
            <summary>
            Shears dexterity buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ConstitutionShear">
            <summary>
            Shears constitution buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.AcuityShear">
            <summary>
            Shears acuity buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.StrengthConstitutionShear">
            <summary>
            Shears str/con buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DexterityQuicknessShear">
            <summary>
            Shears dex/qui buff
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.AblativeArmorSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="T:DOL.GS.RealmAbilities.MasteryOfStealthAbility">
            <summary>
            Mastery of Stealth RA
            </summary>
        </member>
        <member name="T:DOL.GS.Quests.AbstractQuest">
            <summary>
            Declares the abstract quest class from which all user created
            quests must derive!
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.AbstractQuest.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.AbstractQuest.m_questPlayer">
            <summary>
            The player doing the quest
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.AbstractQuest.m_dbQuest">
            <summary>
            The quest database object, storing the information for the player
            and the quest. Eg. QuestStep etc.
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.#ctor">
            <summary>
            Constructs a new empty Quest
            </summary>		
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new Quest
            </summary>
            <param name="questingPlayer">The player doing this quest</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.#ctor(DOL.GS.GamePlayer,System.Int32)">
            <summary>
            Constructs a new Quest
            </summary>
            <param name="questingPlayer">The player doing this quest</param>
            <param name="step">The current step the player is on</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.#ctor(DOL.GS.GamePlayer,DOL.Database.DBQuest)">
            <summary>
            Constructs a new Quest from a database Object
            </summary>
            <param name="questingPlayer">The player doing the quest</param>
            <param name="dbQuest">The database object</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.LoadFromDatabase(DOL.GS.GamePlayer,DOL.Database.DBQuest)">
            <summary>
            Loads a quest from the databaseobject and assigns it to a player
            </summary>
            <param name="targetPlayer">Player to assign the loaded quest</param>
            <param name="dbQuest">Quest to load</param>
            <returns>The created quest</returns>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.SaveIntoDatabase">
            <summary>
            Saves this quest into the database
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.DeleteFromDatabase">
            <summary>
            Deletes this quest from the database
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.CheckQuestQualification(DOL.GS.GamePlayer)">
            <summary>
            This method needs to be implemented in each quest.
            This method checks if a player qualifies for this quest
            </summary>
            <returns>true if qualified, false if not</returns>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.FinishQuest">
            <summary>
            Called to finish the quest.
            Should be overridden and some rewards given etc.
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.AbortQuest">
            <summary>
            Called to abort the quest and remove it from the database!
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            This method needs to be implemented in each quest.
            It is the core of the quest. The global event hook of the GamePlayer.
            This method will be called whenever a GamePlayer with this quest
            fires ANY event!
            </summary>
            <param name="e">The event type</param>
            <param name="sender">The sender of the event</param>
            <param name="args">The event arguments</param>
        </member>
        <member name="F:DOL.GS.Quests.AbstractQuest.m_customProperties">
            <summary>
            This HybridDictionary holds all the custom properties of this quest
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.ParseCustomProperties">
            <summary>
            This method parses the custom properties string of the m_dbQuest
            into the HybridDictionary for easier use and access
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.SetCustomProperty(System.String,System.String)">
            <summary>
            This method sets a custom Property to a specific value
            </summary>
            <param name="key">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.SaveCustomProperties">
            <summary>
            Saves the custom properties into the database
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.RemoveCustomProperty(System.String)">
            <summary>
            Removes a custom property from the database
            </summary>
            <param name="key">The key name of the property</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuest.GetCustomProperty(System.String)">
            <summary>
            This method retrieves a custom property from the database
            </summary>
            <param name="key">The property key</param>
            <returns>The property value</returns>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuest.MaxQuestCount">
            <summary>
            Retrieves how much time player can do the quest
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuest.QuestPlayer">
            <summary>
            Gets or sets the player doing the quest
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuest.Name">
            <summary>
            Retrieves the name of the quest
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuest.Description">
            <summary>
            Retrieves the description for the current quest step
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuest.Step">
            <summary>
            Gets or Sets the current step of the quest.
            Changing the Quest Step will propably change the 
            description and also update the player quest list and
            store the changes in the database!
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.StatCalculator">
            <summary>
            The Character Stat calculator
            
            BuffBonusCategory1 is used for all single stat buffs
            BuffBonusCategory2 is used for all dual stat buffs
            BuffBonusCategory3 is used for all debuffs (positive values expected here)
            BuffBonusCategory4 is used for all other uncapped modifications
                               category 4 kicks in at last
            BuffBonusMultCategory1 used after all buffs/debuffs
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.SpeedDecreaseDurationPercentCalculator">
            <summary>
            The melee damage bonus percent calculator
            
            BuffBonusCategory1 is used for buffs
            BuffBonusCategory2 unused
            BuffBonusCategory3 is used for debuff
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.DPSCalculator">
            <summary>
            The Character Stat calculator
            
            BuffBonusCategory1 is used for all single stat buffs
            BuffBonusCategory2 is used for all dual stat buffs
            BuffBonusCategory3 is used for all debuffs (positive values expected here)
            BuffBonusCategory4 is used for all other uncapped modifications
                               category 4 kicks in at last
            BuffBonusMultCategory1 used after all buffs/debuffs
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.ArcherySpeedPercentCalculator">
             <summary>
             The Archery Speed bonus percent calculator
            
             BuffBonusCategory1 is used for buffs
             BuffBonusCategory2 unused
             BuffBonusCategory3 is used for debuff
             BuffBonusCategory4 unused
             BuffBonusMultCategory1 unused
             </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassWarlock">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassSpiritmaster">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassBlademaster">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassBlademaster.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassBard">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassBard.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassAnimist">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassAnimist.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Keeps.KeepMgr">
            <summary>
            KeepManager
            The manager that keeps track of the keeps and stuff.. in the future.
            Right now it just has some utilities.
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.KeepMgr.m_keeps">
            <summary>
            list of all keeps
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.KeepMgr.Logger">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.KeepMgr.Load">
            <summary>
            load all keep from DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.KeepMgr.getKeepByID(System.Int32)">
            <summary>
            get keep by ID
            </summary>
            <param name="id">id of keep</param>
            <returns> Game keep object with keepid = id</returns>
        </member>
        <member name="M:DOL.GS.Keeps.KeepMgr.getKeepsCloseToSpot(System.UInt16,DOL.GS.IPoint3D,System.Int32)">
            <summary>
            get list of keep close to spot
            </summary>
            <param name="regionid"></param>
            <param name="point3d"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.KeepMgr.getKeepCloseToSpot(System.UInt16,DOL.GS.IPoint3D,System.Int32)">
            <summary>
            get the keep with minimum distance close to spot
            </summary>
            <param name="regionid"></param>
            <param name="point3d"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.KeepMgr.getKeepsCloseToSpot(System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             get list of keep close to spot
            </summary>
            <param name="regionid"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.KeepMgr.getKeepCloseToSpot(System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            get the keep with minimum distance close to spot
            </summary>
            <param name="regionid"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.KeepMgr.GetTowerCountByRealm(DOL.GS.PacketHandler.eRealm)">
            <summary>
            get keep count controlled by realm to calculate keep bonus
            </summary>
            <param name="realm"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.KeepMgr.GetKeepCountByRealm(DOL.GS.PacketHandler.eRealm)">
            <summary>
            get keep count by realm
            </summary>
            <param name="realm"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.KeepMgr.GetHeightFromLevel(System.Byte)">
            <summary>
            Gets a component height from a level
            </summary>
            <param name="level">The level</param>
            <returns>The height</returns>
        </member>
        <member name="P:DOL.GS.Keeps.KeepMgr.Keeps">
            <summary>
            Gets a copy of the current keeps table
            </summary>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Util">
            <summary>
            Generic purpose utility collection
            </summary>
        </member>
        <member name="F:DOL.GS.Util.m_random">
            <summary>
            Holds the random number generator instance
            </summary>
        </member>
        <member name="M:DOL.GS.Util.Random(System.Int32)">
            <summary>
            Generates a random number between 0..max inclusive 0 AND max
            </summary>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Util.Random(System.Int32,System.Int32)">
            <summary>
            Generates a random number between min..max inclusive min AND max
            </summary>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Util.RandomDouble">
            <summary>
            Generates a random number between 0.0 and 1.0.
            </summary>
            <returns>
            A double-precision floating point number greater than
            or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="M:DOL.GS.Util.Chance(System.Int32)">
            <summary>
            returns in chancePercent% cases true
            </summary>
            <param name="chancePercent">0 .. 100</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Util.ChanceDouble(System.Double)">
            <summary>
            returns in chancePercent% cases true
            </summary>
            <param name="chancePercent">0.0 .. 1.0</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Util.MakeSentence(System.String,System.String[])">
            <summary>
            Make a sentence, first letter uppercase and replace all parameters
            </summary>
            <param name="message"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Util.IsEmpty(System.String)">
            <summary>
            Checks wether string is empty.
            empty means either null or ""
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Util.GetThreadStack(System.Threading.Thread)">
            <summary>
            Gets the stacktrace of a thread
            </summary>
            <param name="thread">Thread</param>
            <returns>The thread's stacktrace</returns>
        </member>
        <member name="M:DOL.GS.Util.FormatStackTrace(System.Diagnostics.StackTrace)">
            <summary>
            Formats the stacktrace
            </summary>
            <param name="trace">The stacktrace to format</param>
            <returns>The fromatted string of stacktrace object</returns>
        </member>
        <member name="P:DOL.GS.Util.RandomGen">
            <summary>
            Gets the random number generator
            </summary>
        </member>
        <member name="T:DOL.GS.LanguageMgr">
            <summary>
            LanguageMgr take care about all support of multi language on server
            </summary>
        </member>
        <member name="F:DOL.GS.LanguageMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.LanguageMgr.Initialize">
            <summary>
            This function load all language file into an hashtable
            </summary>
        </member>
        <member name="M:DOL.GS.LanguageMgr.GetString(System.String,System.String)">
            <summary>
            This function get translated string in language file from key
            </summary>
            <returns>return the string get from language file</returns>
        </member>
        <member name="M:DOL.GS.LanguageMgr.ParseDirectory(System.String,System.String)">
            <summary>
            Parses a directory for all source files
            </summary>
            <param name="path">The root directory to start the search in</param>
            <param name="filter">A filter representing the types of files to search for</param>
        </member>
        <member name="M:DOL.GS.LanguageMgr.ParseLanguageFile(System.String)">
            <summary>
            This function parse the language file to add the translated sentence in hashtable
            </summary>
        </member>
        <member name="T:DOL.GS.GuildMgr">
            <summary>
            The GuildMgr holds pointers to all guilds, and pointers
            to their members.
            </summary>
        </member>
        <member name="F:DOL.GS.GuildMgr.COST_RE_EMBLEM">
            <summary>
            The cost in copper to reemblem the guild
            </summary>
        </member>
        <member name="F:DOL.GS.GuildMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GuildMgr.m_guilds">
            <summary>
            ArrayList of all guilds in the game
            </summary>
        </member>
        <member name="F:DOL.GS.GuildMgr.m_lastID">
            <summary>
            Unique ID of last added guild
            </summary>
        </member>
        <member name="M:DOL.GS.GuildMgr.AddGuild(DOL.GS.Guild)">
            <summary>
            Adds a guild to the list of guilds
            </summary>
            <param name="guild">The guild to add</param>
            <returns>True if the function succeeded, otherwise false</returns>
        </member>
        <member name="M:DOL.GS.GuildMgr.RemoveGuild(DOL.GS.Guild)">
            <summary>
            Removes a guild from the manager
            </summary>
            <param name="guild">the guild</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GuildMgr.DoesGuildExist(System.String)">
            <summary>
            Checks if a guild with guildName exists
            </summary>
            <param name="guildName">The guild to check</param>
            <returns>true or false</returns>
        </member>
        <member name="M:DOL.GS.GuildMgr.CreateGuild(DOL.GS.GamePlayer,System.String)">
            <summary>
            Creates a new guild
            </summary>
            <returns>GuildEntry</returns>
        </member>
        <member name="M:DOL.GS.GuildMgr.DeleteGuild(System.String)">
            <summary>
            Delete's a guild
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:DOL.GS.GuildMgr.GetGuildByName(System.String)">
            <summary>
            Returns a guild according to the matching name
            </summary>
            <returns>Guild</returns>
        </member>
        <member name="M:DOL.GS.GuildMgr.ListGuild">
            <summary>
            Returns a list of guilds by their status
            </summary>
            <returns>ArrayList of guilds</returns>
        </member>
        <member name="M:DOL.GS.GuildMgr.LoadAllGuilds">
            <summary>
            Load all guilds and alliances from the database
            </summary>
        </member>
        <member name="M:DOL.GS.GuildMgr.SaveAllGuilds">
            <summary>
            Save all guild into database
            </summary>
        </member>
        <member name="M:DOL.GS.GuildMgr.IsEmblemUsed(System.Int32)">
            <summary>
            Returns true if a guild is using the emblem
            </summary>
            <param name="emblem"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GuildMgr.ChangeEmblem(DOL.GS.GamePlayer,System.Int32,System.Int32)">
            <summary>
            Process for changing an emblem
            </summary>
            <param name="player"></param>
            <param name="oldemblem"></param>
            <param name="newemblem"></param>
        </member>
        <member name="T:DOL.GS.Keeps.KeepGuildMgr">
            <summary>
            Class to manage all the dealings with Guilds
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.KeepGuildMgr.SendDoorDestroyedMessage(DOL.GS.Keeps.GameKeepDoor)">
            <summary>
            Sends a message to the guild informing them that a door has been destroyed
            </summary>
            <param name="door">The door object</param>
        </member>
        <member name="M:DOL.GS.Keeps.KeepGuildMgr.SendMessageToGuild(System.String,DOL.GS.Guild)">
            <summary>
            Send message to a guild
            </summary>
            <param name="message">The message</param>
            <param name="guild">The guild</param>
        </member>
        <member name="F:DOL.Mail.MailMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.AbstractCommandHandler">
            <summary>
            Providing some basic command handler functionality
            </summary>
        </member>
        <member name="T:DOL.GS.GameSiegeRam">
            <summary>
            GameMovingObject is a base class for boats and siege weapons.
            </summary>
        </member>
        <member name="T:DOL.Events.WhisperEventArgs">
            <summary>
            Holds the arguments for the Whisper event of GameLivings
            </summary>
        </member>
        <member name="M:DOL.Events.WhisperEventArgs.#ctor(DOL.GS.GameLiving,System.String)">
            <summary>
            Constructs a new WhisperEventArgs
            </summary>
            <param name="target">the target of the whisper</param>
            <param name="text">the text being whispered</param>
        </member>
        <member name="P:DOL.Events.WhisperEventArgs.Target">
            <summary>
            Gets the target of the whisper
            </summary>
        </member>
        <member name="T:DOL.Events.InteractEventArgs">
            <summary>
            Holds the arguments for the Interact event of GameObjects
            </summary>
        </member>
        <member name="M:DOL.Events.InteractEventArgs.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new interact event argument class
            </summary>
            <param name="source">the player wanting to interact</param>
        </member>
        <member name="T:DOL.GS.Effects.TimedEffect">
            <summary>
            base for all effects that are timed and should stop on itself
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.TimedEffect.m_expireTimer">
            <summary>
            The timer that will cancel the effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.TimedEffect.#ctor(System.Int32)">
            <summary>
            create timed effect that will last the given timespan in milliseconds
            </summary>
            <param name="timespan"></param>
        </member>
        <member name="M:DOL.GS.Effects.TimedEffect.Start(DOL.GS.GameLiving)">
            <summary>
            Start the timed effect on target
            </summary>
            <param name="target">The effect target</param>
        </member>
        <member name="M:DOL.GS.Effects.TimedEffect.Stop">
            <summary>
            Stop the timed effect on owner
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.TimedEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in milliseconds
            </summary>
        </member>
        <member name="T:DOL.GS.DatabaseConverters.Version004">
            <summary>
            Converts the database format to the version 3
            </summary>
        </member>
        <member name="F:DOL.GS.DatabaseConverters.Version004.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.DatabaseConverters.Version004.ConvertDatabase">
            <summary>
            we need to make use of the new poison fields
            </summary>
        </member>
        <member name="T:DOL.GS.MetalWorking">
            <summary>
            The metalworking crafting skill
            </summary>
        </member>
        <member name="M:DOL.GS.MetalWorking.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.MetalWorking.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.MetalWorking.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="T:DOL.GS.Trainer.MysticTrainer">
            <summary>
            Mystic Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.MysticTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.MysticTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.NightshadeTrainer">
            <summary>
            Nightshade Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.NightshadeTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.NightshadeTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.NightshadeTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Spells.SpeedEnhancementSpellHandler">
            <summary>
            Increases the target's movement speed.
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpeedEnhancementSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            called after normal spell cast is completed and effect has to be started
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpeedEnhancementSpellHandler.ApplyEffectOnTarget(DOL.GS.GameLiving,System.Double)">
            <summary>
            Apply effect on target or do spell action if non duration spell
            </summary>
            <param name="target">target that gets the effect</param>
            <param name="effectiveness">factor from 0..1 (0%-100%)</param>
        </member>
        <member name="M:DOL.GS.Spells.SpeedEnhancementSpellHandler.OnEffectStart(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            When an applied effect starts
            duration spells only
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.SpeedEnhancementSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpeedEnhancementSpellHandler.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            Sends updates on effect start/stop
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:DOL.GS.Spells.SpeedEnhancementSpellHandler.OnAttack(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Handles attacks on player/by player
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:DOL.GS.Spells.SpeedEnhancementSpellHandler.OnStealthStateChanged(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Handles stealth state changes
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:DOL.GS.Spells.SpeedEnhancementSpellHandler.#ctor(DOL.GS.GameLiving,DOL.GS.Spell,DOL.GS.SpellLine)">
            <summary>
            The spell handler constructor
            </summary>
            <param name="caster"></param>
            <param name="spell"></param>
            <param name="line"></param>
        </member>
        <member name="P:DOL.GS.Spells.SpeedEnhancementSpellHandler.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.StrengthDebuff">
            <summary>
            Str stat baseline debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DexterityDebuff">
            <summary>
            Dex stat baseline debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ConstitutionDebuff">
            <summary>
            Con stat baseline debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ArmorFactorDebuff">
            <summary>
            Armor factor debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ArmorAbsorbtionDebuff">
            <summary>
            Armor absorbtion debuff
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ArmorAbsorbtionDebuff.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            send updates about the changes
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:DOL.GS.Spells.MeleeDamageDebuff">
            <summary>
            Melee damage debuff
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.MeleeDamageDebuff.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            send updates about the changes
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:DOL.GS.Spells.FatigueConsumptionDebuff">
            <summary>
            Fatigue reduction debuff
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.FatigueConsumptionDebuff.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            send updates about the changes
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:DOL.GS.Spells.FumbleChanceDebuff">
            <summary>
            Fumble chance debuff
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.FumbleChanceDebuff.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            send updates about the changes
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:DOL.GS.Spells.DPSDebuff">
            <summary>
            DPS debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.SkillsDebuff">
            <summary>
            Skills Debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.BodyResistDebuff">
            <summary>
            Body resistance debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ColdResistDebuff">
            <summary>
            Cold resistance debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.EnergyResistDebuff">
            <summary>
            Energy resistance debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.HeatResistDebuff">
            <summary>
            Heat resistance debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.MatterResistDebuff">
            <summary>
            Matter resistance debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.SpiritResistDebuff">
            <summary>
            Spirit resistance debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.SlashResistDebuff">
            <summary>
            Slash resistance debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ThrustResistDebuff">
            <summary>
            Thrust resistance debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.CrushResistDebuff">
            <summary>
            Crush resistance debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.LifedrainSpellHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.LifedrainSpellHandler.OnDirectEffect(DOL.GS.GameLiving,System.Double)">
            <summary>
            execute direct effect
            </summary>
            <param name="target">target that gets the damage</param>
            <param name="effectiveness">factor from 0..1 (0%-100%)</param>
        </member>
        <member name="M:DOL.GS.Spells.LifedrainSpellHandler.StealLife(DOL.GS.AttackData)">
            <summary>
            Uses percent of damage to heal the caster
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.LifedrainSpellHandler.CalculateDamageBase">
            <summary>
            Calculates the base 100% spell damage which is then modified by damage variance factors
            </summary>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Spells.SavageEvadeHandler">
            <summary>
            Summary description for SavageHasteHandler.
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.EvadeChanceBuff">
            <summary>
            Evade chance buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.BoltSpellHandler">
            <summary>
            Spell Handler for firing bolts
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.BoltSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            Fire bolt
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.Spells.BoltSpellHandler.StartSpell(DOL.GS.GameLiving)">
            <summary>
            called when spell effect has to be started and applied to targets
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.BoltSpellHandler.BoltOnTargetAction">
            <summary>
            Delayed action when bolt reach the target
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.BoltSpellHandler.BoltOnTargetAction.m_boltTarget">
            <summary>
            The bolt target
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.BoltSpellHandler.BoltOnTargetAction.m_handler">
            <summary>
            The spell handler
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.BoltSpellHandler.BoltOnTargetAction.#ctor(DOL.GS.GameLiving,DOL.GS.GameLiving,DOL.GS.Spells.BoltSpellHandler)">
            <summary>
            Constructs a new BoltOnTargetAction
            </summary>
            <param name="actionSource">The action source</param>
            <param name="boltTarget">The bolt target</param>
        </member>
        <member name="M:DOL.GS.Spells.BoltSpellHandler.BoltOnTargetAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.SkillHandler.BerserkAbilityHandler">
            <summary>
            Handler for Sprint Ability clicks
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.BerserkAbilityHandler.REUSE_TIMER">
            <summary>
            The reuse time in milliseconds for berserk ability
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.BerserkAbilityHandler.DURATION">
            <summary>
            The effect duration in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.BerserkAbilityHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.SkillHandler.BerserkAbilityHandler.Execute(DOL.GS.Ability,DOL.GS.GamePlayer)">
            <summary>
            Execute the ability
            </summary>
            <param name="ab">The ability executed</param>
            <param name="player">The player that used the ability</param>
        </member>
        <member name="T:DOL.GS.RealmAbilities.SerenityAbility">
            <summary>
            Serenity realm ability
            </summary>
        </member>
        <member name="T:DOL.GS.Quests.eRequirementType">
             <summary>
             Requirementtype defines a list of requirements to be used with questparts.
             Depending on requirmenttype V and N will have special
             meaning look at documentation of each requirementtype for details    
             </summary>
            <remarks>
             Syntax: ... V:eEmote(eEmote.Yes) ... Parameter V must be of Type
             eEmote and has the default value of "eEmote.Yes" (used if no value is passed).
             If no default value is defined value must be passed along with action.
             </remarks>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.None">
            <summary>
            No Requirement
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.InventoryItem">
            <summary>
            AINV : checks inventory for V:int(1)[string] instances of item N:ItemTemplate[Item's Id_nb:string]
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Class">
            <summary>
            CLAS : checks for player class N:int[string]
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Quest">
            <summary>
            CQST : checks for quest N:Type[Typename:string](Current Quest) completed V:int[string] times
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Encumbrance">
            <summary>
            ENCU : compares player's encumbrance value with N:int[string]
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.EncumbranceMax">
            <summary>
            MENC : compares player's maximum encumbrance value with N:int[string]
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Endurance">
            <summary>
            FATG : compares player's fatigue value with N:int[string] using eComparator
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.EnduranceMax">
            <summary>
            MFAT : compares player's maximum fatigue value with N:int[string] using eComparator
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Gender">
            <summary>
            GNDR : compares player's gender with N:int[string] {0=male,1=female}
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.GroupNumber">
            <summary>
            GRUP : checks if player is grouped. N:int[string] is number of people in group
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.GroupLevel">
            <summary>
            GPLV : checks if player is grouped. N:int[string] is sum of levels in group
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Guild">
            <summary>
            GUIL : compares guildname of N:GameLiving(NPC)[NPC's ID:string] with V:string.
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Gold">
            <summary>
            Compares players gold with N:long[string] using eComparator
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Health">
            <summary>
            HITS : compares player's current hit points with N:int[string] using eComparator
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.HealthMax">
            <summary>
            HITS : compares player's maximum hit points with N:int[string] using eComparator
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Level">
            <summary>
            LEVE : compares player's level with N:int[string] using eComparator
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Mana">
            <summary>
            POWR: compares player's current mana value with N:int[string] using eComparator
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.ManaMax">
            <summary>
            MPOW: compares player's maximum mana value with N:int[string] using eComparator
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.QuestPending">
            <summary>
            PQST : checks for player's pending quest N:Type[Typename:string](Current Quest)
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Race">
            <summary>
            RACE : compares player's race with N:int[string]
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Random">
            <summary>
            RAND : percent random chance indicated by N:int[string]
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Realm">
            <summary>
            REAL : compares player's realm with N:int[string]
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.RealmLevel">
            <summary>
            RLEV : compares player's realm level with N:int[string] using eComparator
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.RealmPoints">
            <summary>
            RPTS : compares player's realm points with N:long[string] using eComparator
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Region">
            <summary>
            REGO : compare player's zone with N:int[string] and region with V:int[string]
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.EquippedItem">
            <summary>
            RINV : checks readied/worn items of player for item N:ItemTemplate[Item's Id_nb:string]
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.QuestStep">
            <summary>
            QUES : checks for player's quest N:Type[Typename:string](Current Quest) at step V:int[string] using eComparator
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.QuestGivable">
            <summary>
            Checks for quest N:Type[Typename:string](Current Quest) to be givable by NPC to player
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="F:DOL.GS.Quests.eRequirementType.Distance">
            <summary>
            Compares distance V:int[string] between player and given GameObject N:GameLiving[GameLiving's Name:string](NPC) using Comparator
            </summary>
            <remarks>Tested</remarks>
        </member>
        <member name="T:DOL.GS.Quests.eComparator">
            <summary>
            Comparator enume used within some of the requirement checks.
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eComparator.None">
            <summary>
            No check is done, will always return true
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eComparator.Less">
            <summary>
            Checks wether given value1 is less than value2
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eComparator.Greater">
            <summary>
            Checks wether given value1 is greater than value2
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eComparator.Equal">
            <summary>
             Checks wether given value1 is equal value2
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eComparator.NotEqual">
            <summary>
            Checks wether given value1 is not equal value2
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.eComparator.Not">
            <summary>
            Negotiation of given argument
            usable with QuestPending, QuestGivable
            </summary>
        </member>
        <member name="T:DOL.GS.Quests.BaseQuestRequirement">
            <summary>
            Requirements describe what must be true to allow a QuestAction to fire.
            Level of player, Step of Quest, Class of Player, etc... There are also some variables to add
            additional parameters. To fire a QuestAction ALL requirements must be fulfilled.         
            </summary>
        </member>
        <member name="T:DOL.GS.Quests.AbstractQuestRequirement">
            <summary>
            Requirements describe what must be true to allow a QuestAction to fire.
            Level of player, Step of Quest, Class of Player, etc... There are also some variables to add
            additional parameters. To fire a QuestAction ALL requirements must be fulfilled.         
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuestRequirement.#ctor(DOL.GS.Quests.BaseQuestPart,DOL.GS.Quests.eRequirementType,System.Object,System.Object,DOL.GS.Quests.eComparator)">
            <summary>
            Creates a new QuestRequirement and does some basich compativilite checks for the parameters
            </summary>
            <param name="type">RequirementType</param>
            <param name="n">First Requirement Variable, meaning depends on RequirementType</param>
            <param name="v">Second Requirement Variable, meaning depends on RequirementType</param>
            <param name="comp">Comparator used if some values are veeing compared</param>
        </member>
        <member name="M:DOL.GS.Quests.AbstractQuestRequirement.#ctor(DOL.GS.GameNPC,System.Type,DOL.GS.Quests.eRequirementType,System.Object,System.Object,DOL.GS.Quests.eComparator)">
            <summary>
            Creates a new QuestRequirement and does some basich compativilite checks for the parameters
            </summary>
            <param name="type">RequirementType</param>
            <param name="n">First Requirement Variable, meaning depends on RequirementType</param>
            <param name="v">Second Requirement Variable, meaning depends on RequirementType</param>
            <param name="comp">Comparator used if some values are veeing compared</param>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuestRequirement.RequirementType">
            <summary>
            R: RequirmentType
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuestRequirement.N">
            <summary>
            N: first Requirment Variable
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuestRequirement.V">
            <summary>
            V: Secoond Requirmenet Variable
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuestRequirement.Comparator">
            <summary>
            C: Requirement Comparator
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.AbstractQuestRequirement.NPC">
            <summary>
            returns the NPC of the requirement
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestRequirement.#ctor(DOL.GS.Quests.BaseQuestPart,DOL.GS.Quests.eRequirementType,System.Object,System.Object,DOL.GS.Quests.eComparator)">
            <summary>
            Creates a new QuestRequirement and does some basich compativilite checks for the parameters
            </summary>
            <param name="questPart">Parent QuestPart of this Requirement</param>
            <param name="type">RequirementType</param>
            <param name="n">First Requirement Variable, meaning depends on RequirementType</param>
            <param name="v">Second Requirement Variable, meaning depends on RequirementType</param>
            <param name="comp">Comparator used if some values are veeing compared</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestRequirement.Check(DOL.Events.DOLEvent,System.Object,System.EventArgs,DOL.GS.GamePlayer)">
            <summary>
            Checks the added requirement whenever a trigger associated with this questpart fires.(returns true)
            </summary>        
            <param name="e">DolEvent of notify call</param>
            <param name="sender">Sender of notify call</param>
            <param name="args">EventArgs of notify call</param>
            <param name="player">GamePlayer this call is related to, can be null</param>
            <returns>true if all Requirements forQuestPart where fullfilled, else false</returns>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestRequirement.compare(System.Int64,System.Int64,DOL.GS.Quests.eComparator)">
            <summary>
            Compares value1 with value2 
            Allowed Comparators: Less,Greater,Equal, NotEqual, None
            </summary>
            <param name="value1">Value1 one to compare</param>
            <param name="value2">Value2 to cmopare</param>
            <param name="comp">Comparator to use for Comparison</param>
            <returns>result of comparison</returns>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuestRequirement.compare(System.Int32,System.Int32,DOL.GS.Quests.eComparator)">
            <summary>
            Compares value1 with value2 
            Allowed Comparators: Less,Greater,Equal, NotEqual, None
            </summary>
            <param name="value1">Value1 one to compare</param>
            <param name="value2">Value2 to cmopare</param>
            <param name="comp">Comparator to use for Comparison</param>
            <returns>result of comparison</returns>
        </member>
        <member name="T:DOL.GS.PropertyCalc.ResistCalculator">
            <summary>
            The Resistance Property calculator
            
            BuffBonusCategory1 is used for all capped buffs
            BuffBonusCategory2 external used for only damagemodifiing resists (1.65 Category2 Resists)
            BuffBonusCategory3 is used for all debuffs (positive values expected here)
            BuffBonusCategory4 is used for all uncapped modifications
                               category 4 kicks in at last
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.HealthRegenerationRateCalculator">
            <summary>
            The health regen rate calculator
            
            BuffBonusCategory1 is used for all buffs
            BuffBonusCategory2 is used for all debuffs (positive values expected here)
            BuffBonusCategory3 unused
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="M:DOL.GS.PropertyCalc.HealthRegenerationRateCalculator.CalcValue(DOL.GS.GameLiving,DOL.GS.eProperty)">
            <summary>
            calculates the final property value
            </summary>
            <param name="living"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Scripts.ClassCabalist">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Items.DefaultItems">
            <summary>
            Creates needed items when they doesnt exist yet
            </summary>
        </member>
        <member name="F:DOL.GS.Items.DefaultItems.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.Housing.House.SendUpdate">
            <summary>
            Sends a update of the house and the garden to all players in range
            </summary>
        </member>
        <member name="M:DOL.GS.Housing.House.Enter(DOL.GS.GamePlayer)">
            <summary>
            Used to get into a house
            </summary>
            <param name="player">the player who wants to get in</param>
        </member>
        <member name="M:DOL.GS.Housing.House.Exit(DOL.GS.GamePlayer,System.Boolean)">
            <summary>
            Used to leave a house
            </summary>
            <param name="player">the player who wants to get in</param>
            <param name="silent">text or not</param>
        </member>
        <member name="M:DOL.GS.Housing.House.SendHouseInfo(DOL.GS.GamePlayer)">
            <summary>
            Sends the house info window to a player
            </summary>
            <param name="player">the player</param>
        </member>
        <member name="M:DOL.GS.Housing.House.IsOwner(DOL.GS.GamePlayer)">
            <summary>
            Returns true if the player is a owner of the house
            </summary>
            <param name="player">the player to check</param>
        </member>
        <member name="M:DOL.GS.Housing.House.SaveIntoDatabase">
            <summary>
            Saves this house into the database
            </summary>
        </member>
        <member name="M:DOL.GS.Housing.House.GetAllPlayersInHouse">
            <summary>
            Returns a ArrayList with all players in the house
            </summary>
        </member>
        <member name="T:DOL.GS.Money">
            <summary>
            capsulate money operations
            currently there is no instance of Money
            use long instead
            </summary>
        </member>
        <member name="T:DOL.GS.Guild">
            <summary>
            Summary description for a Guild inside the game.
            </summary>
            
        </member>
        <member name="F:DOL.GS.Guild.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Guild.m_guildMembers">
            <summary>
            This holds all players inside the guild
            </summary>
        </member>
        <member name="F:DOL.GS.Guild.m_alliance">
            <summary>
            This holds all players inside the guild
            </summary>
        </member>
        <member name="F:DOL.GS.Guild.m_DBguild">
            <summary>
            This holds the DB instance of the guild
            </summary>
        </member>
        <member name="F:DOL.GS.Guild.m_name">
            <summary>
            the name of the guild
            </summary>
        </member>
        <member name="F:DOL.GS.Guild.m_realmPoints">
            <summary>
            Holds the guild realm points
            </summary>
        </member>
        <member name="F:DOL.GS.Guild.m_bountyPoints">
            <summary>
            Holds the guild bounty points
            </summary>
        </member>
        <member name="F:DOL.GS.Guild.m_claimedKeep">
            <summary>
            Stores claimed keep (unique)
            </summary>
        </member>
        <member name="F:DOL.GS.Guild.m_id">
            <summary>
            Stores guild unique run-time ID
            </summary>
        </member>
        <member name="M:DOL.GS.Guild.#ctor">
            <summary>
            Creates an empty Guild. Don't use this, use
            GuildMgr.CreateGuild() to create a guild
            </summary>
        </member>
        <member name="M:DOL.GS.Guild.AddOnlineMember(DOL.GS.GamePlayer)">
            <summary>
            Adds a player to the guild
            </summary>
            <param name="member">GamePlayer to be added to the guild</param>
            <returns>true if added successfully</returns>
        </member>
        <member name="M:DOL.GS.Guild.RemoveOnlineMember(DOL.GS.GamePlayer)">
            <summary>
            Removes a player from the guild
            </summary>
            <param name="member">GamePlayer to be removed</param>
            <returns>true if removed, false if not</returns>
        </member>
        <member name="M:DOL.GS.Guild.RemoveAllMembers">
            <summary>
            Remove all Members from memory
            </summary>
        </member>
        <member name="M:DOL.GS.Guild.GetMemberByName(System.String)">
            <summary>
            Returns a guild according to the matching membername
            </summary>
            <returns>GuildMemberEntry</returns>
        </member>
        <member name="M:DOL.GS.Guild.AddPlayer(DOL.GS.GamePlayer)">
            <summary>
            Add's a player to this Guild
            </summary>
            <param name="addeePlayer">the player beeing added</param>
            <returns>true or false</returns>
        </member>
        <member name="M:DOL.GS.Guild.RemovePlayer(System.String,DOL.GS.GamePlayer)">
            <summary>
            Delete's a member from this Guild
            </summary>
            <param name="removername">the player (client) removing</param>
            <param name="member">the player named beeing remove</param>
            <returns>true or false</returns>
        </member>
        <member name="M:DOL.GS.Guild.GotAccess(DOL.GS.GamePlayer,DOL.GS.eGuildRank)">
            <summary>
            Looks up if a given client have access for the specific command in this guild
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:DOL.GS.Guild.GetRankByID(System.Int32)">
            <summary>
            get rank by level
            </summary>
            <param name="index">the index of rank</param>
            <returns>the dbrank</returns>
        </member>
        <member name="M:DOL.GS.Guild.ListOnlineMembers">
            <summary>
            Returns a list of members by their status
            </summary>
            <returns>ArrayList of members</returns>
        </member>
        <member name="M:DOL.GS.Guild.SendMessageToGuildMembers(System.String,DOL.GS.PacketHandler.eChatType,DOL.GS.PacketHandler.eChatLoc)">
            <summary>
            Sends a message to all guild members 
            </summary>
            <param name="msg">message string</param>
            <param name="type">message type</param>
            <param name="loc">message location</param>
        </member>
        <member name="M:DOL.GS.Guild.IsInTheGuild(System.String)">
            <summary>
            Checks if a player is in the guild
            </summary>
            <param name="memberName">GamePlayer to check</param>
            <returns>true if the player is in the guild</returns>
        </member>
        <member name="M:DOL.GS.Guild.GainRealmPoints(System.Int64)">
            <summary>
            Called when this guild gains realm points
            </summary>
            <param name="amount">The amount of realm points gained</param>
        </member>
        <member name="M:DOL.GS.Guild.GainBountyPoints(System.Int64)">
            <summary>
            Called when this guild gains bounty points
            </summary>
            <param name="amount">The amount of bounty points gained</param>
        </member>
        <member name="M:DOL.GS.Guild.RemoveBountyPoints(System.Int64)">
            <summary>
            Called when this guild loose bounty points
            </summary>
            <param name="amount">The amount of bounty points gained</param>
        </member>
        <member name="M:DOL.GS.Guild.LoadFromDatabase(DOL.Database.DataObject)">
            <summary>
            Loads this guild from a guild table
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:DOL.GS.Guild.SaveIntoDatabase">
            <summary>
            Saves this guild to database
            </summary>
        </member>
        <member name="P:DOL.GS.Guild.theGuildDB">
            <summary>
            Gets or sets the guild db
            </summary>
        </member>
        <member name="P:DOL.GS.Guild.alliance">
            <summary>
            Gets or sets the guild db
            </summary>
        </member>
        <member name="P:DOL.GS.Guild.Name">
            <summary>
            Gets or sets the guild db
            </summary>
        </member>
        <member name="P:DOL.GS.Guild.RealmPoints">
            <summary>
            Gets or sets the guild realm points
            </summary>
        </member>
        <member name="P:DOL.GS.Guild.BountyPoints">
            <summary>
            Gets or sets the guild realm points
            </summary>
        </member>
        <member name="P:DOL.GS.Guild.ClaimedKeep">
            <summary>
            Gets or sets the guild claimed keep
            </summary>
        </member>
        <member name="P:DOL.GS.Guild.MemberOnlineCount">
            <summary>
            Returns the number of players online inside this guild
            </summary>
        </member>
        <member name="P:DOL.GS.Guild.ID">
            <summary>
            Gets/Sets unique run-time guild ID
            </summary>
        </member>
        <member name="T:DOL.GS.Faction">
            <summary>
            Faction of mob
            </summary>
        </member>
        <member name="M:DOL.GS.Faction.LoadFromDatabase(DOL.Database.DBFaction)">
            <summary>
            load faction from DB
            </summary>
            <param name="dbfaction"></param>
        </member>
        <member name="F:DOL.GS.Faction.m_name">
            <summary>
            hold name of faction
            </summary>
        </member>
        <member name="F:DOL.GS.Faction.m_friendFactions">
            <summary>
            hold friend factions
            </summary>
        </member>
        <member name="F:DOL.GS.Faction.m_enemyFactions">
            <summary>
            hold enemy factions
            </summary>
        </member>
        <member name="F:DOL.GS.Faction.m_id">
            <summary>
            hold id of faction
            </summary>
        </member>
        <member name="F:DOL.GS.Faction.m_baseAggroLevel">
            <summary>
            hold base aggro level
            </summary>
        </member>
        <member name="F:DOL.GS.Faction.m_playerxFaction">
            <summary>
            this is the table of player aggrolevel
            </summary>
        </member>
        <member name="M:DOL.GS.Faction.AddFriendFaction(DOL.GS.Faction)">
            <summary>
            add friend faction to this faction
            </summary>
            <param name="faction"></param>
        </member>
        <member name="M:DOL.GS.Faction.RemoveFriendFaction(DOL.GS.Faction)">
            <summary>
            remove friend faction
            </summary>
            <param name="faction"></param>
        </member>
        <member name="M:DOL.GS.Faction.AddEnemyFaction(DOL.GS.Faction)">
            <summary>
            add enemy faction
            </summary>
            <param name="faction"></param>
        </member>
        <member name="M:DOL.GS.Faction.RemoveEnemyFaction(DOL.GS.Faction)">
            <summary>
            remove enemy faction
            </summary>
            <param name="faction"></param>
        </member>
        <member name="M:DOL.GS.Faction.KillMember(DOL.GS.GamePlayer)">
            <summary>
            called when a player kills a mob from the faction
            </summary>
            <param name="killer"></param>
        </member>
        <member name="M:DOL.GS.Faction.ChangeAggroLevel(DOL.GS.GamePlayer,System.Int32)">
            <summary>
            changes aggro of faction and related factions to player
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:DOL.GS.Faction.GetAggroToFaction(DOL.GS.GamePlayer)">
            <summary>
            gets aggro level of player with faction
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Faction.Name">
            <summary>
            name of faction
            </summary>
        </member>
        <member name="P:DOL.GS.Faction.FriendFactions">
            <summary>
            friend factions
            </summary>
        </member>
        <member name="P:DOL.GS.Faction.EnemyFactions">
            <summary>
            enemy factions
            </summary>
        </member>
        <member name="P:DOL.GS.Faction.ID">
            <summary>
            id of faction
            </summary>
        </member>
        <member name="P:DOL.GS.Faction.BaseAggroLevel">
            <summary>
            base aggro when player have never meet faction before
            </summary>
        </member>
        <member name="P:DOL.GS.Faction.PlayerxFaction">
            <summary>
            table of player and aggrolevel (characterid/aggrolevel)
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.MasteryofConcentrationEffect">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.MasteryofConcentrationEffect.#ctor">
            <summary>
            Default constructor for MasteryofConcentrationEffect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.MasteryofConcentrationEffect.Start(DOL.GS.GamePlayer)">
            <summary>
            Called when effect is to be started
            </summary>
            <param name="player">The player to start the effect for</param>
        </member>
        <member name="M:DOL.GS.Effects.MasteryofConcentrationEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect is to be cancelled
            </summary>
            <param name="playerCancel">Whether or not effect is player cancelled</param>
        </member>
        <member name="M:DOL.GS.Effects.MasteryofConcentrationEffect.StartTimers">
            <summary>
            Starts the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.MasteryofConcentrationEffect.StopTimers">
            <summary>
            Stops the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.MasteryofConcentrationEffect.ExpiredCallback(DOL.GS.RegionTimer)">
            <summary>
            The callback for when the effect expires
            </summary>
            <param name="timer">The ObjectTimerCallback object</param>
        </member>
        <member name="P:DOL.GS.Effects.MasteryofConcentrationEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.MasteryofConcentrationEffect.RemainingTime">
            <summary>
            Remaining time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.MasteryofConcentrationEffect.Icon">
            <summary>
            Icon ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.MasteryofConcentrationEffect.InternalID">
            <summary>
            Unique ID for identification in the effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.MasteryofConcentrationEffect.DelveInfo">
            <summary>
            Delve information
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.AmelioratingMelodiesEffect">
            <summary>
            Ameliorating Melodies
            </summary>
        </member>
        <member name="F:DOL.GS.RealmAbilities.AmelioratingMelodiesEffect.m_countdown">
            <summary>
            The countdown value. If this value is 0, the effect vanishes
            </summary>
        </member>
        <member name="F:DOL.GS.RealmAbilities.AmelioratingMelodiesEffect.m_heal">
            <summary>
            The number of hit points healed each tick
            </summary>
        </member>
        <member name="F:DOL.GS.RealmAbilities.AmelioratingMelodiesEffect.m_range">
            <summary>
            Max healing range
            </summary>
        </member>
        <member name="F:DOL.GS.RealmAbilities.AmelioratingMelodiesEffect.m_countDownTimer">
            <summary>
            The rgion timer
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.AmelioratingMelodiesEffect.#ctor(System.Int32)">
            <summary>
            Ameliorating Melodies
            </summary>
            <param name="heal">Delve value hit points per tick"</param>
        </member>
        <member name="M:DOL.GS.RealmAbilities.AmelioratingMelodiesEffect.Start(DOL.GS.GameLiving)">
            <summary>
            Starts the effect
            </summary>
            <param name="target">The player of this effect</param>
        </member>
        <member name="M:DOL.GS.RealmAbilities.AmelioratingMelodiesEffect.Stop">
            <summary>
            Stops the effect
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.AmelioratingMelodiesEffect.CountDown(DOL.GS.RegionTimer)">
            <summary>
            Timer callback
            </summary>
            <param name="timer">The region timer</param>
        </member>
        <member name="P:DOL.GS.RealmAbilities.AmelioratingMelodiesEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.RealmAbilities.AmelioratingMelodiesEffect.Icon">
            <summary>
            Icon of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.RealmAbilities.AmelioratingMelodiesEffect.DelveInfo">
            <summary>
            Delve information
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.AdrenalineRushEffect">
            <summary>
            Effect handler for Barrier Of Fortitude
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.AdrenalineRushEffect.#ctor">
            <summary>
            Default constructor for AmelioratingMelodiesEffect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.AdrenalineRushEffect.Start(DOL.GS.GamePlayer,System.Int32,System.Int32)">
            <summary>
            Called when effect is to be started
            </summary>
            <param name="player">The player to start the effect for</param>
            <param name="duration">The effectduration in secounds</param>
            <param name="value">The percentage additional value for melee absorb</param>
        </member>
        <member name="M:DOL.GS.Effects.AdrenalineRushEffect.PlayerLeftWorld(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Called when a player leaves the game
            </summary>
            <param name="e">The event which was raised</param>
            <param name="sender">Sender of the event</param>
            <param name="args">EventArgs associated with the event</param>
        </member>
        <member name="M:DOL.GS.Effects.AdrenalineRushEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect is to be cancelled
            </summary>
            <param name="playerCancel">Whether or not effect is player cancelled</param>
        </member>
        <member name="M:DOL.GS.Effects.AdrenalineRushEffect.StartTimers">
            <summary>
            Starts the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.AdrenalineRushEffect.StopTimers">
            <summary>
            Stops the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.AdrenalineRushEffect.ExpireCallback(DOL.GS.RegionTimer)">
            <summary>
            The callback for when the effect expires
            </summary>
            <param name="timer">The ObjectTimerCallback object</param>
        </member>
        <member name="P:DOL.GS.Effects.AdrenalineRushEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.AdrenalineRushEffect.RemainingTime">
            <summary>
            Remaining time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.AdrenalineRushEffect.Icon">
            <summary>
            Icon ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.AdrenalineRushEffect.InternalID">
            <summary>
            Unique ID for identification in the effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.AdrenalineRushEffect.DelveInfo">
            <summary>
            Delve information
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.PacketLibAttribute">
            <summary>
            Denotes a class as a packet lib.
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLibAttribute.m_rawVersion">
            <summary>
            Stores version Id sent by the client.
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketLibAttribute.m_clientVersion">
            <summary>
            PacketLib client version.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketLibAttribute.#ctor(System.Int32,DOL.GS.GameClient.eClientVersion)">
            <summary>
            Constructs a new PacketLibAttribute.
            </summary>
            <param name="rawVersion">The version Id sent by the client.</param>
            <param name="clientVersion">PacketLib client version.</param>
        </member>
        <member name="P:DOL.GS.PacketHandler.PacketLibAttribute.RawVersion">
            <summary>
            Gets version Id sent by the client.
            </summary>
        </member>
        <member name="P:DOL.GS.PacketHandler.PacketLibAttribute.ClientVersion">
            <summary>
            Gets the client version for which PacketLib is built.
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.WorldInitRequestHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.WorldInitRequestHandler.WorldInitAction">
            <summary>
            Handles player world init requests
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.WorldInitRequestHandler.WorldInitAction.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new WorldInitAction
            </summary>
            <param name="actionSource">The action source</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.WorldInitRequestHandler.WorldInitAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.PlayerTrainRequestHandler">
            <summary>
            handles Train clicks from Trainer Window
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerTrainRequestHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerInitRequestHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.PlayerInitRequestHandler.PlayerInitRequestAction">
            <summary>
            Handles player init requests
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerInitRequestHandler.PlayerInitRequestAction.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new PlayerInitRequestHandler
            </summary>
            <param name="actionSource"></param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerInitRequestHandler.PlayerInitRequestAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.CharacterOverviewRequestHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.AttackData">
            <summary>
            Holds all data for an Attack
            </summary>
        </member>
        <member name="M:DOL.GS.AttackData.#ctor">
            <summary>
            Constructs new AttackData
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.Modifier">
            <summary>
            Sets or gets the modifier (resisted damage)
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.Attacker">
            <summary>
            Sets or gets the attacker
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.Target">
            <summary>
            Sets or gets the attack target
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.ArmorHitLocation">
            <summary>
            Sets or gets the armor hit location
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.Damage">
            <summary>
            Sets or gets the damage
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.UncappedDamage">
            <summary>
            Sets or gets the uncapped damage
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.CriticalDamage">
            <summary>
            Sets or gets the critical damage
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.StyleDamage">
            <summary>
            Sets or gets the style damage
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.DamageType">
            <summary>
            Sets or gets the damage type
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.Style">
            <summary>
            Sets or gets the style used
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.AttackResult">
            <summary>
            Sets or gets the attack result
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.StyleEffects">
            <summary>
            (procs) Gets the style effects
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.WeaponSpeed">
            <summary>
            Sets or gets the weapon speed
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.IsMeleeAttack">
            <summary>
            Checks whether attack type is one of melee types
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.AttackType">
            <summary>
            Sets or gets the attack type
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.AnimationId">
            <summary>
            Sets or gets the attack animation ID
            </summary>
        </member>
        <member name="P:DOL.GS.AttackData.IsHit">
            <summary>
            Method to determine if an attack result, resulted in a hit
            </summary>
            <param name="result">eAttackResult</param>
            <returns>true if it was a hit</returns>
        </member>
        <member name="T:DOL.GS.AttackData.eAttackType">
            <summary>
            The type of attack
            </summary>
        </member>
        <member name="F:DOL.GS.AttackData.eAttackType.Unknown">
            <summary>
            Attack type has not been set yet
            </summary>
        </member>
        <member name="F:DOL.GS.AttackData.eAttackType.MeleeOneHand">
            <summary>
            Attack is done using a weapon in one hand
            </summary>
        </member>
        <member name="F:DOL.GS.AttackData.eAttackType.MeleeDualWield">
            <summary>
            Attack is done using one weapon in each hand
            </summary>
        </member>
        <member name="F:DOL.GS.AttackData.eAttackType.MeleeTwoHand">
            <summary>
            Attack is done using one same weapon in both hands
            </summary>
        </member>
        <member name="F:DOL.GS.AttackData.eAttackType.Ranged">
            <summary>
            Attack is done using a weapon in ranged slot
            </summary>
        </member>
        <member name="F:DOL.GS.AttackData.eAttackType.Spell">
            <summary>
            Attack is done with a spell
            </summary>
        </member>
        <member name="T:DOL.Events.GameServerStoppedEventAttribute">
            <summary>
            This attribute can be applied to static methods to automatically
            register them with the GameServer's global stop event
            </summary>
        </member>
        <member name="M:DOL.Events.GameServerStoppedEventAttribute.#ctor">
            <summary>
            Constructs a new GameServerStoppedEventAttribute
            </summary>
        </member>
        <member name="T:DOL.Events.ScriptUnloadedEventAttribute">
            <summary>
            This attribute can be applied to static methods to automatically
            register them with the GameServer's global script unloaded event
            </summary>
        </member>
        <member name="M:DOL.Events.ScriptUnloadedEventAttribute.#ctor">
            <summary>
            Constructs a new ScriptUnloadedEventAttribute
            </summary>
        </member>
        <member name="T:DOL.Events.RelicPadEventArgs">
            <summary>
            Holds the arguments for the RelicPad event
            </summary>
        </member>
        <member name="F:DOL.Events.RelicPadEventArgs.m_player">
            <summary>
            The player
            </summary>
        </member>
        <member name="F:DOL.Events.RelicPadEventArgs.m_relic">
            <summary>
            The player
            </summary>
        </member>
        <member name="M:DOL.Events.RelicPadEventArgs.#ctor(DOL.GS.GamePlayer,DOL.GS.GameRelic)">
            <summary>
            Constructs a new KeepEventArgs
            </summary>
        </member>
        <member name="P:DOL.Events.RelicPadEventArgs.Player">
            <summary>
            Gets the player
            </summary>
        </member>
        <member name="P:DOL.Events.RelicPadEventArgs.Relic">
            <summary>
            Gets the player
            </summary>
        </member>
        <member name="T:DOL.Events.TurnToHeadingEventArgs">
            <summary>
            Holds the arguments for the TurnToHeading event of GameNPC
            </summary>
        </member>
        <member name="M:DOL.Events.TurnToHeadingEventArgs.#ctor(System.UInt16)">
            <summary>
            Constructs a new TurnToHeadingEventArgs
            </summary>
            <param name="heading">the target heading</param>
        </member>
        <member name="P:DOL.Events.TurnToHeadingEventArgs.Heading">
            <summary>
            Gets the target heading
            </summary>
        </member>
        <member name="T:DOL.Events.RiderDismountEventArgs">
            <summary>
            Holds the arguments for the RiderDismount event of GameNPC
            </summary>
        </member>
        <member name="M:DOL.Events.RiderDismountEventArgs.#ctor(DOL.GS.GamePlayer,DOL.GS.GameLiving)">
            <summary>
            Constructs a new RiderDismountEventArgs
            </summary>
            <param name="rider">the rider dismounting</param>
            <param name="steed">the steed the rider is dismounting from</param>
        </member>
        <member name="T:DOL.Events.GainedExperienceEventArgs">
            <summary>
            Holds the arguments for the GainedExperience event of GameLivings
            </summary>
        </member>
        <member name="M:DOL.Events.GainedExperienceEventArgs.#ctor(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Constructs new ReceiveMoneyEventArgs
            </summary>
            <param name="expBase">the amount of base exp gained</param>
            <param name="expCampBonus">camp bonus to exp gained</param>
            <param name="expGroupBonus">group bonus to exp gained</param>
            <param name="sendMessage">send experience gained messages</param>
        </member>
        <member name="P:DOL.Events.GainedExperienceEventArgs.ExpBase">
            <summary>
            Gets the amount of base experience gained
            </summary>
        </member>
        <member name="P:DOL.Events.GainedExperienceEventArgs.ExpCampBonus">
            <summary>
            Gets the amount of camp bonus experience gained
            </summary>
        </member>
        <member name="P:DOL.Events.GainedExperienceEventArgs.ExpGroupBonus">
            <summary>
            Gets the amount of group bonus experience gained
            </summary>
        </member>
        <member name="P:DOL.Events.GainedExperienceEventArgs.SendMessage">
            <summary>
            True if experience gain message was sent
            </summary>
        </member>
        <member name="T:DOL.Events.DyingEventArgs">
            <summary>
            Holds the arguments for the Dying event of GameLivings
            </summary>
        </member>
        <member name="F:DOL.Events.DyingEventArgs.m_killer">
            <summary>
            The killer
            </summary>
        </member>
        <member name="M:DOL.Events.DyingEventArgs.#ctor(DOL.GS.GameObject)">
            <summary>
            Constructs a new Dying event args
            </summary>
        </member>
        <member name="P:DOL.Events.DyingEventArgs.Killer">
            <summary>
            Gets the killer
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.BerserkEffect">
            <summary>
            The helper class for the berserk ability
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.BerserkEffect.delveString">
            <summary>
            The ability description
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.BerserkEffect.m_player">
            <summary>
            The owner of the effect
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.BerserkEffect.m_expireTimer">
            <summary>
            The timer that will cancel the effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.BerserkEffect.#ctor">
            <summary>
            Creates a new berserk effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.BerserkEffect.Start(DOL.GS.GamePlayer)">
            <summary>
            Start the berserk on a player
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.BerserkEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect must be canceled
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.BerserkEffect.StartTimers">
            <summary>
            Starts the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.BerserkEffect.StopTimers">
            <summary>
            Stops the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.BerserkEffect.ExpiredCallback(DOL.GS.RegionTimer)">
            <summary>
            The callback method when the effect expires
            </summary>
            <param name="callingTimer">the regiontimer of the effect</param>
            <returns>the new intervall (0) </returns>
        </member>
        <member name="F:DOL.GS.Effects.BerserkEffect.m_id">
            <summary>
            Stores the internal effect ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.BerserkEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.BerserkEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.BerserkEffect.Icon">
            <summary>
            Icon to show on players, can be id
            TODO find correct icon for berserk
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.BerserkEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.BerserkEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.DatabaseConverters.Version003">
            <summary>
            Converts the database format to the version 3
            </summary>
        </member>
        <member name="F:DOL.GS.DatabaseConverters.Version003.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.DatabaseConverters.Version003.ConvertDatabase">
            <summary>
            we need to make use of the new poison fields
            </summary>
        </member>
        <member name="T:DOL.GS.Trainer.ShamanTrainer">
            <summary>
            Shaman Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.ShamanTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ShamanTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ShamanTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Spells.StyleBleeding">
            <summary>
            Style bleeding effect spell handler
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.StyleBleeding.BLEED_VALUE_PROPERTY">
            <summary>
            The property name for bleed value
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.StyleBleeding.OnEffectStart(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            When an applied effect starts
            duration spells only
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.StyleBleeding.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.StyleBleeding.OnEffectPulse(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            When an applied effect pulses
            duration spells only
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.StyleBleeding.CreateSpellEffect(DOL.GS.GameLiving,System.Double)">
            <summary>
            Creates the corresponding spell effect for the spell
            </summary>
            <param name="target"></param>
            <param name="effectiveness"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.StyleBleeding.CalculateEffectDuration(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates the effect duration in milliseconds
            </summary>
            <param name="target">The effect target</param>
            <param name="effectiveness">The effect effectiveness</param>
            <returns>The effect duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.StyleBleeding.CalculateSpellResistChance(DOL.GS.GameLiving)">
            <summary>
            Calculates chance of spell getting resisted
            </summary>
            <param name="target">the target of the spell</param>
            <returns>chance that spell will be resisted for specific target</returns>
        </member>
        <member name="M:DOL.GS.Spells.StyleBleeding.IsNewEffectBetter(DOL.GS.Effects.GameSpellEffect,DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Determines wether this spell is better than given one
            </summary>
            <param name="oldeffect"></param>
            <returns>true if this spell is better version than compare spell</returns>
        </member>
        <member name="T:DOL.GS.Spells.BaseProcSpellHandler">
            <summary>
            Base class for proc spell handler
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.BaseProcSpellHandler.#ctor(DOL.GS.GameLiving,DOL.GS.Spell,DOL.GS.SpellLine)">
            <summary>
            Constructs new proc spell handler
            </summary>
            <param name="caster"></param>
            <param name="spell"></param>
            <param name="spellLine"></param>
        </member>
        <member name="M:DOL.GS.Spells.BaseProcSpellHandler.EventHandler(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            The event handler of given event type
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.BaseProcSpellHandler.m_procSpell">
            <summary>
            Holds the proc spell
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.BaseProcSpellHandler.m_procSpellLine">
            <summary>
            Holds the proc spell line
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.BaseProcSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            called after normal spell cast is completed and effect has to be started
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.BaseProcSpellHandler.OnEffectStart(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            When an applied effect starts
            duration spells only
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.BaseProcSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.BaseProcSpellHandler.IsNewEffectBetter(DOL.GS.Effects.GameSpellEffect,DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Determines wether this spell is better than given one
            </summary>
            <returns>true if this spell is better version than compare spell</returns>
        </member>
        <member name="P:DOL.GS.Spells.BaseProcSpellHandler.EventType">
            <summary>
            The event type to hook on
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.BaseProcSpellHandler.SubSpellLineName">
            <summary>
            The spell line name of the proc spell
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.BaseProcSpellHandler.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.OffensiveProcSpellHandler">
            <summary>
            This class contains data for OffensiveProc spells
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.OffensiveProcSpellHandler.EventHandler(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Handler fired whenever effect target is attacked
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="P:DOL.GS.Spells.OffensiveProcSpellHandler.EventType">
            <summary>
            The event type to hook on
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.OffensiveProcSpellHandler.SubSpellLineName">
            <summary>
            The spell line name of the proc spell
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DefensiveProcSpellHandler">
            <summary>
            This class contains data for DefensiveProc spells
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.DefensiveProcSpellHandler.EventHandler(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Handler fired whenever effect target is attacked
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="P:DOL.GS.Spells.DefensiveProcSpellHandler.EventType">
            <summary>
            The event type to hook on
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.DefensiveProcSpellHandler.SubSpellLineName">
            <summary>
            The spell line name of the proc spell
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.CureNearsightSpellHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.SavageHasteHandler">
            <summary>
            Summary description for SavageHasteHandler.
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.CombatSpeedBuff">
            <summary>
            Combat speed buff
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.CombatSpeedBuff.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            send updates about the changes
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:DOL.GS.Spells.MesmerizeSpellHandler">
            <summary>
            Mezz 
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.MesmerizeSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.MesmerizeSpellHandler.CalculateEffectDuration(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates the effect duration in milliseconds
            </summary>
            <param name="target">The effect target</param>
            <param name="effectiveness">The effect effectiveness</param>
            <returns>The effect duration in milliseconds</returns>
        </member>
        <member name="T:DOL.GS.SkillHandler.CriticalShotAbilityHandler">
            <summary>
            Handler for Critical Shot ability
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.VanishEffect">
            <summary>
            Vanish
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.StyleDamagePercentCalculator">
             <summary>
             The Spell Range bonus percent calculator
            
             BuffBonusCategory1 unused
             BuffBonusCategory2 unused
             BuffBonusCategory3 is used for debuff
             BuffBonusCategory4 unused
             BuffBonusMultCategory1 unused
             </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.EvadeChanceCalculator">
            <summary>
            The evade chance calculator. Returns 0 .. 1000 chance.
            
            BuffBonusCategory1 unused
            BuffBonusCategory2 unused
            BuffBonusCategory3 unused
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassDisciple">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassPaladin">
             <summary>
            
             </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassPaladin.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.PropertyCollection">
            <summary>
            Holds properties of different types
            </summary>
        </member>
        <member name="F:DOL.GS.PropertyCollection.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PropertyCollection.getProperty(System.String,System.Boolean)">
            <summary>
            retrieve bool property
            </summary>
            <param name="key">key</param>
            <param name="def">default value</param>
            <returns>value in properties or default value if not found</returns>
        </member>
        <member name="M:DOL.GS.PropertyCollection.getIntProperty(System.String,System.Int32)">
            <summary>
            retrieve int property
            </summary>
            <param name="key">key</param>
            <param name="def">default value</param>
            <returns>value in properties or default value if not found</returns>
        </member>
        <member name="M:DOL.GS.PropertyCollection.getLongProperty(System.String,System.Int64)">
            <summary>
            retrieve long property
            </summary>
            <param name="key">key</param>
            <param name="def">default value</param>
            <returns>value in properties or default value if not found</returns>
        </member>
        <member name="M:DOL.GS.PropertyCollection.getProperty(System.String,System.String)">
            <summary>
            retrieve string property
            </summary>
            <param name="key">key</param>
            <param name="def">default value</param>
            <returns>value in properties or default value if not found</returns>
        </member>
        <member name="M:DOL.GS.PropertyCollection.getObjectProperty(System.String,System.Object)">
            <summary>
            retrieve object property
            </summary>
            <param name="key">key</param>
            <param name="def">default value</param>
            <returns>value in properties or default value if not found</returns>
        </member>
        <member name="M:DOL.GS.PropertyCollection.getObjectProperty(System.Object,System.Object)">
            <summary>
            retrieve object property
            </summary>
            <param name="key">key</param>
            <param name="def">default value</param>
            <returns>value in properties or default value if not found</returns>
        </member>
        <member name="M:DOL.GS.PropertyCollection.getRequiredProperty(System.String,System.Boolean)">
            <summary>
            retrieve bool property but log if the property doesnt exist
            </summary>
            <param name="key">key</param>
            <param name="def">default value</param>
            <returns>value in properties or default value if not found</returns>
        </member>
        <member name="M:DOL.GS.PropertyCollection.getRequiredProperty(System.String,System.Int32)">
            <summary>
            retrieve int property but log if the property doesnt exist
            </summary>
            <param name="key">key</param>
            <param name="def">default value</param>
            <returns>value in properties or default value if not found</returns>
        </member>
        <member name="M:DOL.GS.PropertyCollection.getRequiredProperty(System.String,System.String)">
            <summary>
            retrieve string property but log if the property doesnt exist
            </summary>
            <param name="key">key</param>
            <param name="def">default value</param>
            <returns>value in properties or default value if not found</returns>
        </member>
        <member name="M:DOL.GS.PropertyCollection.getRequiredProperty(System.String,System.Object)">
            <summary>
            retrieve object property but log if the property doesnt exist
            </summary>
            <param name="key">key</param>
            <param name="def">default value</param>
            <returns>value in properties or default value if not found</returns>
        </member>
        <member name="M:DOL.GS.PropertyCollection.setProperty(System.Object,System.Object)">
            <summary>
            sets a property
            </summary>
            <param name="key">key</param>
            <param name="val">value</param>
        </member>
        <member name="M:DOL.GS.PropertyCollection.removeProperty(System.Object)">
            <summary>
            removes a property
            </summary>
            <param name="key">key</param>
        </member>
        <member name="T:DOL.GS.Movement.PathPoint">
            <summary>
            represents a point in a way path
            </summary>
        </member>
        <member name="P:DOL.GS.Movement.PathPoint.MaxSpeed">
            <summary>
            Speed allowed after that waypoint in forward direction
            </summary>
        </member>
        <member name="P:DOL.GS.Movement.PathPoint.Next">
            <summary>
            next waypoint in path
            </summary>
        </member>
        <member name="P:DOL.GS.Movement.PathPoint.Prev">
            <summary>
            previous waypoint in path
            </summary>
        </member>
        <member name="P:DOL.GS.Movement.PathPoint.FiredFlag">
            <summary>
            flag toggle when go through pathpoint
            </summary>
        </member>
        <member name="P:DOL.GS.Movement.PathPoint.Type">
            <summary>
            path type
            </summary>
        </member>
        <member name="P:DOL.GS.Movement.PathPoint.WaitTime">
            <summary>
            path type
            </summary>
        </member>
        <member name="T:DOL.GS.eDoorState">
            <summary>
            The state a door can take
            </summary>
        </member>
        <member name="F:DOL.GS.GameNpcInventoryTemplate.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GameNpcInventoryTemplate.m_usedInventoryItems">
            <summary>
            Holds inventory item instances already used in inventory templates
            </summary>
        </member>
        <member name="F:DOL.GS.GameNpcInventoryTemplate.m_usedInventoryTemplates">
            <summary>
            Holds already used inventory template instances
            </summary>
        </member>
        <member name="F:DOL.GS.GameNpcInventoryTemplate.EmptyTemplate">
            <summary>
            Holds an empty invenotory template instance
            </summary>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="F:DOL.GS.GameNpcInventoryTemplate.m_isClosed">
            <summary>
            Holds the closed flag, if true template cannot be modified
            </summary>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.GetValidInventorySlot(DOL.GS.eInventorySlot)">
            <summary>
            Check if the slot is valid in the inventory
            </summary>
            <param name="slot">SlotPosition to check</param>
            <returns>the slot if it's valid or eInventorySlot.Invalid if not</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.AddNPCEquipment(DOL.GS.eInventorySlot,System.Int32)">
            <summary>
            Adds item to template reusing inventory item instances from other templates.
            </summary>
            <param name="slot">The equipment slot</param>
            <param name="model">The equipment model</param>
            <returns>true if added</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.AddNPCEquipment(DOL.GS.eInventorySlot,System.Int32,System.Int32)">
            <summary>
            Adds item to template reusing inventory item instances from other templates.
            </summary>
            <param name="slot">The equipment slot</param>
            <param name="model">The equipment model</param>
            <param name="color">The equipment color</param>
            <returns>true if added</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.AddNPCEquipment(DOL.GS.eInventorySlot,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds item to template reusing inventory item instances from other templates.
            </summary>
            <param name="slot">The equipment slot</param>
            <param name="model">The equipment model</param>
            <param name="color">The equipment color</param>
            <param name="effect">The equipment effect</param>
            <returns>true if added</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.AddNPCEquipment(DOL.GS.eInventorySlot,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds item to template reusing iventory  item instances from other templates.
            </summary>
            <param name="slot">The equipment slot</param>
            <param name="model">The equipment model</param>
            <param name="color">The equipment color</param>
            <param name="effect">The equipment effect</param>
            <param name="extension">The equipment extension</param>
            <returns>true if added</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.RemoveNPCEquipment(DOL.GS.eInventorySlot)">
            <summary>
            Removes item from slot if template is not closed.
            </summary>
            <param name="slot">The slot to remove</param>
            <returns>true if removed</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.CloseTemplate">
            <summary>
            Closes this template and searches for other identical templates.
            Template cannot be modified after it was closed, clone it instead.
            </summary>
            <returns>Invetory template instance that should be used</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.CloneTemplate">
            <summary>
            Creates a shallow copy of the GameNpcInventoryTemplate.
            </summary>
            <returns>Open copy of this template</returns>
        </member>
        <member name="F:DOL.GS.GameNpcInventoryTemplate.m_npcEquipmentCache">
            <summary>
            Cache for fast loading of npc equipment
            </summary>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.LoadFromDatabase(System.String)">
            <summary>
            Loads the inventory template from the Database
            </summary>
            <returns>success</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.SaveIntoDatabase(System.String)">
            <summary>
            Save the inventory template to Database
            </summary>
            <returns>success</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.AddItem(DOL.GS.eInventorySlot,DOL.Database.InventoryItem)">
            <summary>
            Overridden. Inventory template cannot be modified.
            </summary>
            <param name="slot"></param>
            <param name="item"></param>
            <returns>false</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.RemoveItem(DOL.Database.InventoryItem)">
            <summary>
            Overridden. Inventory template cannot be modified.
            </summary>
            <param name="item">the item to remove</param>
            <returns>false</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.AddCountToStack(DOL.Database.InventoryItem,System.Int32)">
            <summary>
            Overridden. Inventory template cannot be modified.
            </summary>
            <param name="item"></param>
            <param name="count"></param>
            <returns>false</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.RemoveCountFromStack(DOL.Database.InventoryItem,System.Int32)">
            <summary>
            Overridden. Inventory template cannot be modified.
            </summary>
            <param name="item">the item to remove</param>
            <param name="count">the count of items to be removed from the stack</param>
            <returns>false</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.MoveItem(DOL.GS.eInventorySlot,DOL.GS.eInventorySlot,System.Int32)">
            <summary>
            Overridden. Inventory template cannot be modified.
            </summary>
            <param name="fromSlot">Source slot</param>
            <param name="toSlot">Destination slot</param>
            <returns>false</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.CombineItems(DOL.Database.InventoryItem,DOL.Database.InventoryItem)">
            <summary>
            Overridden. Inventory template cannot be modified.
            </summary>
            <param name="fromItem">First Item</param>
            <param name="toItem">Second Item</param>
            <returns>false</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.StackItems(System.Int32,System.Int32,System.Int32)">
            <summary>
            Overridden. Inventory template cannot be modified.
            </summary>
            <param name="fromSlot">First SlotPosition</param>
            <param name="toSlot">Second SlotPosition</param>
            <param name="itemCount">How many items to move</param>
            <returns>false</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.ExchangeItems(System.Int32,System.Int32)">
            <summary>
            Overridden. Inventory template cannot be modified.
            </summary>
            <param name="fromSlot">First SlotPosition</param>
            <param name="toSlot">Second SlotPosition</param>
            <returns>false</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.AddTemplate(DOL.Database.ItemTemplate,System.Int32,DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Overridden. Inventory template cannot be modified.
            </summary>
            <param name="template">The ItemTemplate</param>
            <param name="count">The count of items to add</param>
            <param name="minSlot">The first slot</param>
            <param name="maxSlot">The last slot</param>
            <returns>false</returns>
        </member>
        <member name="M:DOL.GS.GameNpcInventoryTemplate.RemoveTemplate(System.String,System.Int32,DOL.GS.eInventorySlot,DOL.GS.eInventorySlot)">
            <summary>
            Overridden. Inventory template cannot be modified.
            </summary>
            <param name="templateID">The ItemTemplate ID</param>
            <param name="count">The count of items to add</param>
            <param name="minSlot">The first slot</param>
            <param name="maxSlot">The last slot</param>
            <returns>false</returns>
        </member>
        <member name="P:DOL.GS.GameNpcInventoryTemplate.IsClosed">
            <summary>
            Gets the closed flag
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.LongWindAbility">
            <summary>
            Long Wind
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.PacketEncoding168">
            <summary>
            Handles the encoding and decoding of Mythic packets for 1.68
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketEncoding168.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketEncoding168.DecryptPacket(System.Byte[],System.Boolean)">
            <summary>
            Decrypts a 1.68 packet
            </summary>
            <param name="content">the content to be decrypted</param>
            <param name="udpPacket">true if the packet an udp packet</param>
            <returns>the decrypted packet</returns>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketEncoding168.EncryptPacket(System.Byte[],System.Boolean)">
            <summary>
            Encrypts a 1.68 packet
            </summary>
            <param name="content">the content to encrypt</param>
            <param name="udpPacket">true if the packet is an udp packet</param>
            <returns>the encrypted packet</returns>
        </member>
        <member name="P:DOL.GS.PacketHandler.PacketEncoding168.SBox">
            <summary>
            Gets or sets the SBox for this encoding
            </summary>
        </member>
        <member name="P:DOL.GS.PacketHandler.PacketEncoding168.EncryptionState">
            <summary>
            Gets or sets the Encryption State of this encoding
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.DialogResponseHandler.DialogBoxResponseAction">
            <summary>
            Handles dialog responses from players
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.DialogResponseHandler.DialogBoxResponseAction.m_data1">
            <summary>
            The general data field
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.DialogResponseHandler.DialogBoxResponseAction.m_data2">
            <summary>
            The general data field
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.DialogResponseHandler.DialogBoxResponseAction.m_data3">
            <summary>
            The general data field
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.DialogResponseHandler.DialogBoxResponseAction.m_messageType">
            <summary>
            The dialog type
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.DialogResponseHandler.DialogBoxResponseAction.m_response">
            <summary>
            The players response
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.DialogResponseHandler.DialogBoxResponseAction.#ctor(DOL.GS.GamePlayer,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new DialogBoxResponseAction
            </summary>
            <param name="actionSource">The responding player</param>
            <param name="data1">The general data field</param>
            <param name="data2">The general data field</param>
            <param name="data3">The general data field</param>
            <param name="messageType">The dialog type</param>
            <param name="response">The players response</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.DialogResponseHandler.DialogBoxResponseAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.GameSiegeCauldron">
            <summary>
            GameMovingObject is a base class for boats and siege weapons.
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.SiegeDirectDamageSpellHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SiegeDirectDamageSpellHandler.CalculateSpellResistChance(DOL.GS.GameLiving)">
            <summary>
            Calculates chance of spell getting resisted
            </summary>
            <param name="target">the target of the spell</param>
            <returns>chance that spell will be resisted for specific target</returns>
        </member>
        <member name="T:DOL.GS.GameDoor">
            <summary>
            GameDoor is class for regular door
            </summary>
        </member>
        <member name="F:DOL.GS.GameDoor.CLOSE_DOOR_TIME">
            <summary>
            The time interval after which door will be closed, in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.GameDoor.m_closeDoorAction">
            <summary>
            The timed action that will close the door
            </summary>
        </member>
        <member name="M:DOL.GS.GameDoor.#ctor">
            <summary>
            Creates a new GameDoor object
            </summary>
        </member>
        <member name="M:DOL.GS.GameDoor.LoadFromDatabase(DOL.Database.DataObject)">
            <summary>
            Loads this door from a door table slot
            </summary>
            <param name="obj">DBDoor</param>
        </member>
        <member name="M:DOL.GS.GameDoor.SaveIntoDatabase">
            <summary>
            save this door to a door table slot
            </summary>
        </member>
        <member name="F:DOL.GS.GameDoor.m_doorID">
            <summary>
            this hold the door index which is unique
            </summary>
        </member>
        <member name="F:DOL.GS.GameDoor.m_state">
            <summary>
            This hold the state of door
            </summary>
        </member>
        <member name="M:DOL.GS.GameDoor.Open">
            <summary>
            Call this function to open the door
            </summary>
        </member>
        <member name="M:DOL.GS.GameDoor.Close">
            <summary>
            Call this function to close the door
            </summary>
        </member>
        <member name="P:DOL.GS.GameDoor.DoorID">
            <summary>
            door index which is unique
            </summary>
        </member>
        <member name="P:DOL.GS.GameDoor.Flag">
            <summary>
            this is flag for packet (0 for regular door and 4 for keep door)
            </summary>
        </member>
        <member name="P:DOL.GS.GameDoor.State">
            <summary>
            The state of door (open or close)
            </summary>
        </member>
        <member name="T:DOL.GS.GameDoor.CloseDoorAction">
            <summary>
            The action that closes the door after specified duration
            </summary>
        </member>
        <member name="M:DOL.GS.GameDoor.CloseDoorAction.#ctor(DOL.GS.GameDoor)">
            <summary>
            Constructs a new close door action
            </summary>
            <param name="door">The door that should be closed</param>
        </member>
        <member name="M:DOL.GS.GameDoor.CloseDoorAction.OnTick">
            <summary>
            This function is called to close the door 10 seconds after it was opened
            </summary>
        </member>
        <member name="T:DOL.Events.ItemDroppedEventArgs">
            <summary>
            Holds the arguments for the ItemEquipped event of PlayerInventory
            </summary>
        </member>
        <member name="P:DOL.Events.ItemDroppedEventArgs.SourceItem">
            <summary>
            Gets the source item
            </summary>
        </member>
        <member name="P:DOL.Events.ItemDroppedEventArgs.GroundItem">
            <summary>
            Gets the ground item
            </summary>
        </member>
        <member name="T:DOL.Events.AttackedByEnemyEventArgs">
            <summary>
            Holds the arguments for the AttackedByEnemy event of GameLivings
            </summary>
        </member>
        <member name="F:DOL.Events.AttackedByEnemyEventArgs.m_attackData">
            <summary>
            The attack data
            </summary>
        </member>
        <member name="M:DOL.Events.AttackedByEnemyEventArgs.#ctor(DOL.GS.AttackData)">
            <summary>
            Constructs a new AttackedByEnemy
            </summary>
        </member>
        <member name="P:DOL.Events.AttackedByEnemyEventArgs.AttackData">
            <summary>
            Gets the attack data
            </summary>
        </member>
        <member name="T:DOL.Events.DatabaseEvent">
            <summary>
            This class holds all possible database events.
            Only constants defined here!
            </summary>
        </member>
        <member name="M:DOL.Events.DatabaseEvent.#ctor(System.String)">
            <summary>
            Constructs a new DatabaseEvent
            </summary>
            <param name="name">the name of the event</param>
        </member>
        <member name="F:DOL.Events.DatabaseEvent.AccountCreated">
            <summary>
            The AccountCreated event is fired whenever an account is created.
            <seealso cref="T:DOL.Events.AccountEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.DatabaseEvent.CharacterCreated">
            <summary>
            The CharacterCreated event is fired whenever a new character is created
            <seealso cref="T:DOL.Events.CharacterEventArgs"/>
            </summary>
        </member>
        <member name="F:DOL.Events.DatabaseEvent.CharacterDeleted">
            <summary>
            The CharacterDeleted event is fired whenever an account is deleted
            <seealso cref="T:DOL.Events.CharacterEventArgs"/>
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.PulsingSpellEffect">
            <summary>
            Assists SpellHandler with pulsing spells 
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.PulsingSpellEffect.m_spellHandler">
            <summary>
            The spell handler of this pulsing effect
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.PulsingSpellEffect.m_spellPulseAction">
            <summary>
            The pulsing timer of this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.PulsingSpellEffect.#ctor(DOL.GS.Spells.ISpellHandler)">
            <summary>
            Constructs new pulsing spell effect
            </summary>
            <param name="spellHandler">the spell handler doing the pulsing</param>
        </member>
        <member name="M:DOL.GS.Effects.PulsingSpellEffect.ToString">
            <summary>
            Returns the string representation of the PulsingSpellEffect
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Effects.PulsingSpellEffect.Start">
            <summary>
            Starts the effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.PulsingSpellEffect.Cancel(System.Boolean)">
            <summary>
            Effect must be canceled
            </summary>
            <param name="playerCanceled">true if player decided to cancel that effect by shift + rightclick</param>
        </member>
        <member name="P:DOL.GS.Effects.PulsingSpellEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.PulsingSpellEffect.OwnerName">
            <summary>
            The name of the owner
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.PulsingSpellEffect.Icon">
            <summary>
            Effect icon ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.PulsingSpellEffect.Concentration">
            <summary>
            Amount of concentration used by effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.PulsingSpellEffect.SpellHandler">
            <summary>
            The spell handler
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.PulsingSpellEffect.SpellPulseAction">
            <summary>
            The pulsing effect action
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.PulsingSpellEffect.SpellPulseAction.m_effect">
            <summary>
            The pulsing effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.PulsingSpellEffect.SpellPulseAction.#ctor(DOL.GS.GameObject,DOL.GS.Effects.PulsingSpellEffect)">
            <summary>
            Constructs a new pulsing action
            </summary>
            <param name="actionSource"></param>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Effects.PulsingSpellEffect.SpellPulseAction.OnTick">
            <summary>
            Callback for spell pulses
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.GuildBannerEffect">
            <summary>
            Base for all GuildBannerEffects. Use CreateEffectOfClass to get instances.
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.GuildBannerEffect.CreateEffectOfClass(DOL.GS.GamePlayer,DOL.GS.GamePlayer)">
            <summary>
            Starts the matching GuildBannerEffect with type (by carrierCharacterClass) and effectiveness
            </summary>
            <param name="carrier"></param>
            <param name="target"></param>
        </member>
        <member name="P:DOL.GS.Effects.GuildBannerEffect.Effectiveness">
            <summary>
            Returns the effectiveness of this GuildBannerEffect to be compareable.
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.BannerOfWardingEffect">
            <summary>
            Banner of Warding Effect
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.BannerOfShieldingEffect">
            <summary>
            Banner of Shielding
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.BannerOfFreedomEffect">
            <summary>
            Banner of Freedom
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.BannerOfBesiegingEffect">
            <summary>
            Banner of Freedom
            </summary>
        </member>
        <member name="T:DOL.GS.DatabaseConverters.Version002">
            <summary>
            Converts the database format to the version 2
            </summary>
        </member>
        <member name="F:DOL.GS.DatabaseConverters.Version002.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.DatabaseConverters.Version002.ConvertDatabase">
            <summary>
            style icon field added this should copy the ID value
            realm 6 should be peace flag and realm changed
            </summary>
        </member>
        <member name="T:DOL.GS.Repair">
            <summary>
            The class holding all repair functions
            </summary>
        </member>
        <member name="F:DOL.GS.Repair.PLAYER_CRAFTER">
            <summary>
            The player currently crafting
            </summary>
        </member>
        <member name="F:DOL.GS.Repair.PLAYER_PARTNER">
            <summary>
            The player currently crafting
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:DOL.GS.Repair.ITEM_CRAFTER" -->
        <member name="F:DOL.GS.Repair.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.Repair.BeginWork(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Called when player try to use a secondary crafting skill
            </summary>
            <param name="item"></param>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Repair.Proceed(DOL.GS.RegionTimer)">
            <summary>
            Called when craft time is finished 
            </summary>
            <param name="timer"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Repair.IsAllowedToBeginWork(DOL.GS.GamePlayer,DOL.Database.InventoryItem,System.Int32)">
            <summary>
            Check if the player own can enchant the item
            </summary>
            <param name="player"></param>
            <param name="item"></param>
            <param name="percentNeeded">min 50 max 100</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Repair.GetCraftingTime(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Calculate crafting time
            </summary>
        </member>
        <member name="M:DOL.GS.Repair.CalculateSuccessChances(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Calculate the chance of sucess
            </summary>
        </member>
        <member name="M:DOL.GS.Repair.BeginWork(DOL.GS.GamePlayer,DOL.GS.GameSiegeWeapon)">
            <summary>
            Called when player try to use a secondary crafting skill
            </summary>
            <param name="siegeWeapon"></param>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Repair.ProceedSiegeWeapon(DOL.GS.RegionTimer)">
            <summary>
            Called when craft time is finished 
            </summary>
            <param name="timer"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Repair.IsAllowedToBeginWork(DOL.GS.GamePlayer,DOL.GS.GameSiegeWeapon,System.Int32)">
            <summary>
            Check if the player own can enchant the item
            </summary>
            <param name="player"></param>
            <param name="siegeWeapon"></param>
            <param name="percentNeeded">min 50 max 100</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Repair.GetCraftingTime(DOL.GS.GamePlayer,DOL.GS.GameSiegeWeapon)">
            <summary>
            Calculate crafting time
            </summary>
        </member>
        <member name="M:DOL.GS.Repair.CalculateSuccessChances(DOL.GS.GamePlayer,DOL.GS.GameSiegeWeapon)">
            <summary>
            Calculate the chance of sucess
            </summary>
        </member>
        <member name="T:DOL.GS.Trainer.ShadowbladeTrainer">
            <summary>
            Shadowblade Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.ShadowbladeTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ShadowbladeTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ShadowbladeTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.SavageTrainer">
            <summary>
            Savage Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.SavageTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.SavageTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.SavageTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.ScoutTrainer">
            <summary>
            Scout Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.ScoutTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ScoutTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ScoutTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.MinstrelTrainer">
            <summary>
            Minstrel Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.MinstrelTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.MinstrelTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.MinstrelTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.ClericTrainer">
            <summary>
            Cleric Trainer
            </summary>	
        </member>
        <member name="F:DOL.GS.Trainer.ClericTrainer.WEAPON_ID1">
            <summary>
            The crush sword template ID
            </summary>
        </member>
        <member name="M:DOL.GS.Trainer.ClericTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ClericTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ClericTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.AcolyteTrainer">
            <summary>
            Acolyte Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.AcolyteTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.AcolyteTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Spells.ResurrectSpellHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ResurrectSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            Execute resurrect spell
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ResurrectSpellHandler.OnDirectEffect(DOL.GS.GameLiving,System.Double)">
            <summary>
            execute non duration spell effect on target
            </summary>
            <param name="target"></param>
            <param name="effectiveness"></param>
        </member>
        <member name="M:DOL.GS.Spells.ResurrectSpellHandler.CalculateNeededPower(DOL.GS.GameLiving)">
            <summary>
            Calculates the power to cast the spell
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.ResurrectSpellHandler.ResurrectResponceHandler(DOL.GS.GamePlayer,System.Byte)">
            <summary>
            Resurrects target if it accepts
            </summary>
            <param name="player"></param>
            <param name="response"></param>
        </member>
        <member name="M:DOL.GS.Spells.ResurrectSpellHandler.ResurrectLiving(DOL.GS.GameLiving)">
            <summary>
            Resurrects living
            </summary>
            <param name="living"></param>
        </member>
        <member name="M:DOL.GS.Spells.ResurrectSpellHandler.ResurrectExpiredCallback(DOL.GS.RegionTimer)">
            <summary>
            Cancels resurrection after some time
            </summary>
            <param name="callingTimer"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.ResurrectSpellHandler.CheckBeginCast(DOL.GS.GameLiving)">
            <summary>
            All checks before any casting begins
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.ResurrectSpellHandler.CheckEndCast(DOL.GS.GameLiving)">
            <summary>
            Checks after casting before spell is executed
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Spells.ResurrectSpellHandler.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.CharmSpellHandler">
            <summary>
            Charms target NPC for the spell duration.
            
            Spell.Value is used for hard NPC level cap
            Spell.Damage is used for percent of caster level cap
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.CharmSpellHandler.m_charmedNpc">
            <summary>
            Holds the charmed Npc for pulsing spells
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.CharmSpellHandler.m_controlledBrain">
            <summary>
            The property that stores the new npc brain
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.CharmSpellHandler.m_isBrainSet">
            <summary>
            Tells pulsing spells to not add brain if it was not removed by expire effect
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.CharmSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            called after normal spell cast is completed and effect has to be started
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.CharmSpellHandler.StartSpell(DOL.GS.GameLiving)">
            <summary>
            called when spell effect has to be started and applied to targets
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.CharmSpellHandler.CheckBeginCast(DOL.GS.GameLiving)">
            <summary>
            All checks before any casting begins
            </summary>
            <param name="selectedTarget"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.CharmSpellHandler.ApplyEffectOnTarget(DOL.GS.GameLiving,System.Double)">
            <summary>
            Apply effect on target or do spell action if non duration spell
            </summary>
            <param name="target">target that gets the effect</param>
            <param name="effectiveness">factor from 0..1 (0%-100%)</param>
        </member>
        <member name="M:DOL.GS.Spells.CharmSpellHandler.OnEffectStart(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            When an applied effect starts
            duration spells only
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.CharmSpellHandler.ReleaseEventHandler(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Handles release commands
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:DOL.GS.Spells.CharmSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.CharmSpellHandler.IsNewEffectBetter(DOL.GS.Effects.GameSpellEffect,DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Determines wether this spell is better than given one
            </summary>
            <param name="oldeffect"></param>
            <returns>true if this spell is better version than compare spell</returns>
        </member>
        <member name="P:DOL.GS.Spells.CharmSpellHandler.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.SkillHandler.SureShotAbilityHandler">
            <summary>
            Handler for Sure Shot ability
            </summary>
        </member>
        <member name="T:DOL.GS.SkillHandler.DirtyTricksAbilityHandler">
            <summary>
            Handler for Sprint Ability clicks
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.DirtyTricksAbilityHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.SkillHandler.DirtyTricksAbilityHandler.Execute(DOL.GS.Ability,DOL.GS.GamePlayer)">
            <summary>
            Execute dirtytricks ability
            </summary>
            <param name="ab">The used ability</param>
            <param name="player">The player that used the ability</param>
        </member>
        <member name="T:DOL.GS.PropertyCalc.ToHitBonusCalculator">
            <summary>
            The Character Stat calculator
            
            BuffBonusCategory1 is used for all single stat buffs
            BuffBonusCategory2 is used for all dual stat buffs
            BuffBonusCategory3 is used for all debuffs (positive values expected here)
            BuffBonusCategory4 is used for all other uncapped modifications
                               category 4 kicks in at last
            BuffBonusMultCategory1 used after all buffs/debuffs
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.MesmerizeDurationPercentCalculator">
            <summary>
            The melee damage bonus percent calculator
            
            BuffBonusCategory1 is used for buffs
            BuffBonusCategory2 unused
            BuffBonusCategory3 is used for debuff
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.MeleeDamagePercentCalculator">
             <summary>
             The melee damage bonus percent calculator
            
             BuffBonusCategory1 is used for buffs
             BuffBonusCategory2 unused
             BuffBonusCategory3 is used for debuff
             BuffBonusCategory4 unused
             BuffBonusMultCategory1 unused
             </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.LivingEffectiveLevelCalculator">
            <summary>
            The Living Effective Level calculator
            
            BuffBonusCategory1 is used for buffs, uncapped
            BuffBonusCategory2 unused
            BuffBonusCategory3 unused
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassRanger">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassRanger.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DOL.GS.Scripts.ClassRanger.OnSkillTrained(DOL.GS.GamePlayer,DOL.GS.Specialization)" -->
        <member name="T:DOL.GS.Scripts.ClassNightshade">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassNightshade.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DOL.GS.Scripts.ClassNightshade.OnSkillTrained(DOL.GS.GamePlayer,DOL.GS.Specialization)" -->
        <member name="T:DOL.GS.Scripts.ClassFriar">
             <summary>
            
             </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassFriar.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Items.DefaultMidgardItems">
            <summary>
            Creates needed items when they doesnt exist yet
            </summary>
        </member>
        <member name="F:DOL.GS.Items.DefaultMidgardItems.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.eObjectType">
            <summary>
            Object type sets the type of object, for example sword or shield
            </summary>
        </member>
        <member name="T:DOL.GS.eEquipmentItems">
            <summary>
            This enumeration holds all equipment
            items that can be used by a player
            </summary>
        </member>
        <member name="T:DOL.GS.Slot">
            <summary>
            all known slots
            </summary>
        </member>
        <member name="T:DOL.GS.eArmorSlot">
            <summary>
            This enumeration holds all slots that can wear attackable armor
            </summary>
        </member>
        <member name="T:DOL.GS.ArmorLevel">
            <summary>
            The armor ability level for different armor types
            </summary>
        </member>
        <member name="T:DOL.GS.eDamageType">
            <summary>
            Holds all the damage types that
            some attack may cause on the target
            </summary>
        </member>
        <member name="T:DOL.GS.eWeaponDamageType">
            <summary>
            Holds the weapon damage type
            </summary>
        </member>
        <member name="T:DOL.GS.eStat">
            <summary>
            The type of stat
            </summary>
        </member>
        <member name="T:DOL.GS.eResist">
            <summary>
            resists
            </summary>
        </member>
        <member name="T:DOL.GS.eColor">
            <summary>
            colors
            </summary>
        </member>
        <member name="T:DOL.GS.eResurectionSicknessType">
            <summary>
            Ressurection sickness types
            </summary>
        </member>
        <member name="T:DOL.GS.eInstrumentType">
            <summary>
            instrument types
            </summary>
        </member>
        <member name="T:DOL.GS.ePropertyType">
            <summary>
            All property types for check using SkillBase.CheckPropertyType. Must be unique bits set.
            </summary>
        </member>
        <member name="T:DOL.GS.eProperty">
            <summary>
            all available and buffable/bonusable properties on livings
            </summary>
        </member>
        <member name="T:DOL.GS.eRace">
            <summary>
            available races
            </summary>
        </member>
        <member name="T:DOL.GS.eCharacterClass">
            <summary>
            Holds all character classes
            </summary>
        </member>
        <member name="T:DOL.GS.eCharFacePart">
            <summary>
            Customisable face part
            </summary>
        </member>
        <member name="T:DOL.GS.ShieldLevel">
            <summary>
            the size of a shield
            </summary>
        </member>
        <member name="T:DOL.GS.eMaterial">
            <summary>
            the material type
            </summary>
        </member>
        <member name="T:DOL.GS.GlobalSpellsLines">
            <summary>
            strong name constants of spell line used in the world (poison, proc ect ...)
            </summary>
        </member>
        <member name="M:DOL.GS.GlobalConstants.IsWeapon(System.Int32)">
            <summary>
            ITEMTYPE != OBJECTYPE
            ITEMTYPE = SLOT
            OBJECTTYPE = REAL TYPE
            </summary>
            <param name="objectTypeID"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GlobalConstants.IsArmor(System.Int32)">
            <summary>
            ITEMTYPE != OBJECTYPE
            ITEMTYPE = SLOT
            OBJECTTYPE = REAL TYPE
            </summary>
            <param name="objectTypeID"></param>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.Scripts.ScriptMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Scripts.ScriptMgr.m_cmds">
            <summary>
            All commands will be stored in this hashtable
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.GetCommand(System.String)">
            <summary>
            Gets the requested command if it exists
            </summary>
            <param name="cmd">The command to retrieve</param>
            <returns>Returns the command if it exists, otherwise the return value is null</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.GuessCommand(System.String)">
            <summary>
            Looking for exact match first, then, if nothing found, trying to guess command using first letters
            </summary>
            <param name="cmd">The command to retrieve</param>
            <returns>Returns the command if it exists, otherwise the return value is null</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.GetCommandList(System.UInt32,System.Boolean)">
            <summary>
            Returns an array of all the available commands with the specified plvl and their descriptions
            </summary>
            <param name="plvl">plvl of the commands to get</param>
            <returns>An array of strings representing available commands at the specified plvl</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.ParseDirectory(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
            Parses a directory for all source files
            </summary>
            <param name="path">The root directory to start the search in</param>
            <param name="filter">A filter representing the types of files to search for</param>
            <param name="deep">True if subdirectories should be included</param>
            <returns>An ArrayList containing FileInfo's for all files in the path</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.LoadCommands">
            <summary>
            Searches the script assembly for all command handlers
            </summary>
            <returns>True if succeeded</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.HandleCommand(DOL.GS.GameClient,System.String)">
            <summary>
            Called when a command needs to be handled
            </summary>
            <param name="client">Client executing the command</param>
            <param name="cmdLine">Args for the command</param>
            <returns>True if succeeded</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.HandleCommandNoPlvl(DOL.GS.GameClient,System.String)">
            <summary>
            Called when a command needs to be handled without plvl being taken into consideration
            </summary>
            <param name="client">Client executing the command</param>
            <param name="cmdLine">Args for the command</param>
            <returns>True if succeeded</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.ParseCmdLine(System.String)">
            <summary>
            Splits string to substrings
            </summary>
            <param name="cmdLine">string that should be split</param>
            <returns>Array of substrings</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.ExecuteCommand(DOL.GS.GameClient,DOL.GS.Scripts.ScriptMgr.GameCommand,System.String[])">
            <summary>
            Checks for 'help' param and executes command
            </summary>
            <param name="client">Client executing the command</param>
            <param name="myCommand">command to be executed</param>
            <param name="pars">Args for the command</param>
            <returns>Command result</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.CompileScripts(System.Boolean,System.String,System.String,System.String[])">
            <summary>
            Compiles the scripts into an assembly
            </summary>
            <param name="compileVB">True if the source files will be in VB.NET</param>
            <param name="path">Path to the source files</param>
            <param name="dllName">Name of the assembly to be generated</param>
            <param name="asm_names">References to other assemblies</param>
            <returns>True if succeeded</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.FindAllAbilityActionHandler(System.Reflection.Assembly)">
            <summary>
            searches the given assembly for AbilityActionHandlers
            </summary>
            <param name="asm">The assembly to search through</param>
            <returns>Hashmap consisting of keyName => AbilityActionHandler Type</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.FindAllSpecActionHandler(System.Reflection.Assembly)">
            <summary>
            searches the script directory for SpecActionHandlers
            </summary>
            <param name="asm">The assembly to search through</param>
            <returns>Hashmap consisting of keyName => SpecActionHandler Type</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.FindClassSpec(System.String,System.Reflection.Assembly)">
            <summary>
            Searches for ClassSpec's by name in a given assembly
            </summary>
            <param name="asm">The assembly to search through</param>
            <param name="name">the classname to search</param>
            <returns>ClassSpec that was found or null if not found</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.FindClassSpec(System.Int32,System.Reflection.Assembly)">
            <summary>
            Searches for ClassSpec's by id in a given assembly
            </summary>
            <param name="asm">the assembly to search through</param>
            <param name="id">the classid to search</param>
            <returns>ClassSpec that was found or null if not found</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.FindAllNPCGuildScriptClasses(DOL.GS.PacketHandler.eRealm,System.Reflection.Assembly)">
            <summary>
            Searches for NPC guild scripts
            </summary>
            <param name="realm">Realm for searching handlers</param>
            <param name="asm">The assembly to search through</param>
            <returns>
            all handlers that were found, guildname(string) => classtype(Type)
            </returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.FindNPCGuildScriptClass(System.String,DOL.GS.PacketHandler.eRealm)">
            <summary>
            searches for a npc guild script
            </summary>
            <param name="guild"></param>
            <param name="realm"></param>
            <returns>type of class for searched npc guild or null</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.CreateControlledBrain(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new brain for player controlled npcs
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.CreateSpellHandler(DOL.GS.GameLiving,DOL.GS.Spell,DOL.GS.SpellLine)">
            <summary>
            Create a spell handler for caster with given spell
            </summary>
            <param name="caster">caster that uses the spell</param>
            <param name="spell">the spell itself</param>
            <param name="line">the line that spell belongs to or null</param>
            <returns>spellhandler or null if not found</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.CreateServerRules(DOL.eGameServerType)">
            <summary>
            Create server rules handler for specified server type
            </summary>
            <param name="serverType">server type used to look for rules handler</param>
            <returns>server rules handler or normal server type handler if errors</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.GetType(System.String)">
            <summary>
            Search for a type by name; first in GameServer assembly then in scripts assemblies
            </summary>
            <param name="name">The type name</param>
            <returns>Found type or null</returns>
        </member>
        <member name="M:DOL.GS.Scripts.ScriptMgr.GetDerivedClasses(System.Type)">
            <summary>
            Finds all classes that derive from given type.
            First check scripts then GameServer assembly.
            </summary>
            <param name="baseType">The base class type.</param>
            <returns>Array of types or empty array</returns>
        </member>
        <member name="P:DOL.GS.Scripts.ScriptMgr.Scripts">
            <summary>
            Gets the scripts assemblies
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ScriptMgr.GameCommand">
            <summary>
            This class will hold all info about a gamecommand
            </summary>
        </member>
        <member name="T:DOL.GS.NPCGuildScriptAttribute">
            <summary>
            Marks a class as a guild wide npc script
            </summary>
        </member>
        <member name="M:DOL.GS.NPCGuildScriptAttribute.#ctor(System.String,DOL.GS.PacketHandler.eRealm)">
            <summary>
            constructs new attribute
            </summary>
            <param name="guildname">name of the npc guild to that the script has to be applied</param>
            <param name="realm">valid realm for the script</param>
        </member>
        <member name="M:DOL.GS.NPCGuildScriptAttribute.#ctor(System.String)">
            <summary>
            constructs new attribute
            </summary>
            <param name="guildname">name of the npc guild to that the script has to be applied</param>
        </member>
        <member name="P:DOL.GS.NPCGuildScriptAttribute.GuildName">
            <summary>
            npc guild
            </summary>
        </member>
        <member name="P:DOL.GS.NPCGuildScriptAttribute.Realm">
            <summary>
            valid realm for this script
            </summary>
        </member>
        <member name="T:DOL.GS.LootGeneratorOneTimeDrop">
            <summary>
            LootGeneratorOneTimeDrop
            This implementation make the loot drop only one time by player
            </summary>
        </member>
        <member name="F:DOL.GS.LootGeneratorOneTimeDrop.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.LootGeneratorOneTimeDrop.m_OTDXMob">
             <summary>
            
             </summary>
        </member>
        <member name="M:DOL.GS.LootGeneratorOneTimeDrop.#ctor">
            <summary>
            Constrcut a new One Time Drop Loot Generator and load it's values from database.
            </summary>
        </member>
        <member name="M:DOL.GS.LootGeneratorOneTimeDrop.PreloadLootOTDs">
            <summary>
            Loads the loottemplates
            </summary>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.RealmAbilities.AmelioratingMelodiesAbility">
            <summary>
            Ameliorating Melodies realm ability
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.AmelioratingMelodiesAbility.#ctor(DOL.Database.DBAbility,System.Int32)">
            <summary>
            Constructs the Ameliorating Melodies handler
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.AmelioratingMelodiesAbility.Execute(DOL.GS.GameLiving)">
            <summary>
            Action
            </summary>
            <param name="living"></param>
        </member>
        <member name="M:DOL.GS.RealmAbilities.AmelioratingMelodiesAbility.GetReUseDelay(System.Int32)">
            <summary>
            Returns the re-use delay of the ability
            </summary>
            <param name="level">Level of the ability</param>
            <returns>Delay in seconds</returns>
        </member>
        <member name="M:DOL.GS.RealmAbilities.AmelioratingMelodiesAbility.AddEffectsInfo(System.Collections.IList)">
            <summary>
            Delve information
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.PacketHandlerType">
            <summary>
            Type of packet handler
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.PacketHandlerAttribute">
            <summary>
            Denotes a class as a packet handler
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketHandlerAttribute.m_type">
            <summary>
            Type of packet handler
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketHandlerAttribute.m_code">
            <summary>
            Packet ID to handle
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.PacketHandlerAttribute.m_desc">
            <summary>
            Description of the packet handler
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.PacketHandlerAttribute.#ctor(DOL.GS.PacketHandler.PacketHandlerType,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type of packet to handle</param>
            <param name="code">ID of the packet to handle</param>
            <param name="desc">Description of the packet handler</param>
        </member>
        <member name="P:DOL.GS.PacketHandler.PacketHandlerAttribute.Type">
            <summary>
            Gets the packet type
            </summary>
        </member>
        <member name="P:DOL.GS.PacketHandler.PacketHandlerAttribute.Code">
            <summary>
            Gets the packet ID that is handled
            </summary>
        </member>
        <member name="P:DOL.GS.PacketHandler.PacketHandlerAttribute.Description">
            <summary>
            Gets the description of the packet handler
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.GSTCPPacketOut">
            <summary>
            An outgoing TCP packet
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.GSTCPPacketOut.#ctor(System.Byte)">
            <summary>
            Constructor
            </summary>
            <param name="packetCode">ID of the packet</param>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.SiegeWeaponActionHandler">
             <summary>
            SiegeWeaponActionHandler handler the command of player to control siege weapon
             </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.RemoveConcentrationEffectHandler">
            <summary>
            Called when player removes concentration spell in conc window
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.RemoveConcentrationEffectHandler.CancelEffectHandler">
            <summary>
            Handles player cancel effect requests
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.RemoveConcentrationEffectHandler.CancelEffectHandler.m_index">
            <summary>
            The effect index
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.RemoveConcentrationEffectHandler.CancelEffectHandler.#ctor(DOL.GS.GamePlayer,System.Int32)">
            <summary>
            Constructs a new CancelEffectHandler
            </summary>
            <param name="actionSource">The action source</param>
            <param name="index">The effect index</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.RemoveConcentrationEffectHandler.CancelEffectHandler.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerBuyRequestHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.PlayerAppraiseItemRequestHandler.AppraiseActionHandler">
            <summary>
            Handles item apprise actions
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerAppraiseItemRequestHandler.AppraiseActionHandler.m_slot">
            <summary>
            The item slot
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerAppraiseItemRequestHandler.AppraiseActionHandler.#ctor(DOL.GS.GamePlayer,System.Int32)">
            <summary>
            Constructs a new AppraiseAction
            </summary>
            <param name="actionSource">The action source</param>
            <param name="slot">The item slot</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerAppraiseItemRequestHandler.AppraiseActionHandler.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.CheckLOSResponseHandler.HandleCheckAction">
            <summary>
            Handles the LOS check response
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.CheckLOSResponseHandler.HandleCheckAction.m_checkerOid">
            <summary>
            The LOS source OID
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.CheckLOSResponseHandler.HandleCheckAction.m_targetOid">
            <summary>
            The LOS target OID
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.CheckLOSResponseHandler.HandleCheckAction.m_response">
            <summary>
            The request response
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.CheckLOSResponseHandler.HandleCheckAction.#ctor(DOL.GS.GamePlayer,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new HandleCheckAction
            </summary>
            <param name="actionSource">The player received the packet</param>
            <param name="checkerOid">The LOS source OID</param>
            <param name="targetOid">The LOS target OID</param>
            <param name="response">The request response</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.CheckLOSResponseHandler.HandleCheckAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.Keeps.eInteractType">
            <summary>
            The type of interaction we check for to handle lord permission checks
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.eInteractType.Claim">
            <summary>
            Claim the Area
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.eInteractType.Release">
            <summary>
            Release the Area
            </summary>
        </member>
        <member name="F:DOL.GS.Keeps.eInteractType.ChangeLevel">
            <summary>
            Change the level of the Area
            </summary>
        </member>
        <member name="T:DOL.GS.Keeps.PlayerMgr">
            <summary>
            Class to manage all the dealings with Players
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.PlayerMgr.BroadcastCapture(DOL.GS.Keeps.AbstractGameKeep)">
            <summary>
            Sends a message to all players to notify them of the keep capture
            </summary>
            <param name="keep">The keep object</param>
        </member>
        <member name="M:DOL.GS.Keeps.PlayerMgr.BroadcastRaize(DOL.GS.Keeps.AbstractGameKeep,System.Byte)">
            <summary>
            Sends a message to all players to notify them of the raize
            </summary>
            <param name="keep">The keep object</param>
            <param name="realm">The raizing realm</param>
        </member>
        <member name="M:DOL.GS.Keeps.PlayerMgr.BroadcastClaim(DOL.GS.Keeps.AbstractGameKeep)">
            <summary>
            Sends a message to all players of a realm, to notify them of a claim
            </summary>
            <param name="keep">The keep object</param>
        </member>
        <member name="M:DOL.GS.Keeps.PlayerMgr.BroadcastRelease(DOL.GS.Keeps.AbstractGameKeep)">
            <summary>
            Sends a message to all players of a realm, to notify them of a release
            </summary>
            <param name="keep">The keep object</param>
        </member>
        <member name="M:DOL.GS.Keeps.PlayerMgr.BroadcastMessage(System.String,DOL.GS.PacketHandler.eRealm)">
            <summary>
            Method to broadcast messages, if eRealm.None all can see,
            else only the right realm can see
            </summary>
            <param name="message">The message</param>
            <param name="realm">The realm</param>
        </member>
        <member name="M:DOL.GS.Keeps.PlayerMgr.PopupAreaEnter(DOL.GS.GamePlayer,System.String)">
            <summary>
            Method to popup message on area enter
            </summary>
            <param name="player">The target of the message</param>
            <param name="message">The message</param>
        </member>
        <member name="M:DOL.GS.Keeps.PlayerMgr.IsAllowedToInteract(DOL.GS.GamePlayer,DOL.GS.Keeps.AbstractGameKeep,DOL.GS.Keeps.eInteractType)">
            <summary>
            Method to tell us if a player can interact with the lord to do certain tasks
            </summary>
            <param name="player">The player object</param>
            <param name="area">The area object</param>
            <param name="type">The type of interaction</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Keeps.PlayerMgr.UpdateStats(DOL.GS.Keeps.GuardLord)">
            <summary>
            Method to update stats for all players who helped kill lord
            </summary>
            <param name="lord">The lord object</param>
        </member>
        <member name="T:DOL.Events.RegionPlayerEventArgs">
            <summary>
            Holds the arguments for the player enter or leave region event
            </summary>
        </member>
        <member name="F:DOL.Events.RegionPlayerEventArgs.m_player">
            <summary>
            The player who enter or leave region
            </summary>
        </member>
        <member name="M:DOL.Events.RegionPlayerEventArgs.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new player enter or leave region event args
            </summary>
        </member>
        <member name="P:DOL.Events.RegionPlayerEventArgs.Player">
            <summary>
            Gets the player
            </summary>
        </member>
        <member name="T:DOL.Events.AreaEvent">
            <summary>
            This class holds all possible Area events.
            Only constants defined here!
            </summary>
        </member>
        <member name="M:DOL.Events.AreaEvent.IsValidFor(System.Object)">
            <summary>
            Tests if this event is valid for the specified object
            </summary>
            <param name="o">The object for which the event wants to be registered</param>
            <returns>true if valid, false if not</returns>
        </member>
        <member name="F:DOL.Events.AreaEvent.PlayerEnter">
            <summary>
            The PlayerEnter event is fired whenever the player enters an area		
            </summary>
        </member>
        <member name="F:DOL.Events.AreaEvent.PlayerLeave">
            <summary>
            The PlayerLeave event is fired whenever the player leaves an area		
            </summary>
        </member>
        <member name="T:DOL.Events.YellReceiveEventArgs">
            <summary>
            Holds the arguments for the YellReceive event of GameLivings
            </summary>
        </member>
        <member name="M:DOL.Events.YellReceiveEventArgs.#ctor(DOL.GS.GameLiving,DOL.GS.GameLiving,System.String)">
            <summary>
            Constructs a new YellReceivedEventArgs
            </summary>
            <param name="source">the source of the yell</param>
            <param name="target">the target who listened to the yell</param>
            <param name="text">the text being yelled</param>
        </member>
        <member name="T:DOL.Events.WalkEventArgs">
            <summary>
            Holds the arguments for the Walk event of GameNPC
            </summary>
        </member>
        <member name="M:DOL.Events.WalkEventArgs.#ctor(System.Int32)">
            <summary>
            Constructs a new WalkEventArgs
            </summary>
            <param name="speed">the walk speed</param>
        </member>
        <member name="P:DOL.Events.WalkEventArgs.Speed">
            <summary>
            Gets the walk speed
            </summary>
        </member>
        <member name="T:DOL.Events.GameEventMgr">
            <summary>
            This manager is used to handle all events of the game
            and of individual GameObjects
            </summary>
        </member>
        <member name="F:DOL.Events.GameEventMgr.TIMEOUT">
            <summary>
            Timeout for lock operations
            </summary>
        </member>
        <member name="F:DOL.Events.GameEventMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.Events.GameEventMgr.m_GameObjectEventCollections">
            <summary>
            Holds a list of event handler collections for single gameobjects
            </summary>
        </member>
        <member name="F:DOL.Events.GameEventMgr.m_lock">
            <summary>
            A lock used to access the event collections of livings
            </summary>
        </member>
        <member name="F:DOL.Events.GameEventMgr.m_GlobalHandlerCollection">
            <summary>
            Holds a list of all global eventhandlers
            </summary>
        </member>
        <member name="M:DOL.Events.GameEventMgr.RegisterGlobalEvents(System.Reflection.Assembly,System.Type,DOL.Events.DOLEvent)">
            <summary>
            Registers some global events that are specified by attributes
            </summary>
            <param name="asm">The assembly to search through</param>
            <param name="attribute">The custom attribute to search for</param>
            <param name="e">The event to register in case the custom attribute is found</param>
            <exception cref="T:System.ArgumentNullException">If one of the parameters is null</exception>
        </member>
        <member name="M:DOL.Events.GameEventMgr.AddHandler(DOL.Events.DOLEvent,DOL.Events.DOLEventHandler)">
            <summary>
            Registers a single global event handler.
            The global event handlers will be called for ALL events,
            so use them wisely, they might incure a big performance
            hit if used unwisely.
            </summary>
            <param name="e">The event type to register for</param>
            <param name="del">The event handler to register for this event type</param>
            <exception cref="T:System.ArgumentNullException">If one of the parameters is null</exception>
        </member>
        <member name="M:DOL.Events.GameEventMgr.AddHandlerUnique(DOL.Events.DOLEvent,DOL.Events.DOLEventHandler)">
            <summary>
            Registers a single global event handler.
            The global event handlers will be called for ALL events,
            so use them wisely, they might incure a big performance
            hit if used unwisely.
            If an equal handler has already been added, nothing will be done
            </summary>
            <param name="e">The event type to register for</param>
            <param name="del">The event handler to register for this event type</param>
            <exception cref="T:System.ArgumentNullException">If one of the parameters is null</exception>
        </member>
        <member name="M:DOL.Events.GameEventMgr.AddHandler(DOL.Events.DOLEvent,DOL.Events.DOLEventHandler,System.Boolean)">
            <summary>
            Registers a single global event handler.
            The global event handlers will be called for ALL events,
            so use them wisely, they might incure a big performance
            hit if used unwisely.
            </summary>
            <param name="e">The event type to register for</param>
            <param name="del">The event handler to register for this event type</param>
            <param name="unique">Flag wether event shall be added unique or not</param>
            <exception cref="T:System.ArgumentNullException">If one of the parameters is null</exception>
        </member>
        <member name="M:DOL.Events.GameEventMgr.AddHandler(System.Object,DOL.Events.DOLEvent,DOL.Events.DOLEventHandler)">
            <summary>
            Registers a single local event handler.
            Local event handlers will only be called if the
            "sender" parameter in the Notify method equals
            the object for which a local event handler was
            registered.
            </summary>
            <remarks>
            Certain events will never have a local event handler.
            This happens if the Notify method is called without
            a sender parameter for example!
            </remarks>
            <param name="obj">The object that needs to be the sender of events</param>
            <param name="e">The event type to register for</param>
            <param name="del">The event handler to register for this event type</param>
            <exception cref="T:System.ArgumentNullException">If one of the parameters is null</exception>
        </member>
        <member name="M:DOL.Events.GameEventMgr.AddHandlerUnique(System.Object,DOL.Events.DOLEvent,DOL.Events.DOLEventHandler)">
            <summary>
            Registers a single local event handler.
            Local event handlers will only be called if the
            "sender" parameter in the Notify method equals
            the object for which a local event handler was
            registered.
            If a equal handler has already been added, nothin will be done
            </summary>
            <remarks>
            Certain events will never have a local event handler.
            This happens if the Notify method is called without
            a sender parameter for example!
            </remarks>
            <param name="obj">The object that needs to be the sender of events</param>
            <param name="e">The event type to register for</param>
            <param name="del">The event handler to register for this event type</param>
            <exception cref="T:System.ArgumentNullException">If one of the parameters is null</exception>
        </member>
        <member name="M:DOL.Events.GameEventMgr.AddHandler(System.Object,DOL.Events.DOLEvent,DOL.Events.DOLEventHandler,System.Boolean)">
            <summary>
            Registers a single local event handler.
            Local event handlers will only be called if the
            "sender" parameter in the Notify method equals
            the object for which a local event handler was
            registered.
            </summary>
            <remarks>
            Certain events will never have a local event handler.
            This happens if the Notify method is called without
            a sender parameter for example!
            </remarks>
            <param name="obj">The object that needs to be the sender of events</param>
            <param name="e">The event type to register for</param>
            <param name="del">The event handler to register for this event type</param>
            <param name="unique">Flag wether event shall be added unique or not</param>
            <exception cref="T:System.ArgumentNullException">If one of the parameters is null</exception>
        </member>
        <member name="M:DOL.Events.GameEventMgr.RemoveHandler(DOL.Events.DOLEvent,DOL.Events.DOLEventHandler)">
            <summary>
            Removes a global event handler.
            You need to have registered the event before being able to remove it.
            </summary>
            <param name="e">The event type from which to deregister</param>
            <param name="del">The event handler to deregister for this event type</param>
            <exception cref="T:System.ArgumentNullException">If one of the parameters is null</exception>
        </member>
        <member name="M:DOL.Events.GameEventMgr.RemoveHandler(System.Object,DOL.Events.DOLEvent,DOL.Events.DOLEventHandler)">
            <summary>
            Removes a single event handler from an object.
            You need to have registered the event before being
            able to remove it.
            </summary>
            <param name="obj">The object that needs to be the sender of events</param>
            <param name="e">The event type from which to deregister</param>
            <param name="del">The event handler to deregister for this event type</param>
            <exception cref="T:System.ArgumentNullException">If one of the parameters is null</exception>
        </member>
        <member name="M:DOL.Events.GameEventMgr.RemoveAllHandlers(DOL.Events.DOLEvent,System.Boolean)">
            <summary>
            Removes all global event handlers for a specific event type
            </summary>
            <param name="e">The event type from which to deregister all handlers</param>
            <param name="deep">Specifies if all local registered event handlers
            should be removed as well.</param>
            <exception cref="T:System.ArgumentNullException">If no event type given</exception>
        </member>
        <member name="M:DOL.Events.GameEventMgr.RemoveAllHandlers(System.Object,DOL.Events.DOLEvent)">
            <summary>
            Removes all event handlers of a specific type
            from a specific object
            </summary>
            <param name="obj">The object from which to remove the handlers</param>
            <param name="e">The event type from which to deregister all handlers</param>
            <exception cref="T:System.ArgumentNullException">If no event type given</exception>
        </member>
        <member name="M:DOL.Events.GameEventMgr.RemoveAllHandlers(System.Boolean)">
            <summary>
            Removes all event handlers
            </summary>
            <param name="deep">Specifies if all local registered event handlers
            should also be removed</param>
        </member>
        <member name="M:DOL.Events.GameEventMgr.Notify(DOL.Events.DOLEvent)">
            <summary>
            Notifies all global event handlers of the occurance of a specific
            event type.
            </summary>
            <param name="e">The event type that occured</param>
            <exception cref="T:System.ArgumentNullException">If no event type given</exception>
        </member>
        <member name="M:DOL.Events.GameEventMgr.Notify(DOL.Events.DOLEvent,System.Object)">
            <summary>
            Notifies all global and local event handlers of the occurance
            of a specific event type.
            </summary>
            <param name="e">The event type that occured</param>
            <param name="sender">The sender of this event</param>
            <exception cref="T:System.ArgumentNullException">If no event type given</exception>
        </member>
        <member name="M:DOL.Events.GameEventMgr.Notify(DOL.Events.DOLEvent,System.EventArgs)">
            <summary>
            Notifies all global event handlers of the occurance
            of a specific event type with some event arguments.
            </summary>
            <param name="e">The event type that occured</param>
            <param name="args">The event arguments</param>
            <exception cref="T:System.ArgumentNullException">If no event type given</exception>
        </member>
        <member name="M:DOL.Events.GameEventMgr.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Notifies all global and local event handlers of the occurance 
            of a specific event type with some event arguments!
            </summary>
            <param name="e">The event type that occured</param>
            <param name="sender">The sender of this event</param>
            <param name="eArgs">The event arguments</param>
            <exception cref="T:System.ArgumentNullException">If no event type given</exception>
            <remarks>Overwrite the EventArgs class to set own arguments</remarks>
        </member>
        <member name="T:DOL.Events.CharacterEventArgs">
            <summary>
            Holds the arguments for the character events
            </summary>
        </member>
        <member name="F:DOL.Events.CharacterEventArgs.m_character">
            <summary>
            Holds the target character for this event
            </summary>
        </member>
        <member name="F:DOL.Events.CharacterEventArgs.m_client">
            <summary>
            Holds the character's creation client for this event
            </summary>
        </member>
        <member name="M:DOL.Events.CharacterEventArgs.#ctor(DOL.Database.Character,DOL.GS.GameClient)">
            <summary>
            Constructs a new event argument class for the
            character events 
            </summary>
            <param name="character"></param>
        </member>
        <member name="P:DOL.Events.CharacterEventArgs.Character">
            <summary>
            Gets the character for this event
            </summary>
        </member>
        <member name="P:DOL.Events.CharacterEventArgs.GameClient">
            <summary>
            Gets the client for this event
            </summary>
        </member>
        <member name="T:DOL.GS.LeatherCrafting">
            <summary>
            The leather crafting skill
            </summary>
        </member>
        <member name="M:DOL.GS.LeatherCrafting.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.LeatherCrafting.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.LeatherCrafting.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="T:DOL.GS.eCraftingSkill">
            <summary>
            Enum of all crafting skill (related to client file)
            </summary>
        </member>
        <member name="T:DOL.GS.CraftingMgr">
            <summary>
            Description résumée de CraftingMgr.
            </summary>
        </member>
        <member name="F:DOL.GS.CraftingMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.CraftingMgr.m_craftingskills">
            <summary>
            Hold all crafting skill
            </summary>
        </member>
        <member name="M:DOL.GS.CraftingMgr.getSkillbyEnum(DOL.GS.eCraftingSkill)">
            <summary>
            get a crafting skill by the enum index
            </summary>
            <param name="skill"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.CraftingMgr.Init">
            <summary>
            Initialize the crafting system
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.CraftingMgr.GetSecondaryCraftingSkillToWorkOnItem(DOL.Database.InventoryItem)">
            <summary>
            Return the crafting skill needed to work on the item
            </summary>
        </member>
        <member name="M:DOL.GS.CraftingMgr.GetItemCraftLevel(DOL.Database.InventoryItem)">
            <summary>
            Return the approximative craft level of the item
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.TauntSpellHandler">
            <summary>
            Summary description for TauntSpellHandler.
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.TauntSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            called after normal spell cast is completed and effect has to be started
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.TauntSpellHandler.OnDirectEffect(DOL.GS.GameLiving,System.Double)">
            <summary>
            execute non duration spell effect on target
            </summary>
            <param name="target"></param>
            <param name="effectiveness"></param>
        </member>
        <member name="M:DOL.GS.Spells.TauntSpellHandler.OnSpellResisted(DOL.GS.GameLiving)">
            <summary>
            When spell was resisted
            </summary>
            <param name="target">the target that resisted the spell</param>
        </member>
        <member name="T:DOL.GS.Spells.HealthRegenSpellHandler">
            <summary>
            Health regeneration rate buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.PowerRegenSpellHandler">
            <summary>
            Power regeneration rate buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.EnduranceRegenSpellHandler">
            <summary>
            Endurance regeneration rate buff
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.EnduranceRegenSpellHandler.CONC_MAX_RANGE">
            <summary>
            The max range from caster to owner for all conc buffs
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.EnduranceRegenSpellHandler.RANGE_CHECK_INTERVAL">
            <summary>
            The interval for range checks, in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.EnduranceRegenSpellHandler.m_concEffects">
            <summary>
            Holds all owners of conc buffs
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.EnduranceRegenSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            Execute property changing spell
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:DOL.GS.Spells.EnduranceRegenSpellHandler.StartSpell(DOL.GS.GameLiving)">
            <summary>
            called when spell effect has to be started and applied to targets
            </summary>
            <param name="target">The current target object</param>
        </member>
        <member name="M:DOL.GS.Spells.EnduranceRegenSpellHandler.OnEffectStart(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            start changing effect on target
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.EnduranceRegenSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.EnduranceRegenSpellHandler.EnableEffect(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Disables spell effect
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.EnduranceRegenSpellHandler.DisableEffect(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Enables spell effect
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.EnduranceRegenSpellHandler.#ctor(DOL.GS.GameLiving,DOL.GS.Spell,DOL.GS.SpellLine)">
            <summary>
            Constructs a new EnduranceRegenSpellHandler
            </summary>
            <param name="caster">The spell caster</param>
            <param name="spell">The spell used</param>
            <param name="line">The spell line used</param>
        </member>
        <member name="T:DOL.GS.Spells.EnduranceRegenSpellHandler.RangeCheckAction">
            <summary>
            Checks effect owner distance and cancels the effect if too far
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.EnduranceRegenSpellHandler.RangeCheckAction.m_handler">
            <summary>
            The list of effects
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.EnduranceRegenSpellHandler.RangeCheckAction.#ctor(DOL.GS.GameLiving,DOL.GS.Spells.EnduranceRegenSpellHandler)">
            <summary>
            Constructs a new RangeCheckAction
            </summary>
            <param name="actionSource">The action source</param>
            <param name="handler">The spell handler</param>
        </member>
        <member name="M:DOL.GS.Spells.EnduranceRegenSpellHandler.RangeCheckAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.CurePoisonSpellHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.CureMezzSpellHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.CureDiseaseSpellHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.ServerRules.PvEServerRules">
            <summary>
            Set of rules for "PvE" server type.
            </summary>
        </member>
        <member name="M:DOL.GS.ServerRules.PvEServerRules.IsAllowedToCraft(DOL.GS.GamePlayer,DOL.Database.ItemTemplate)">
            <summary>
            Is player allowed to make the item
            </summary>
            <param name="player"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.PvEServerRules.GetColorHandling(DOL.GS.GameClient)">
            <summary>
            Gets the server type color handling scheme
            
            ColorHandling: this byte tells the client how to handle color for PC and NPC names (over the head) 
            0: standard way, other realm PC appear red, our realm NPC appear light green 
            1: standard PvP way, all PC appear red, all NPC appear with their level color 
            2: Same realm livings are friendly, other realm livings are enemy; nearest friend/enemy buttons work
            3: standard PvE way, all PC friendly, realm 0 NPC enemy rest NPC appear light green 
            4: All NPC are enemy, all players are friendly; nearest friend button selects self, nearest enemy don't work at all
            </summary>
            <param name="client">The client asking for color handling</param>
            <returns>The color handling</returns>
        </member>
        <member name="T:DOL.GS.Quests.QuestMgr">
            <summary>
            Declares the quest managed, all questDescriptor instances
            must be registered here to be usable
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.QuestMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.QuestMgr.m_questDescriptors">
            <summary>
            Holds all the quests descriptors used in the world (unique id => descriptor)
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.QuestMgr.LAST_USED_QUEST_DESCRIPTOR">
            <summary>
            This is the last used global quest descriptor
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.QuestMgr.m_questDescriptorsByNPC">
            <summary>
            Holds all the npc quests descriptors used in the world (npc => list of descriptors)
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.getBuilder(System.Type)">
            <summary>
            Creates a new QuestBuilder with the given QuestType
            </summary>
            <param name="questType">Type of Quest this Builder is used for</param>
            <returns>QuestBuilder</returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.ResolveLiving(System.Object)">
            <summary>
            Searches for a GameLiving with the given id or name in WorldMgr
            </summary>
            <param name="identifier">ID or Name of GameLiving to resolve</param>
            <returns>GameLiving</returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.ResolveLiving(System.Object,DOL.GS.GameLiving)">
            <summary>
            Searches for a GameLiving with the given id or name in WorldMgr
            </summary>
            <param name="identifier">ID or Name of GameLiving to resolve</param>
            <returns>GameLiving</returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.ResolveLiving(System.Object,DOL.GS.GameLiving,System.Boolean)">
            <summary>
            Searches for a GameLiving with the given id or name either in worldMgr or Database if lookukDB is true
            </summary>
            <param name="identifier">ID or name of GameLiving</param>
            <param name="lookupDB">Search in DB or existing GameLivings in worldMgr</param>
            <returns>GameLiving</returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.ResolveNPC(System.Object)">
            <summary>
            Searches for a NPC with the given id or name in WorldMgr
            </summary>
            <param name="identifier">ID or Name of NPC to resolve</param>
            <returns>NPC</returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.ResolveNPC(System.Object,DOL.GS.GameNPC)">
            <summary>
            Searches for a NPC with the given id or name in WorldMgr
            </summary>
            <param name="identifier">ID or Name of NPC to resolve</param>
            <returns>NPC</returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.ResolveNPC(System.Object,DOL.GS.GameNPC,System.Boolean)">
            <summary>
            Searches for a NPC with the given id or name either in worldMgr or Database if lookukDB is true
            </summary>
            <param name="identifier">ID or name of NPC</param>
            <param name="lookupDB">Search in DB or existing NPCs in worldMgr</param>
            <returns>NPC</returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.RegisterQuestType(System.Type)">
            <summary>
            Registers the QuestType. This needs to be done to be able to retireve and store his typeid.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.GetIDForQuestType(System.Type)">
            <summary>
            Returns a short id for the quest type. 
            Used for the messages send to client to identify the questtype
            </summary>
            <param name="questType"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.GetQuestTypeForID(System.UInt16)">
            <summary>
            Returns a questtype for the quest id. 
            Used for the messages send to client to identify the questtype 
            </summary>
            <param name="typeId"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.CanGiveQuest(System.Type,DOL.GS.GamePlayer)">
            <summary>
            Check if the player can do the global quest
            </summary>
            <param name="questType">The type of the quest</param>
            <param name="target">The player who search a quest</param>
            <returns>the number of time the quest can be done again</returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.CanGiveQuest(System.Type,DOL.GS.GamePlayer,DOL.GS.GameNPC)">
            <summary>
            Check if the npc can give the quest to the player
            </summary>
            <param name="questType">The type of the quest</param>
            <param name="source">The npc source</param>
            <param name="target">The player who search a quest</param>
            <returns>the number of time the quest can be done again</returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.CanGiveOneNewQuest(DOL.GS.GameNPC,DOL.GS.GamePlayer)">
            <summary>
            Check if the npc can give a quest to the player
            </summary>
            <param name="source">The source to check</param>
            <param name="target">The player to check</param>
            <returns>true if yes</returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.ProposeQuestToPlayer(System.Type,System.String,DOL.GS.GamePlayer,DOL.GS.GameNPC)">
            <summary>
            Send the quest dialogue for a classic quest to the player
            </summary>
            <param name="questType">The type of the quest</param>
            <param name="source">The npc source</param>
            <param name="target">The player to ask</param>
            <param name="sentence">The sentence to show</param>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.AbortQuestToPlayer(System.Type,System.String,DOL.GS.GamePlayer,DOL.GS.GameNPC)">
            <summary>
            Send the quest dialogue for a classic quest to the player
            </summary>
            <param name="questType">The type of the quest</param>
            <param name="source">The npc source</param>
            <param name="target">The player to ask</param>
            <param name="sentence">The sentence to show</param>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.GiveQuestToPlayer(System.Type,DOL.GS.GamePlayer)">
            <summary>
            Send the quest dialogue for a non npc quest to the player
            </summary>
            <param name="questType">The type of the quest</param>
            <param name="player">The player to give the quest</param>
            <returns>true if added</returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.GiveQuestToPlayer(System.Type,DOL.GS.GamePlayer,DOL.GS.GameNPC)">
            <summary>
            Send the quest dialogue for a classic quest to the player
            </summary>
            <param name="questType">The type of the quest</param>
            <param name="player">The player to give the quest</param>
            <param name="source">The npc who give the questw</param>
            <returns>true if added</returns>
        </member>
        <member name="M:DOL.GS.Quests.QuestMgr.GiveQuestToPlayer(System.Type,System.Byte,DOL.GS.GamePlayer,DOL.GS.GameNPC)">
            <summary>
            Send the quest dialogue for a classic quest to the player
            </summary>
            <param name="questType">The type of the quest</param>
            <param name="startingStep">The staring step of the quest</param>
            <param name="player">The player to give the quest</param>
            <param name="source">The npc who give the questw</param>
            <returns>true if added</returns>
        </member>
        <member name="T:DOL.GS.Quests.KillTask">
            <summary>
            Declares a Kill Task	
            Kill Mob A
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.KillTask.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new task
            </summary>
            <param name="taskPlayer">The player doing this task</param>
        </member>
        <member name="M:DOL.GS.Quests.KillTask.#ctor(DOL.GS.GamePlayer,DOL.Database.DBTask)">
            <summary>
            Constructs a new task from a database Object
            </summary>
            <param name="taskPlayer">The player doing the task</param>
            <param name="dbTask">The database object</param>
        </member>
        <member name="M:DOL.GS.Quests.KillTask.FinishTask">
            <summary>
            Called to finish the task.
            Should be overridden and some rewards given etc.
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.KillTask.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            This method needs to be implemented in each task.
            It is the core of the task. The global event hook of the GamePlayer.
            This method will be called whenever a GamePlayer with this task
            fires ANY event!
            </summary>
            <param name="e">The event type</param>
            <param name="sender">The sender of the event</param>
            <param name="args">The event arguments</param>
        </member>
        <member name="M:DOL.GS.Quests.KillTask.BuildTask(DOL.GS.GamePlayer,DOL.GS.GameLiving)">
            <summary>
            Search for a Mob to Kill and Give the KillTask to the Player
            </summary>
            <param name="player">The GamePlayer Object</param>
        </member>
        <member name="M:DOL.GS.Quests.KillTask.GetRandomMob(DOL.GS.GamePlayer)">
            <summary>
            Find a Random Mob in Radius Distance
            </summary>
            <param name="Player">The GamePlayer Object</param>		
            <returns>The GameMob Searched</returns>
        </member>
        <member name="M:DOL.GS.Quests.KillTask.CheckNamedGuard(DOL.GS.GameLiving)">
            <summary>
            Idientifies Named Guards
            At the moment this is done by simple name comparison against some known name patterns:
            
            +*Guard*
            	-Guardian
            	-Guardian Sergeant
            	-*Guardian
            	-Guardian of the*
            	-Guard
            	-*Guard
            	-Guardsman
            	-*Guardsman
            	-Guard's Armorer
            +Sir *
            +Jarl *
            +Lady *
            +Soldier *
            +Soldat *
            +Sentinel *
            	-*Runes
            	-*Kynon 
            
            +*Viking*
            	-*Archer
            	-*Dreng
            	-*Huscarl
            	-*Jarl
            	
            +Huntress *
            	
            </summary>
            <param name="living"></param>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Quests.KillTask.Name">
            <summary>
            Retrieves the name of the task
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.KillTask.Description">
            <summary>
            Retrieves the description 
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.KillTask.MobName">
            <summary>
            Item related to task stored in dbTask
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.KillTask.ItemIndex">
            <summary>
            Item index
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.SkillLevelCalculator">
            <summary>
            The Skill Level calculator
            
            BuffBonusCategory1 is used for buffs, uncapped
            BuffBonusCategory2 unused
            BuffBonusCategory3 unused
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.PlayerTitles.ClearTitle">
            <summary>
            Special "empty" player title, always first in the list.
            </summary>
        </member>
        <member name="T:DOL.GS.PlayerTitles.SimplePlayerTitle">
            <summary>
            Base abstract class for simple player titles.
            </summary>
        </member>
        <member name="M:DOL.GS.PlayerTitles.SimplePlayerTitle.GetDescription(DOL.GS.GamePlayer)">
            <summary>
            The title description, shown in "Titles" window.
            </summary>
            <param name="player">The title owner.</param>
            <returns>The title description.</returns>
        </member>
        <member name="M:DOL.GS.PlayerTitles.SimplePlayerTitle.GetValue(DOL.GS.GamePlayer)">
            <summary>
            The title value, shown over player's head.
            </summary>
            <param name="player">The title owner.</param>
            <returns>The title value.</returns>
        </member>
        <member name="M:DOL.GS.PlayerTitles.SimplePlayerTitle.IsForced(DOL.GS.GamePlayer)">
            <summary>
            Checks whether this title can be changed by the player.
            </summary>
            <param name="player">The title owner.</param>
            <returns>True if player can not change the title.</returns>
        </member>
        <member name="M:DOL.GS.PlayerTitles.SimplePlayerTitle.IsSuitable(DOL.GS.GamePlayer)">
            <summary>
            Verify whether the player is suitable for this title.
            </summary>
            <param name="player">The player to check.</param>
            <returns>true if the player is suitable for this title.</returns>
        </member>
        <member name="M:DOL.GS.PlayerTitles.SimplePlayerTitle.OnTitleGained(DOL.GS.GamePlayer)">
            <summary>
            Callback for when player gains this title.
            </summary>
            <param name="player">The player that gained a title.</param>
        </member>
        <member name="M:DOL.GS.PlayerTitles.SimplePlayerTitle.OnTitleLost(DOL.GS.GamePlayer)">
            <summary>
            Callback for when player loose this title.
            </summary>
            <param name="player">The player that lost a title.</param>
        </member>
        <member name="M:DOL.GS.PlayerTitles.ClearTitle.GetDescription(DOL.GS.GamePlayer)">
            <summary>
            The title description, shown in "Titles" window.
            </summary>
            <param name="player">The title owner.</param>
            <returns>The title description.</returns>
        </member>
        <member name="M:DOL.GS.PlayerTitles.ClearTitle.GetValue(DOL.GS.GamePlayer)">
            <summary>
            The title value, shown over player's head.
            </summary>
            <param name="player">The title owner.</param>
            <returns>The title value.</returns>
        </member>
        <member name="M:DOL.GS.PlayerTitles.ClearTitle.IsSuitable(DOL.GS.GamePlayer)">
            <summary>
            Verify whether the player is suitable for this title.
            </summary>
            <param name="player">The player to check.</param>
            <returns>true if the player is suitable for this title.</returns>
        </member>
        <member name="T:DOL.GS.Scripts.ClassSavage">
             <summary>
            
             </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassReaver">
             <summary>
            
             </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassReaver.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.RegionTimerCallback">
            <summary>
            This delegate is the callback function for RegionTimers
            </summary>
        </member>
        <member name="T:DOL.GS.RegionTimer">
            <summary>
            Calls delegate on every tick
            </summary>
        </member>
        <member name="F:DOL.GS.RegionTimer.m_callback">
            <summary>
            The timer callback
            </summary>
        </member>
        <member name="F:DOL.GS.RegionTimer.m_properties">
            <summary>
            Holds properties for this region timer
            </summary>
        </member>
        <member name="M:DOL.GS.RegionTimer.#ctor(DOL.GS.GameObject)">
            <summary>
            Constructs a new region timer
            </summary>
            <param name="timerOwner">The game object that is starting the timer</param>
        </member>
        <member name="M:DOL.GS.RegionTimer.#ctor(DOL.GS.GameObject,DOL.GS.RegionTimerCallback)">
            <summary>
            Constructs a new region timer
            </summary>
            <param name="timerOwner">The game object that is starting the timer</param>
            <param name="callback">The callback function to call</param>
        </member>
        <member name="M:DOL.GS.RegionTimer.#ctor(DOL.GS.GameObject,DOL.GS.RegionTimerCallback,System.Int32)">
            <summary>
            Constructs a new region timer and starts it with specified delay
            </summary>
            <param name="timerOwner">The game object that is starting the timer</param>
            <param name="callback">The callback function to call</param>
            <param name="delay">The interval in milliseconds when to call the callback</param>
        </member>
        <member name="M:DOL.GS.RegionTimer.#ctor(DOL.GS.GameTimer.TimeManager)">
            <summary>
            Constructs a new region timer
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:DOL.GS.RegionTimer.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="M:DOL.GS.RegionTimer.ToString">
            <summary>
            Returns short information about the timer
            </summary>
            <returns>Short info about the timer</returns>
        </member>
        <member name="P:DOL.GS.RegionTimer.Callback">
            <summary>
            Gets or sets the timer callback
            </summary>
        </member>
        <member name="P:DOL.GS.RegionTimer.Properties">
            <summary>
            Gets the properties of this timer
            </summary>
        </member>
        <member name="T:DOL.GS.GSPacketIn">
            <summary>
            Game server specific packet
            </summary>
        </member>
        <member name="F:DOL.GS.GSPacketIn.HDR_SIZE">
            <summary>
            Header size including checksum at the end of the packet
            </summary>
        </member>
        <member name="F:DOL.GS.GSPacketIn.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GSPacketIn.m_sessionID">
            <summary>
            Session ID
            </summary>
        </member>
        <member name="F:DOL.GS.GSPacketIn.m_psize">
            <summary>
            Packet size
            </summary>
        </member>
        <member name="F:DOL.GS.GSPacketIn.m_sequence">
            <summary>
            Packet sequence (ordering)
            </summary>
        </member>
        <member name="F:DOL.GS.GSPacketIn.m_id">
            <summary>
            Packet ID
            </summary>
        </member>
        <member name="F:DOL.GS.GSPacketIn.m_parameter">
            <summary>
            Packet parameter
            </summary>
        </member>
        <member name="M:DOL.GS.GSPacketIn.#ctor(DOL.PacketIn)">
            <summary>
            Constructor
            </summary>
            <param name="pak">Base packet to wrap</param>
        </member>
        <member name="M:DOL.GS.GSPacketIn.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="size">Size of the internal buffer</param>
        </member>
        <member name="M:DOL.GS.GSPacketIn.LogDump">
            <summary>
            Dumps the packet data into the log
            </summary>
        </member>
        <member name="M:DOL.GS.GSPacketIn.Load(System.Byte[],System.Int32)">
            <summary>
            Loads the specified count of bytes from another buffer
            </summary>
            <param name="buf">The buffer to load the data from</param>
            <param name="count">The count of packet bytes</param>
        </member>
        <member name="M:DOL.GS.GSPacketIn.ToString">
            <summary>
            Info about the packet
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.GSPacketIn.SessionID">
            <summary>
            Gets the session id
            </summary>
        </member>
        <member name="P:DOL.GS.GSPacketIn.PacketSize">
            <summary>
            Gets the packet size
            </summary>
        </member>
        <member name="P:DOL.GS.GSPacketIn.DataSize">
            <summary>
            Gets the size of the data portion of the packet
            </summary>
        </member>
        <member name="P:DOL.GS.GSPacketIn.Sequence">
            <summary>
            Gets the sequence of the packet
            </summary>
        </member>
        <member name="P:DOL.GS.GSPacketIn.ID">
            <summary>
            Gets the packet ID
            </summary>
        </member>
        <member name="P:DOL.GS.GSPacketIn.Parameter">
            <summary>
            Gets the packet parameter
            </summary>
        </member>
        <member name="T:DOL.GS.FactionMgr">
            <summary>
            FactionMgr manage all the faction system
            </summary>
        </member>
        <member name="F:DOL.GS.FactionMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.FactionMgr.Init">
            <summary>
            this function load all faction from DB
            </summary>	
        </member>
        <member name="M:DOL.GS.FactionMgr.GetFactionByID(System.Int32)">
            <summary>
            get the faction with id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.FactionMgr.SaveAllAggroToFaction">
            <summary>
            save all faction aggro level of player who have change faction aggro level
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.ToughnessAbility">
            <summary>
            Toughness
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.PlayerSitRequestHandler.SitRequestHandler">
            <summary>
            Handles player sit requests
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerSitRequestHandler.SitRequestHandler.m_sit">
            <summary>
            The new sit state
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerSitRequestHandler.SitRequestHandler.#ctor(DOL.GS.GamePlayer,System.Boolean)">
            <summary>
            Constructs a new SitRequestHandler
            </summary>
            <param name="actionSource">The action source</param>
            <param name="sit">The new sit state</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.PlayerSitRequestHandler.SitRequestHandler.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerCreationRequestHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.ClientCrashPacketHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.Events.ScriptLoadedEventAttribute">
            <summary>
            This attribute can be applied to static methods to automatically
            register them with the GameServer's global script compiled event
            </summary>
        </member>
        <member name="M:DOL.Events.ScriptLoadedEventAttribute.#ctor">
            <summary>
            Constructs a new ScriptLoadedEventAttribute
            </summary>
        </member>
        <member name="T:DOL.Events.ItemEquippedArgs">
            <summary>
            Holds the arguments for the ItemEquipped event of PlayerInventory
            </summary>
        </member>
        <member name="M:DOL.Events.ItemEquippedArgs.#ctor(DOL.Database.InventoryItem,System.Int32)">
            <summary>
            Constructs a new ItemEquippedArgs
            </summary>
            <param name="item">The equipped item</param>
            <param name="previousSlotPosition">The slot position item had before it was equipped</param>
        </member>
        <member name="P:DOL.Events.ItemEquippedArgs.Item">
            <summary>
            Gets the equipped item
            </summary>
        </member>
        <member name="P:DOL.Events.ItemEquippedArgs.PreviousSlotPosition">
            <summary>
            Gets the previous slot position
            </summary>
        </member>
        <member name="T:DOL.Events.GiveItemEventArgs">
            <summary>
            Holds the arguments for the GiveItem event of GamePlayer
            </summary>
        </member>
        <member name="M:DOL.Events.GiveItemEventArgs.#ctor(DOL.GS.GamePlayer,DOL.GS.GameObject,DOL.Database.InventoryItem)">
            <summary>
            Constructs a new SayReceiveEventArgs
            </summary>
            <param name="source">the source that is saying something</param>
            <param name="target">the target that listened to the say</param>
            <param name="item">the item being given</param>
        </member>
        <member name="P:DOL.Events.GiveItemEventArgs.Source">
            <summary>
            Gets the GamePlayer source who was saying something
            </summary>
        </member>
        <member name="P:DOL.Events.GiveItemEventArgs.Target">
            <summary>
            Gets the GameLiving target who listened to the say
            </summary>
        </member>
        <member name="P:DOL.Events.GiveItemEventArgs.Item">
            <summary>
            Gets the item being moved
            </summary>
        </member>
        <member name="T:DOL.Events.GameTrainerEvent">
            <summary>
            This class holds all possible trainer events.
            Only constants defined here!
            </summary>
        </member>
        <member name="M:DOL.Events.GameTrainerEvent.#ctor(System.String)">
            <summary>
            Constructs a new GameTrainer event
            </summary>
            <param name="name">the event name</param>
        </member>
        <member name="M:DOL.Events.GameTrainerEvent.IsValidFor(System.Object)">
            <summary>
            Tests if this event is valid for the specified object
            </summary>
            <param name="o">The object for which the event wants to be registered</param>
            <returns>true if valid, false if not</returns>
        </member>
        <member name="F:DOL.Events.GameTrainerEvent.PlayerPromoted">
            <summary>
            The PlayerPromoted event is fired whenever trainer
            promotes the player to a new class
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.TripleWieldEffect">
            <summary>
            TripleWield
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.TripleWieldEffect.EventHandler(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Handler fired on every melee attack by effect target
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="T:DOL.GS.Effects.StealthEffect">
            <summary>
            The helper class for the stealth ability
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.StealthEffect.m_player">
            <summary>
            The owner of the effect
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.StealthEffect.m_id">
            <summary>
            The internal unique effect ID
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StealthEffect.#ctor">
            <summary>
            Creates a new stealth effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StealthEffect.Start(DOL.GS.GamePlayer)">
            <summary>
            Start the stealth on player
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StealthEffect.Stop">
            <summary>
            Stop the effect on target
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StealthEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect must be canceled
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StealthEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StealthEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StealthEffect.Icon">
            <summary>
            Icon to show on players, can be id
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StealthEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StealthEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.CamouflageEffect">
            <summary>
            Camouflage
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.CamouflageEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.WoodWorking">
            <summary>
            The wood crafting skill
            </summary>
        </member>
        <member name="M:DOL.GS.WoodWorking.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.WoodWorking.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.WoodWorking.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="T:DOL.GS.Salvage">
            <summary>
            The class holding all salvage functions
            </summary>
        </member>
        <member name="F:DOL.GS.Salvage.PLAYER_CRAFTER">
            <summary>
            The player currently crafting
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:DOL.GS.Salvage.ITEM_CRAFTER" -->
        <!-- Badly formed XML comment ignored for member "F:DOL.GS.Salvage.MATERIAL_CRAFTER" -->
        <!-- Badly formed XML comment ignored for member "F:DOL.GS.Salvage.MATERIAL_COUNT_CRAFTER" -->
        <member name="F:DOL.GS.Salvage.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.Salvage.BeginWork(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Called when player try to use a secondary crafting skill
            </summary>
            <param name="item"></param>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Salvage.Proceed(DOL.GS.RegionTimer)">
            <summary>
            Called when craft time is finished 
            </summary>
            <param name="timer"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Salvage.IsAllowedToBeginWork(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Check if the player own can enchant the item
            </summary>
            <param name="player"></param>
            <param name="item"></param>
            <param name="percentNeeded">min 50 max 100</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Salvage.CalculateMaterialCount(DOL.GS.GamePlayer,DOL.Database.InventoryItem,DOL.Database.DBSalvage)">
            <summary>
            Calculate the chance of sucess
            </summary>
        </member>
        <member name="T:DOL.GS.Jewellery">
            <summary>
            Jewellery is the crafting skill to make jewel,stone,sigil and rune 
            </summary>
        </member>
        <member name="M:DOL.GS.Jewellery.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.Jewellery.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.Jewellery.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="T:DOL.GS.Trainer.WarlockTrainer">
            <summary>
            Warlock Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.WarlockTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.WarlockTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.WarlockTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.MidgardRogueTrainer">
            <summary>
            Midgard Rogue Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.MidgardRogueTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.MidgardRogueTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.MercenaryTrainer">
            <summary>
            Mercenary Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.MercenaryTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.MercenaryTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.MercenaryTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.ElementalistTrainer">
            <summary>
            Elementalist Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.ElementalistTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ElementalistTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Styles.Style">
            <summary>
            Holds all information needed for a Style in game.
            Mainly this class contains the DBStyle class but
            it converts some int values into the appropriate enums
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.baseStyle">
            <summary>
            The database style object, used to retrieve information for this object
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.m_Procs">
            <summary>
            (readonly) The list of procs available for this style
            </summary>
        </member>
        <member name="M:DOL.GS.Styles.Style.#ctor(DOL.Database.DBStyle)">
            <summary>
            Constructs a new Style object based on a database Style object
            </summary>
            <param name="style">The database style object this object is based on</param>
        </member>
        <member name="M:DOL.GS.Styles.Style.GetRequiredWeaponName">
            <summary>
            Gets name of required weapon type
            </summary>
            <returns>name of required weapon type</returns>
        </member>
        <member name="P:DOL.GS.Styles.Style.Procs">
            <summary>
            (readonly)(procs) The list of procs available for this style
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.Spec">
            <summary>
            (readonly) The Specialization's name required to execute this style
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.SpecLevelRequirement">
            <summary>
            (readonly) The Specialization's level required to execute this style
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.Icon">
            <summary>
            (readonly) The icon of this style
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.EnduranceCost">
            <summary>
            (readonly) The fatique cost of this style in % of player's total fatique
            This cost will be modified by weapon speed, realm abilities and magic effects
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.StealthRequirement">
            <summary>
            (readonly) Stealth requirement of this style
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.OpeningRequirementType">
            <summary>
            (readonly) The opening type of this style
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.OpeningRequirementValue">
            <summary>
            (readonly) Depending on the OpeningRequirementType.
            If the style is a offensive opened style, this 
            holds the style id the attacker is required to
            execute before this style. 
            If the style is a defensive opened style, this
            holds the style id the defender is required to
            execute before the attacker can use this style.
            (values other than 0 require a nonspecific style)
            If the style is a position opened style, this
            holds the position requirement.
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.AttackResultRequirement">
            <summary>
            (readonly) The attack result required from 
            attacker(offensive style) or defender(defensive style)
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.WeaponTypeRequirement">
            <summary>
            (readonly) The type of weapon required to execute this style.
            If not one of SpecialWeaponType then eObjectType is used.
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.GrowthRate">
            <summary>
            (readonly) The growth rate of the style
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.BonusToHit">
            <summary>
            (readonly) The bonus to hit if this style get's executed successfully
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.BonusToDefense">
            <summary>
            (readonly) The bonus to defense if this style get's executed successfully
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.SkillType">
            <summary>
            (readonly) The type of this skill, always returns eSkillPage.Styles
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.TwoHandAnimation">
            <summary>
            (readonly) The animation ID for 2h weapon styles
            </summary>
        </member>
        <member name="P:DOL.GS.Styles.Style.RandomProc">
            <summary>
            (readonly) (procs) Tell if the proc should be select randomly
            </summary>
        </member>
        <member name="T:DOL.GS.Styles.Style.eOpening">
            <summary>
            The opening type of a style
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.eOpening.Offensive">
            <summary>
            Offensive opening, depending on the attacker's actions
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.eOpening.Defensive">
            <summary>
            Defensive opening, depending on the enemy's action
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.eOpening.Positional">
            <summary>
            Positional opening, depending on the attacker to target position
            </summary>
        </member>
        <member name="T:DOL.GS.Styles.Style.eOpeningPosition">
            <summary>
            The opening positions if the style is a position based style
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.eOpeningPosition.Back">
            <summary>
            Towards back of the target
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.eOpeningPosition.Side">
            <summary>
            Towards the side of the target
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.eOpeningPosition.Front">
            <summary>
            Towards the front of the target
            </summary>
        </member>
        <member name="T:DOL.GS.Styles.Style.eAttackResult">
            <summary>
            The required attack result of the style 
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.eAttackResult.Any">
            <summary>
            Any attack result is fine
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.eAttackResult.Miss">
            <summary>
            A miss is required
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.eAttackResult.Hit">
            <summary>
            A hit is required
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.eAttackResult.Parry">
            <summary>
            A parry is required
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.eAttackResult.Block">
            <summary>
            A block is required
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.eAttackResult.Evade">
            <summary>
            An evade is required
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.eAttackResult.Fumble">
            <summary>
            A fumble is required
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.eAttackResult.Style">
            <summary>
            A style is required
            </summary>
        </member>
        <member name="T:DOL.GS.Styles.Style.SpecialWeaponType">
            <summary>
            Special weapon type requirements
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.SpecialWeaponType.DualWield">
            <summary>
            Both hands should be holding weapons to use style.
            Shield is not a weapon in this case.
            </summary>
        </member>
        <member name="F:DOL.GS.Styles.Style.SpecialWeaponType.AnyWeapon">
            <summary>
            Stlye can be used with 1h, 2h, dw.
            Used for Critical Strike line.
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.SpeedDecreaseSpellHandler">
            <summary>
            Spell handler for speed decreasing spells
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SpeedDecreaseSpellHandler.OnEffectStart(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            When an applied effect starts
            duration spells only
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.SpeedDecreaseSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.SpeedDecreaseSpellHandler.OnAttacked(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Handles attack on buff owner
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="T:DOL.GS.Spells.SavageThrustResistHandler">
            <summary>
            Summary description for SavageHasteHandler.
            </summary>
        </member>
        <member name="T:DOL.GS.SkillHandler.GuardAbilityHandler">
            <summary>
            Handler for Guard ability clicks
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.GuardAbilityHandler.GUARD_DISTANCE">
            <summary>
            The guard distance
            </summary>
        </member>
        <member name="F:DOL.GS.SkillHandler.GuardAbilityHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.ServerRules.NormalServerRules">
            <summary>
            Set of rules for "normal" server type.
            </summary>
        </member>
        <member name="M:DOL.GS.ServerRules.NormalServerRules.OnNPCKilled(DOL.GS.GameNPC,DOL.GS.GameObject)">
            <summary>
            Invoked on NPC death and deals out
            experience/realm points if needed
            </summary>
            <param name="killedNPC">npc that died</param>
            <param name="killer">killer</param>
        </member>
        <member name="M:DOL.GS.ServerRules.NormalServerRules.IsAllowedToBind(DOL.GS.GamePlayer,DOL.Database.BindPoint)">
            <summary>
            Is player allowed to bind
            </summary>
            <param name="player"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.NormalServerRules.IsAllowedToCraft(DOL.GS.GamePlayer,DOL.Database.ItemTemplate)">
            <summary>
            Is player allowed to make the item
            </summary>
            <param name="player"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.NormalServerRules.CheckAbilityToUseItem(DOL.GS.GameLiving,DOL.Database.ItemTemplate)">
            <summary>
            Check a living has the ability to use an item
            </summary>
            <param name="living"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.ServerRules.NormalServerRules.GetCompatibleObjectTypes(DOL.GS.eObjectType)">
            <summary>
            Translates object type to compatible object types based on server type
            </summary>
            <param name="objectType">The object type</param>
            <returns>An array of compatible object types</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.NormalServerRules.GetPlayerName(DOL.GS.GamePlayer,DOL.GS.GamePlayer)">
            <summary>
            Gets the player name based on server type
            </summary>
            <param name="source">The "looking" player</param>
            <param name="target">The considered player</param>
            <returns>The name of the target</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.NormalServerRules.GetPlayerLastName(DOL.GS.GamePlayer,DOL.GS.GamePlayer)">
            <summary>
            Gets the player last name based on server type
            </summary>
            <param name="source">The "looking" player</param>
            <param name="target">The considered player</param>
            <returns>The last name of the target</returns>
        </member>
        <member name="M:DOL.GS.ServerRules.NormalServerRules.GetPlayerGuildName(DOL.GS.GamePlayer,DOL.GS.GamePlayer)">
            <summary>
            Gets the player guild name based on server type
            </summary>
            <param name="source">The "looking" player</param>
            <param name="target">The considered player</param>
            <returns>The guild name of the target</returns>
        </member>
        <member name="T:DOL.GS.RealmAbilities.MasteryOfPain">
            <summary>
            Mastery of Pain ability
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.MasteryOfParrying">
            <summary>
            Mastery of Parry ability
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.MasteryOfBlocking">
            <summary>
            Mastery of Parry ability
            </summary>
        </member>
        <member name="T:DOL.GS.Quests.MoneyTask">
            <summary>
            Declares a Money task.
            Bring Item A to NPC B
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.MoneyTask.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new Task
            </summary>
            <param name="taskPlayer">The player doing this task</param>
        </member>
        <member name="M:DOL.GS.Quests.MoneyTask.#ctor(DOL.GS.GamePlayer,DOL.Database.DBTask)">
            <summary>
            Constructs a new Task from a database Object
            </summary>
            <param name="taskPlayer">The player doing the task</param>
            <param name="dbTask">The database object</param>
        </member>
        <member name="M:DOL.GS.Quests.MoneyTask.FinishTask">
            <summary>
            Called to finish the task.
            Should be overridden and some rewards given etc.
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.MoneyTask.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            This method needs to be implemented in each task.
            It is the core of the task. The global event hook of the GamePlayer.
            This method will be called whenever a GamePlayer with this task
            fires ANY event!
            </summary>
            <param name="e">The event type</param>
            <param name="sender">The sender of the event</param>
            <param name="args">The event arguments</param>
        </member>
        <member name="M:DOL.GS.Quests.MoneyTask.GenerateNPCItem(System.String,System.Int32)">
            <summary>
            Generate an Item random Named for NPC Drop
            </summary>
            <param name="Name">Base Nameof the NPC</param>
            <param name="Level">Level of Generated Item</param>
            <returns>A Generated NPC Item</returns>
        </member>
        <member name="M:DOL.GS.Quests.MoneyTask.BuildTask(DOL.GS.GamePlayer,DOL.GS.GameLiving)">
            <summary>
            Create an Item, Search for a NPC to consign the Item and give Item to the Player
            </summary>
            <param name="player">The GamePlayer Object</param>
        </member>
        <member name="M:DOL.GS.Quests.MoneyTask.GetRandomNPC(DOL.GS.GamePlayer)">
            <summary>
            Find a Random NPC
            </summary>
            <param name="Player">The GamePlayer Object</param>		
            <returns>The GameNPC Searched</returns>
        </member>
        <member name="P:DOL.GS.Quests.MoneyTask.Name">
            <summary>
            Retrieves the name of the task
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.MoneyTask.Description">
            <summary>
            Retrieves the description
            </summary>
        </member>
        <member name="P:DOL.GS.Quests.MoneyTask.RecieverZone">
            <summary>
            Zone related to task stored in dbTask
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.StunDurationPercentCalculator">
            <summary>
            The melee damage bonus percent calculator
            
            BuffBonusCategory1 is used for buffs
            BuffBonusCategory2 unused
            BuffBonusCategory3 is used for debuff
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.BlockChanceCalculator">
            <summary>
            The block chance calculator. Returns 0 .. 1000 chance.
            
            BuffBonusCategory1 unused
            BuffBonusCategory2 unused
            BuffBonusCategory3 unused
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 unused
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassShaman">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassShaman.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassHunter">
             <summary>
            
             </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DOL.GS.Scripts.ClassHunter.OnSkillTrained(DOL.GS.GamePlayer,DOL.GS.Specialization)" -->
        <member name="T:DOL.GS.ISpecActionHandler">
            <summary>
            callback handler for a spec that is activated by clicking on an associated icon
            </summary>
        </member>
        <member name="T:DOL.GS.PlayerTradeWindow">
            <summary>
            TradeWindow is the object for tradewindow from the side of one trader 
            with all his money and items but nothing of other trader
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTradeWindow.MAX_ITEMS">
            <summary>
            The max amount of items that can be added to tradewindow
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTradeWindow.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTradeWindow.m_tradeItems">
            <summary>
            Holds a list of tradeitems we offer to the other player
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTradeWindow.m_tradeMoney">
            <summary>
            Holds money we offer to the other player
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTradeWindow.m_tradeAccept">
            <summary>
            Holds if we have accepted the trade or not
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTradeWindow.m_owner">
            <summary>
            Holds the owner of this window and items in it
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTradeWindow.m_partnerWindow">
            <summary>
            Holds our trade partner
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTradeWindow.m_repair">
            <summary>
            Holds the flag for repair
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTradeWindow.m_combine">
            <summary>
            Holds the flag for combine (spellcraft)
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTradeWindow.m_recipiant">
            <summary>
            Holds the flag to know the it's a recipiant window
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTradeWindow.m_sync">
            <summary>
            Holds the trade windows sync object
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTradeWindow.m_changesCount">
            <summary>
            Stores the begin changes count
            </summary>
        </member>
        <member name="M:DOL.GS.PlayerTradeWindow.AddItemToTrade(DOL.Database.InventoryItem)">
            <summary>
            Adds an item to the tradewindow
            </summary>
            <param name="itemForTrade">InventoryItem to add</param>
            <returns>true if added</returns>
        </member>
        <member name="M:DOL.GS.PlayerTradeWindow.AddMoneyToTrade(System.Int64)">
            <summary>
            Adds money to the tradewindow
            </summary>
            <param name="money">Array of money values to add</param>
        </member>
        <member name="M:DOL.GS.PlayerTradeWindow.RemoveItemToTrade(DOL.Database.InventoryItem)">
            <summary>
            Removes an item from the tradewindow
            </summary>
            <param name="itemToRemove"></param>
        </member>
        <member name="M:DOL.GS.PlayerTradeWindow.TradeUpdate">
            <summary>
            Updates the trade window
            </summary>
        </member>
        <member name="M:DOL.GS.PlayerTradeWindow.AcceptTrade">
            <summary>
            Called each time a player push the accept button to accept the trade
            </summary>
        </member>
        <member name="M:DOL.GS.PlayerTradeWindow.CloseTrade">
            <summary>
            Closes the tradewindow
            </summary>
        </member>
        <member name="P:DOL.GS.PlayerTradeWindow.TradeItems">
            <summary>
            Returns the array of items we offer for trade
            </summary>
        </member>
        <member name="P:DOL.GS.PlayerTradeWindow.PartnerTradeItems">
            <summary>
            Returns the array of items the partner offer for trade
            </summary>
        </member>
        <member name="P:DOL.GS.PlayerTradeWindow.TradeMoney">
            <summary>
            Returns the money we offer for trade
            </summary>
        </member>
        <member name="P:DOL.GS.PlayerTradeWindow.PartnerTradeMoney">
            <summary>
            Returns the money the partner offer for trade
            </summary>
        </member>
        <member name="P:DOL.GS.PlayerTradeWindow.Owner">
            <summary>
            Gets the owner of this window and items in it
            </summary>
        </member>
        <member name="P:DOL.GS.PlayerTradeWindow.Partner">
            <summary>
            Gets the owner of this window and items in it
            </summary>
        </member>
        <member name="P:DOL.GS.PlayerTradeWindow.PartnerWindow">
            <summary>
            Gets the partner window of this window and items in it
            </summary>
        </member>
        <member name="P:DOL.GS.PlayerTradeWindow.Sync">
            <summary>
            Gets the access sync object for this and TradePartner windows
            </summary>
        </member>
        <member name="P:DOL.GS.PlayerTradeWindow.ItemsCount">
            <summary>
            Gets the item count in trade window
            </summary>
        </member>
        <member name="P:DOL.GS.PlayerTradeWindow.PartnerItemsCount">
            <summary>
            Gets the item count in partner trade window
            </summary>
        </member>
        <member name="P:DOL.GS.PlayerTradeWindow.Repairing">
            <summary>
            Gets or sets the repair flag is switched
            </summary>
        </member>
        <member name="P:DOL.GS.PlayerTradeWindow.Combine">
            <summary>
            Gets or sets the combine flag is switched
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ICommandHandler">
            <summary>
            Interface for classes that will handle commands
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ICommandHandler.OnCommand(DOL.GS.GameClient,System.String[])">
            <summary>
            Called when a command needs to be executed
            </summary>
            <param name="client">Client executing the command</param>
            <param name="args">Extra arguments for the command</param>
            <returns>Non-zero if succeeded</returns>
        </member>
        <member name="T:DOL.GS.GamePlayerInventory">
            <summary>
            This class represents a full player inventory
            and contains functions that can be used to
            add and remove items from the player
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayerInventory.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayerInventory.m_player">
            <summary>
            Holds the player that owns
            this inventory
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayerInventory.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new empty inventory for player
            </summary>
            <param name="player">GamePlayer to create the inventory for</param>
        </member>
        <member name="M:DOL.GS.GamePlayerInventory.LoadFromDatabase(System.String)">
            <summary>
            Loads the inventory from the DataBase
            </summary>
            <param name="inventoryID">The inventory ID</param>
            <returns>success</returns>
        </member>
        <member name="M:DOL.GS.GamePlayerInventory.SaveIntoDatabase(System.String)">
            <summary>
            Saves all dirty items to database
            </summary>
            <param name="inventoryID">The inventory ID</param>
            <returns>success</returns>
        </member>
        <member name="M:DOL.GS.GamePlayerInventory.AddItem(DOL.GS.eInventorySlot,DOL.Database.InventoryItem)">
            <summary>
            Adds an item to the inventory and DB
            </summary>
            <param name="slot"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayerInventory.RemoveItem(DOL.Database.InventoryItem)">
            <summary>
            Removes an item from the inventory and DB
            </summary>
            <param name="item">the item to remove</param>
            <returns>true if successfull</returns>
        </member>
        <member name="M:DOL.GS.GamePlayerInventory.AddCountToStack(DOL.Database.InventoryItem,System.Int32)">
            <summary>
            Adds count of items to the inventory item
            </summary>
            <param name="item"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayerInventory.RemoveCountFromStack(DOL.Database.InventoryItem,System.Int32)">
            <summary>
            Removes one item from the inventory item
            </summary>
            <param name="item">the item to remove</param>
            <param name="count">the count of items to be removed from the stack</param>
            <returns>true one item removed</returns>
        </member>
        <member name="M:DOL.GS.GamePlayerInventory.GetValidInventorySlot(DOL.GS.eInventorySlot)">
            <summary>
            Check if the slot is valid in this inventory
            </summary>
            <param name="slot">SlotPosition to check</param>
            <returns>the slot if it's valid or eInventorySlot.Invalid if not</returns>
        </member>
        <member name="M:DOL.GS.GamePlayerInventory.MoveItem(DOL.GS.eInventorySlot,DOL.GS.eInventorySlot,System.Int32)">
            <summary>
            Moves an item from one slot to another
            </summary>
            <param name="fromSlot">First SlotPosition</param>
            <param name="toSlot">Second SlotPosition</param>
            <param name="itemCount">How many items to move</param>
            <returns>true if items switched successfully</returns>
        </member>
        <member name="M:DOL.GS.GamePlayerInventory.CombineItems(DOL.Database.InventoryItem,DOL.Database.InventoryItem)">
            <summary>
            Combine 2 items together if possible
            </summary>
            <param name="fromItem">First Item</param>
            <param name="toItem">Second Item</param>
            <returns>true if items combined successfully</returns>
        </member>
        <member name="M:DOL.GS.GamePlayerInventory.StackItems(System.Int32,System.Int32,System.Int32)">
            <summary>
            Stack an item with another one
            </summary>
            <param name="fromSlot">First SlotPosition</param>
            <param name="toSlot">Second SlotPosition</param>
            <param name="itemCount">How many items to move</param>
            <returns>true if items stacked successfully</returns>
        </member>
        <member name="M:DOL.GS.GamePlayerInventory.ExchangeItems(System.Int32,System.Int32)">
            <summary>
            Exchange one item position with another one
            </summary>
            <param name="fromSlot">First SlotPosition</param>
            <param name="toSlot">Second SlotPosition</param>
            <returns>true if items exchanged successfully</returns>
        </member>
        <member name="M:DOL.GS.GamePlayerInventory.IsEquippedSlot(DOL.GS.eInventorySlot)">
            <summary>
            Checks if slot is equipped on player
            </summary>
            <param name="slot">The slot to check</param>
            <returns>true if slot is one of equipment slots and should add magical bonuses</returns>
        </member>
        <member name="M:DOL.GS.GamePlayerInventory.UpdateChangedSlots">
            <summary>
            Updates changed slots, inventory is already locked.
            Inventory must be locked before invoking this method.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayerInventory.Player">
            <summary>
            Returns the GamePlayer that owns this inventory
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayerInventory.InventoryWeight">
            <summary>
            Gets the inventory weight
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.MysticCrystalLoreAbility">
            <summary>
            Mystic Crystal Lore, power heal
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.MysticCrystalLoreAbility.Execute(DOL.GS.GameLiving)">
            <summary>
            Action
            </summary>
            <param name="living"></param>
        </member>
        <member name="T:DOL.GS.RealmAbilities.RagingPowerAbility">
            <summary>
            Raging power, power heal
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.RagingPowerAbility.Execute(DOL.GS.GameLiving)">
            <summary>
            Action
            </summary>
            <param name="living"></param>
        </member>
        <member name="T:DOL.GS.Effects.TheEmptyMindEffect">
            <summary>
            The helper class for the SavageCrush ability
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.TheEmptyMindEffect.delveString">
            <summary>
            The ability description
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.TheEmptyMindEffect.m_player">
            <summary>
            The owner of the effect
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.TheEmptyMindEffect.m_expireTimer">
            <summary>
            The timer that will cancel the effect
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.TheEmptyMindEffect.m_ability">
            <summary>
            The used ability
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.TheEmptyMindEffect.#ctor">
            <summary>
            Creates a new SavageCrush effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.TheEmptyMindEffect.Start(DOL.GS.GamePlayer,DOL.GS.Ability)">
            <summary>
            Start the SavageCrush on a player
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.TheEmptyMindEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect must be canceled
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.TheEmptyMindEffect.StartTimers">
            <summary>
            Starts the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.TheEmptyMindEffect.StopTimers">
            <summary>
            Stops the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.TheEmptyMindEffect.ExpiredCallback(DOL.GS.RegionTimer)">
            <summary>
            The callback method when the effect expires
            </summary>
            <param name="callingTimer">the regiontimer of the effect</param>
            <returns>the new intervall (0) </returns>
        </member>
        <member name="F:DOL.GS.Effects.TheEmptyMindEffect.m_id">
            <summary>
            Stores the internal effect ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.TheEmptyMindEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.TheEmptyMindEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.TheEmptyMindEffect.Icon">
            <summary>
            Icon to show on players, can be id
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.TheEmptyMindEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.TheEmptyMindEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.ChargeEffect.RemainingTime">
            <summary>
            Remaining time of the effect in milliseconds
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.UseSlotHandler">
            <summary>
            Handles spell cast requests from client
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.UseSlotHandler.UseSlotAction">
            <summary>
            Handles player use slot actions
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.UseSlotHandler.UseSlotAction.m_flagSpeedData">
            <summary>
            The speed and flags data
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.UseSlotHandler.UseSlotAction.m_slot">
            <summary>
            The slot index
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.UseSlotHandler.UseSlotAction.m_useType">
            <summary>
            The use type
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.UseSlotHandler.UseSlotAction.#ctor(DOL.GS.GamePlayer,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new UseSlotAction
            </summary>
            <param name="actionSource">The action source</param>
            <param name="flagSpeedData">The speed and flags data</param>
            <param name="slot">The slot index</param>
            <param name="useType">The use type</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.UseSlotHandler.UseSlotAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.PlayerBonusesListRequestHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.Keeps.FrontierHastener">
            <summary>
            Represents a keep hastener
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.FrontierHastener.GetExamineMessages(DOL.GS.GamePlayer)">
            <summary>
            Adds messages to ArrayList which are sent when object is targeted
            </summary>
            <param name="player">GamePlayer that is examining this object</param>
            <returns>list with string messages</returns>
        </member>
        <member name="T:DOL.Events.PlayerJoinedEventArgs">
            <summary>
            Holds the arguments for the PlayerJoined event of PlayerGroup.
            </summary>
        </member>
        <member name="M:DOL.Events.PlayerJoinedEventArgs.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs new PlayerJoinedEventArgs
            </summary>
            <param name="player">The joined player</param>
        </member>
        <member name="P:DOL.Events.PlayerJoinedEventArgs.Player">
            <summary>
            The joined player
            </summary>
        </member>
        <member name="T:DOL.Events.GiveMoneyEventArgs">
            <summary>
            Holds the arguments for the GiveMoney event of GamePlayer
            </summary>
        </member>
        <member name="M:DOL.Events.GiveMoneyEventArgs.#ctor(DOL.GS.GamePlayer,DOL.GS.GameObject,System.Int64)">
            <summary>
            Constructs a new GiveMoneyEventArgs
            </summary>
            <param name="source">the source that is saying something</param>
            <param name="target">the target that listened to the say</param>
            <param name="money">amount of money being given</param>
        </member>
        <member name="P:DOL.Events.GiveMoneyEventArgs.Source">
            <summary>
            Gets the GamePlayer source
            </summary>
        </member>
        <member name="P:DOL.Events.GiveMoneyEventArgs.Target">
            <summary>
            Gets the GameLiving target
            </summary>
        </member>
        <member name="P:DOL.Events.GiveMoneyEventArgs.Money">
            <summary>
            Gets the amount of money being moved
            </summary>
        </member>
        <member name="T:DOL.GS.Zone">
            <summary>
            This class represents one Zone in DAOC. It holds all relevant information
            that is needed to do different calculations. 
            </summary>
        </member>
        <member name="F:DOL.GS.Zone.SUBZONE_NBR">
            <summary>
            Number of SubZone in a Zone
            </summary>
        </member>
        <member name="F:DOL.GS.Zone.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Zone.m_subZoneElements">
            <summary>
            Contains the list of objects per subzone
            </summary>
        </member>
        <member name="F:DOL.GS.Zone.m_subZoneTimestamps">
            <summary>
            Should be accessed as [(subzone/4)|objectType]
            </summary>
        </member>
        <member name="F:DOL.GS.Zone.m_Region">
            <summary>
            Holds a pointer to the region that is the parent of this zone
            </summary>
        </member>
        <member name="F:DOL.GS.Zone.m_ID">
            <summary>
            The ID of the Zone eg. 15
            </summary>
        </member>
        <member name="F:DOL.GS.Zone.m_Description">
            <summary>
            The description of the Zone eg. "Camelot Hills"
            </summary>
        </member>
        <member name="F:DOL.GS.Zone.m_XOffset">
            <summary>
            The XOffset of this Zone inside the region
            </summary>
        </member>
        <member name="F:DOL.GS.Zone.m_YOffset">
            <summary>
            The YOffset of this Zone inside the region
            </summary>
        </member>
        <member name="F:DOL.GS.Zone.m_Width">
            <summary>
            The Width of the Zone in Coordinates
            </summary>
        </member>
        <member name="F:DOL.GS.Zone.m_Height">
            <summary>
            The Height of the Zone in Coordinates
            </summary>
        </member>
        <member name="F:DOL.GS.Zone.m_initialized">
            <summary>
            already initialized?
            </summary>
        </member>
        <member name="M:DOL.GS.Zone.#ctor(DOL.GS.Region,System.UInt16,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Zone object
            </summary>
            <param name="region">the parent region</param>
            <param name="id">the zone id (eg. 15)</param>
            <param name="desc">the zone description (eg. "Camelot Hills")</param>
            <param name="xoff">the X offset of this zone inside the region</param>
            <param name="yoff">the Y offset of this zone inside the region</param>
            <param name="width">the Width of this zone</param>
            <param name="height">the Height of this zone</param>
        </member>
        <member name="M:DOL.GS.Zone.GetRealmByZoneID(System.UInt16)">
            <summary>
            Gets the Zones Realm by passing the ZoneID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Zone.GetSubZoneIndex(System.Int32,System.Int32)">
            <summary>
            Returns the SubZone index using a position in the zone
            </summary>
            <param name="p_X">X position</param>
            <param name="p_Y">Y position</param>
            <returns>The SubZoneIndex</returns>
        </member>
        <member name="M:DOL.GS.Zone.GetSubZoneIndex(DOL.GS.GameObject)">
            <summary>
            Get the index of the subzone from the GameObject position
            </summary>
            <param name="p_Obj">The GameObject</param>
            <returns>The index of the subzone</returns>
        </member>
        <member name="M:DOL.GS.Zone.ObjectEnterZone(DOL.GS.GameObject)">
            <summary>
            Handle a GameObject entering a zone
            </summary>
            <param name="p_Obj">The GameObject object</param>
        </member>
        <member name="M:DOL.GS.Zone.ObjectEnterZone(DOL.GS.Zone.eGameObjectType,DOL.GS.Zone.SubNodeElement)">
            <summary>
            Handles movement of objects from zone to zone
            </summary>
            <param name="objectType"></param>
            <param name="element"></param>
        </member>
        <member name="M:DOL.GS.Zone.GetObjectsInRadius(DOL.GS.Zone.eGameObjectType,System.Int32,System.Int32,System.Int32,System.UInt16,System.Collections.ArrayList)">
            <summary>
            Gets the lists of objects, located in the current Zone and of the given type, that are at most at a 'radius' distance from (x,y,z)
            The found objects are appended to the given 'partialList'.
            </summary>
            <param name="type">the type of objects to look for</param>
            <param name="x">the x coordinate of the observation position</param>
            <param name="y">the y coordinate of the observation position</param>
            <param name="z">the z coordinate of the observation position</param>
            <param name="radius">the radius to check against</param>
            <param name="partialList">an initial (eventually empty but initialized, i.e. never null !!) list of objects</param>
            <returns>partialList augmented with the new objects verigying both type and radius in the current Zone</returns>
        </member>
        <member name="M:DOL.GS.Zone.CheckSquareDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Checks that the square distance between two arbitary points in space is lower or equal to the given square distance
            </summary>
            <param name="x1">X of Point1</param>
            <param name="y1">Y of Point1</param>
            <param name="z1">Z of Point1</param>
            <param name="x2">X of Point2</param>
            <param name="y2">Y of Point2</param>
            <param name="z2">Z of Point2</param>
            <param name="sqDistance">the square distance to check for</param>
            <returns>The distance</returns>
        </member>
        <member name="M:DOL.GS.Zone.CheckMinDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Checks that the minimal distance between a point and a subzone (defined by the four position of the sides) is lower or equal
            to the distance (given as a square distance)
            PRECONDITION : the point is not in the tested subzone
            </summary>
            <param name="x">X position of the point</param>
            <param name="y">Y position of the square</param>
            <param name="xLeft">X value of the left side of the square</param>
            <param name="xRight">X value of the right side of the square</param>
            <param name="yTop">Y value of the top side of the square</param>
            <param name="yBottom">Y value of the bottom side of the square</param>
            <param name="squareRadius">the square of the radius to check for</param>
            <returns>The distance</returns>
        </member>
        <member name="M:DOL.GS.Zone.CheckMaxDistance(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Checks that the maximal distance between a point and a subzone (defined by the four position of the sides) is lower or equal
            to the distance (given as a square distance)
            </summary>
            <param name="x">X position of the point</param>
            <param name="y">Y position of the square</param>
            <param name="xLeft">X value of the left side of the square</param>
            <param name="xRight">X value of the right side of the square</param>
            <param name="yTop">Y value of the top side of the square</param>
            <param name="yBottom">Y value of the bottom side of the square</param>
            <param name="squareRadius">the square of the radius to check for</param>
            <returns>The distance</returns>
        </member>
        <member name="M:DOL.GS.Zone.GetAreasOfSpot(DOL.GS.IPoint3D)">
            <summary>
            Convinientmethod for Region.GetAreasOfZone(),
            since zone.Region.getAreasOfZone(zone,x,y,z) is a bit confusing ...
            </summary>
            <param name="spot"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Zone.GetRandomNPC(DOL.GS.PacketHandler.eRealm)">
            <summary>
            Get a random NPC belonging to a realm
            </summary>
            <param name="realm">The realm the NPC belong to</param>
            <returns>a npc</returns>
        </member>
        <member name="M:DOL.GS.Zone.GetRandomNPC(DOL.GS.PacketHandler.eRealm,System.Int32,System.Int32)">
            <summary>
            Get a random NPC belonging to a realm between levels minlevel and maxlevel
            </summary>
            <param name="realm">The realm the NPC belong to</param>
            <param name="minLevel">The minimal level of the NPC</param>
            <param name="maxLevel">The maximal level NPC</param>
            <returns>A npc</returns>
        </member>
        <member name="M:DOL.GS.Zone.GetRandomNPC(DOL.GS.PacketHandler.eRealm[])">
            <summary>
            Get a random npc from zone with given realms
            </summary>
            <param name="realms">The realms to get the NPC from</param>
            <returns>The NPC</returns>
        </member>
        <member name="M:DOL.GS.Zone.GetRandomNPC(DOL.GS.PacketHandler.eRealm[],System.Int32,System.Int32)">
            <summary>
            Get a random npc from zone with given realms
            </summary>
            <param name="realms">The realms to get the NPC from</param>
            <param name="maxLevel">The minimal level of the NPC</param>
            <param name="minLevel">The maximum level of the NPC</param>
            <returns>The NPC</returns>
        </member>
        <member name="P:DOL.GS.Zone.ZoneRegion">
            <summary>
            Returns the region of this zone
            </summary>
        </member>
        <member name="P:DOL.GS.Zone.ID">
            <summary>
            Returns the ID of this zone
            </summary>
        </member>
        <member name="P:DOL.GS.Zone.Description">
            <summary>
            Return the description of this zone
            </summary>
        </member>
        <member name="P:DOL.GS.Zone.XOffset">
            <summary>
            Returns the XOffset of this Zone
            </summary>
        </member>
        <member name="P:DOL.GS.Zone.YOffset">
            <summary>
            Returns the YOffset of this Zone
            </summary>
        </member>
        <member name="P:DOL.GS.Zone.Width">
            <summary>
            Returns the Width of this Zone
            </summary>
        </member>
        <member name="P:DOL.GS.Zone.Height">
            <summary>
            Returns the Height of this Zone
            </summary>
        </member>
        <member name="P:DOL.GS.Zone.TotalNumberOfObjects">
            <summary>
            Returns the total number of objects held in the zone
            </summary>
        </member>
        <member name="T:DOL.GS.Zone.eGameObjectType">
            <summary>
            Object Type is Item
            </summary>
        </member>
        <member name="T:DOL.GS.Zone.SubNodeElement">
            <summary>
            This class represent a node in a doubly linked list
            </summary>
        </member>
        <member name="M:DOL.GS.Zone.SubNodeElement.PushBack(DOL.GS.Zone.SubNodeElement)">
            <summary>
            Insert a node before this one
            </summary>
            <param name="p_elem">The node to insert</param>
        </member>
        <member name="M:DOL.GS.Zone.SubNodeElement.Remove">
            <summary>
            Remove this node from the list
            </summary>
        </member>
        <member name="T:DOL.GS.Trainer.VikingTrainer">
            <summary>
            Viking Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.VikingTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.VikingTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.BonedancerTrainer">
            <summary>
            Bonedancer Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.BonedancerTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.BonedancerTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.BonedancerTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.BerserkerTrainer">
            <summary>
            Berserker Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.BerserkerTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.BerserkerTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.BerserkerTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.ReaverTrainer">
            <summary>
            Reaver Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.ReaverTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ReaverTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.ReaverTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.CabalistTrainer">
            <summary>
            Cabalist Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.CabalistTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.CabalistTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.CabalistTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Spells.StyleSpeedDecrease">
            <summary>
            Style speed decrease effect spell handler
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.StyleSpeedDecrease.CalculateEffectDuration(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates the effect duration in milliseconds
            </summary>
            <param name="target">The effect target</param>
            <param name="effectiveness">The effect effectiveness</param>
            <returns>The effect duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.StyleSpeedDecrease.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="T:DOL.GS.Spells.StrengthBuff">
            <summary>
            Str stat baseline buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DexterityBuff">
            <summary>
            Dex stat baseline buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ConstitutionBuff">
            <summary>
            Con stat baseline buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ArmorFactorBuff">
            <summary>
            Armor factor buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ArmorAbsorbtionBuff">
            <summary>
            Armor absorbtion buff
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ArmorAbsorbtionBuff.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            send updates about the changes
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:DOL.GS.Spells.FatigueConsumptionBuff">
            <summary>
            Fatigue reduction buff
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.FatigueConsumptionBuff.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            send updates about the changes
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:DOL.GS.Spells.MesmerizeDurationBuff">
            <summary>
            Mesmerize duration buff
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.MesmerizeDurationBuff.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            send updates about the changes
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:DOL.GS.Spells.AcuityBuff">
            <summary>
            Acuity buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DPSBuff">
            <summary>
            DPS buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.WeaponSkillBuff">
            <summary>
            WeaponSkill buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.StealthSkillBuff">
            <summary>
            Stealth Skill buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ToHitSkillBuff">
            <summary>
            To Hit buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.MagicResistsBuff">
            <summary>
            Magic Resists Buff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DualStatDebuff">
            <summary>
            Debuffs two stats at once, goes into specline bonus category
            </summary>	
        </member>
        <member name="T:DOL.GS.Spells.StrengthConDebuff">
            <summary>
            Str/Con stat specline debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DexterityQuiDebuff">
            <summary>
            Dex/Qui stat specline debuff
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.DamageSpeedDecrease">
            <summary>
            Damages target and decreases speed after
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.DamageSpeedDecrease.ApplyEffectOnTarget(DOL.GS.GameLiving,System.Double)">
            <summary>
            Apply effect on target or do spell action if non duration spell
            </summary>
            <param name="target">target that gets the effect</param>
            <param name="effectiveness">factor from 0..1 (0%-100%)</param>
        </member>
        <member name="M:DOL.GS.Spells.DamageSpeedDecrease.OnDirectEffect(DOL.GS.GameLiving,System.Double)">
            <summary>
            execute non duration spell effect on target
            </summary>
            <param name="target"></param>
            <param name="effectiveness"></param>
        </member>
        <member name="M:DOL.GS.Spells.DamageSpeedDecrease.StealLife(DOL.GS.AttackData)">
            <summary>
            Uses percent of damage to heal the caster
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.DamageSpeedDecrease.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.DamageSpeedDecrease.CreateSpellEffect(DOL.GS.GameLiving,System.Double)">
            <summary>
            Creates the corresponding spell effect for the spell
            </summary>
            <param name="target"></param>
            <param name="effectiveness"></param>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Spells.DamageSpeedDecrease.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.PetConversionSpellHandler">
            <summary>
            Based on HealSpellHandler.cs
            Spell calculates a percentage of the caster's health.
            Heals target for the full amount, Caster loses half that amount in health.
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.PetConversionSpellHandler.StartSpell(DOL.GS.GameLiving)">
            <summary>
            Execute pet conversion spell
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.ConcentrationList">
            <summary>
            Holds spells that use concentration points
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.ConcentrationList.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.ConcentrationList.m_owner">
            <summary>
            Holds the list owner
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.ConcentrationList.m_usedConcPoints">
            <summary>
            Stores the used concentration points
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.ConcentrationList.m_concSpellsCount">
            <summary>
            Stores the amount of concentration spells in the list
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.ConcentrationList.m_changeCounter">
            <summary>
            Stores the count of BeginChanges
            </summary>
        </member>
        <member name="F:DOL.GS.Spells.ConcentrationList.m_concSpells">
            <summary>
            Holds the list effects
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ConcentrationList.#ctor(DOL.GS.GameLiving)">
            <summary>
            Constructs a new ConcentrationList
            </summary>
            <param name="owner">The list owner</param>
        </member>
        <member name="M:DOL.GS.Spells.ConcentrationList.Add(DOL.GS.Effects.IConcentrationEffect)">
            <summary>
            Adds a new effect to the list
            </summary>
            <param name="effect">The effect to add</param>
        </member>
        <member name="M:DOL.GS.Spells.ConcentrationList.Remove(DOL.GS.Effects.IConcentrationEffect)">
            <summary>
            Removes an effect from the list
            </summary>
            <param name="effect">The effect to remove</param>
        </member>
        <member name="M:DOL.GS.Spells.ConcentrationList.CancelAll">
            <summary>
            Cancels all list effects
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ConcentrationList.BeginChanges">
            <summary>
            Stops list updates for multiple changes
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ConcentrationList.CommitChanges">
            <summary>
            Sends all changes since BeginChanges was called
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.ConcentrationList.GetOfType(System.Type)">
            <summary>
            Find the first occurence of an effect with given type
            </summary>
            <param name="effectType"></param>
            <returns>effect or null</returns>
        </member>
        <member name="M:DOL.GS.Spells.ConcentrationList.GetAllOfType(System.Type)">
            <summary>
            Find effects of specific type
            </summary>
            <param name="effectType"></param>
            <returns>resulting effectlist</returns>
        </member>
        <member name="M:DOL.GS.Spells.ConcentrationList.GetEnumerator">
            <summary>
            Gets the list enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.Spells.ConcentrationList.Item(System.Int32)">
            <summary>
            Gets the concentration effect by index
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.ConcentrationList.UsedConcentration">
            <summary>
            Gets the amount of used concentration
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.ConcentrationList.ConcSpellsCount">
            <summary>
            Gets the count of conc spells in the list
            </summary>
        </member>
        <member name="P:DOL.GS.Spells.ConcentrationList.Count">
            <summary>
            Gets the list effects count
            </summary>
        </member>
        <member name="T:DOL.GS.SkillHandler.StealthSpecHandler">
            <summary>
            Handler for Stealth Spec clicks
            </summary>
        </member>
        <member name="M:DOL.GS.SkillHandler.StealthSpecHandler.Execute(DOL.GS.Specialization,DOL.GS.GamePlayer)">
            <summary>
            Executes the stealth ability
            </summary>
            <param name="spec"></param>
            <param name="player"></param>
        </member>
        <member name="M:DOL.GS.SkillHandler.StealthSpecHandler.IsObjectTooClose(DOL.GS.GameObject,DOL.GS.GamePlayer)">
            <summary>
            Checks whether object is too close to player
            </summary>
            <param name="obj">object</param>
            <param name="player">player</param>
            <returns>true if object prevents player from hiding</returns>
        </member>
        <member name="T:DOL.GS.Quests.BaseQuest">
            <summary>
            BaseQuest provides some helper classes for writing quests and
            integrates a new QuestPart Based QuestSystem.
            </summary>
            <seealso cref="T:DOL.GS.Quests.BaseQuestPart"/>
        </member>
        <member name="F:DOL.GS.Quests.BaseQuest.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.BaseQuest.SAVE_INTO_DATABASE">
            <summary>
            Global Constant for all quests to define wether npcs should be saved in db or not.
            </summary>
        </member>
        <member name="F:DOL.GS.Quests.BaseQuest.questParts">
            <summary>
            List of all QuestParts that can be fired on notify method of quest.
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuest.#ctor">
            <summary>
            Create an empty Quest
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuest.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new empty Quest
            </summary>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuest.#ctor(DOL.GS.GamePlayer,System.Int32)">
            <summary>
            Constructs a new Quest
            </summary>
            <param name="questingPlayer">The player doing this quest</param>
            <param name="step">The current step the player is on</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuest.#ctor(DOL.GS.GamePlayer,DOL.Database.DBQuest)">
            <summary>
            Constructs a new Quest from a database Object
            </summary>
            <param name="questingPlayer">The player doing the quest</param>
            <param name="dbQuest">The database object</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuest.RegisterQuestPart(DOL.GS.Quests.BaseQuestPart)">
            <summary>
            Registers all needed handlers for the given questPart,
            this will not add the questpart to the quest. For this case use AddQuestPart
            </summary>
            <param name="questPart">QuestPart to register handlers for</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuest.UnRegisterQuestPart(DOL.GS.Quests.BaseQuestPart)">
            <summary>
            Remove all registered handlers for this quest,
            this will not remove the questPart from the quest.
            </summary>
            <param name="questPart">QuestPart to remove handlers from</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuest.AddQuestPart(DOL.GS.Quests.BaseQuestPart)">
            <summary>
            Adds the given questpart to the quest depending on the added triggers it will either
            be added as InteractQuestPart as NotifyQuestPart or both and also register the needed event handler.
            </summary>
            <param name="questPart">QuestPart to be added</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuest.RemoveQuestPart(DOL.GS.Quests.BaseQuestPart)">
            <summary>
            Remove the given questpart from the quest and also unregister the handlers
            </summary>
            <param name="questPart">QuestPart to be removed</param>
        </member>
        <member name="M:DOL.GS.Quests.BaseQuest.Notify(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Quest internal Notify method only fires if player already has the quest assigned
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:DOL.GS.PlayerTitles.PlayerTitleMgr">
            <summary>
            Handles loading of player titles.
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTitles.PlayerTitleMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTitles.PlayerTitleMgr.m_titles">
            <summary>
            Holds all player titles.
            </summary>
        </member>
        <member name="F:DOL.GS.PlayerTitles.PlayerTitleMgr.ClearTitle">
            <summary>
            Holds special "empty" title instance.
            </summary>
        </member>
        <member name="M:DOL.GS.PlayerTitles.PlayerTitleMgr.Init">
            <summary>
            Initializes/loads all known player titles.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:DOL.GS.PlayerTitles.PlayerTitleMgr.GetPlayerTitles(DOL.GS.GamePlayer)">
            <summary>
            Gets all titles that are suitable for player.
            </summary>
            <param name="player">The player for title checks.</param>
            <returns>All title suitable for given player or an empty list if none.</returns>
        </member>
        <member name="M:DOL.GS.PlayerTitles.PlayerTitleMgr.GetTitleByTypeName(System.String)">
            <summary>
            Gets the title by its type name.
            </summary>
            <param name="s">The type name to search for.</param>
            <returns>Found title or null.</returns>
        </member>
        <member name="M:DOL.GS.PlayerTitles.PlayerTitleMgr.RegisterTitle(DOL.GS.PlayerTitles.IPlayerTitle)">
            <summary>
            Registers a title.
            </summary>
            <param name="title">The title to register.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="T:DOL.GS.Scripts.ClassRunemaster">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassBerserker">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassBerserker.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassHero">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassHero.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassNecromancer">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassNecromancer.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassCleric">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassCleric.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassArmsman">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassArmsman.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.SkillHandlerAttribute">
            <summary>
            Skill Attribute
            </summary>
        </member>
        <member name="T:DOL.GS.SkillBase">
             <summary>
            
             </summary>
        </member>
        <member name="F:DOL.GS.SkillBase.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.SkillBase.m_styleSpells">
            <summary>
            (procs) global table for style => list of styles dependend spells
            [StyleID, [ClassID, DBStyleXSpell]]
            ClassID for normal style is 0
            </summary>
        </member>
        <member name="M:DOL.GS.SkillBase.GetArmorResist(DOL.Database.ItemTemplate,DOL.GS.eDamageType)">
            <summary>
            Gets the natural armor resist to the give damage type
            </summary>
            <param name="armor"></param>
            <param name="damageType"></param>
            <returns>resist value</returns>
        </member>
        <member name="M:DOL.GS.SkillBase.CheckPropertyType(DOL.GS.eProperty,DOL.GS.ePropertyType)">
            <summary>
            Check if property belongs to all of specified types
            </summary>
            <param name="prop">The property to check</param>
            <param name="type">The types to check</param>
            <returns>true if property belongs to all types</returns>
        </member>
        <member name="F:DOL.GS.SkillBase.m_propertyTypes">
            <summary>
            Holds all property types
            </summary>
        </member>
        <member name="M:DOL.GS.SkillBase.InitPropertyTypes">
            <summary>
            Init property types table
            </summary>
        </member>
        <member name="M:DOL.GS.SkillBase.RegisterAbilityHandler(System.String,System.Type)">
            <summary>
            register new AbilityActionHandler
            if a previous handler exists it will be overridden
            </summary>
            <param name="keyName"></param>
            <param name="classtype"></param>
        </member>
        <member name="M:DOL.GS.SkillBase.GetAbilityActionHandler(System.String)">
            <summary>
            Gets a new AbilityActionHandler instance associated with given KeyName
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SkillBase.RegisterSpecHandler(System.String,System.Type)">
            <summary>
            register new SpecActionHandler
            if a previous handler exists it will be overridden
            </summary>
            <param name="keyName"></param>
            <param name="classtype"></param>
        </member>
        <member name="M:DOL.GS.SkillBase.GetSpecActionHandler(System.String)">
            <summary>
            Gets a new SpecActionHandler instance associated with given KeyName
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SkillBase.GetClassRealmAbilities(System.Int32)">
            <summary>
            returns level 1 instantiated realm abilities, only for readonly use!
            </summary>
            <param name="classID"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SkillBase.GetAbility(System.String)">
            <summary>
            
            </summary>
            <param name="keyname"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SkillBase.GetAbility(System.String,System.Int32)">
             <summary>
            
             </summary>
             <param name="keyname"></param>
             <param name="level"></param>
             <returns></returns>
        </member>
        <member name="M:DOL.GS.SkillBase.GetSpellLine(System.String)">
             <summary>
            
             </summary>
             <param name="keyname"></param>
             <returns></returns>
        </member>
        <member name="M:DOL.GS.SkillBase.GetSpecialization(System.String)">
             <summary>
            
             </summary>
             <param name="keyname"></param>
             <returns></returns>
        </member>
        <member name="M:DOL.GS.SkillBase.GetStyleList(System.String,System.Int32)">
            <summary>
            return all styles for a specific specialization
            if no style are associated or spec is unknown the list will be empty
            </summary>
            <param name="specID">KeyName of spec</param>
            <param name="classId">ClassID for which style list is requested</param>
            <returns>list of styles, never null</returns>
        </member>
        <member name="M:DOL.GS.SkillBase.GetSpecAbilityList(System.String)">
            <summary>
            returns spec dependend abilities
            </summary>
            <param name="specID">KeyName of spec</param>
            <returns>list of abilities or empty list</returns>
        </member>
        <member name="M:DOL.GS.SkillBase.GetSpellList(System.String)">
            <summary>
            return all spells for a specific spell-line
            if no spells are associated or spell-line is unknown the list will be empty
            </summary>
            <param name="spellLineID">KeyName of spell-line</param>
            <returns>list of spells, never null</returns>
        </member>
        <member name="M:DOL.GS.SkillBase.GetStyleByID(System.Int32,System.Int32)">
            <summary>
            find style with specific id
            </summary>
            <param name="styleID">id of style</param>
            <param name="classId">ClassID for which style list is requested</param>
            <returns>style or null if not found</returns>
        </member>
        <member name="M:DOL.GS.SkillBase.GetSpellByID(System.Int32)">
            <summary>
            Returns spell with id, level of spell is always 1
            </summary>
            <param name="spellID"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SkillBase.GetPropertyName(DOL.GS.eProperty)">
            <summary>
            Get display name of property
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SkillBase.GetRaceResist(DOL.GS.eRace,DOL.GS.eResist)">
            <summary>
            determine race dependend base resist
            </summary>
            <param name="race"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.SkillBase.m_objectTypeToSpec">
            <summary>
            Holds object type to spec convertion table
            </summary>
        </member>
        <member name="F:DOL.GS.SkillBase.m_specToSkill">
            <summary>
            Holds spec to skill table
            </summary>
        </member>
        <member name="F:DOL.GS.SkillBase.m_specToFocus">
            <summary>
            Holds spec to focus table
            </summary>
        </member>
        <member name="M:DOL.GS.SkillBase.ObjectTypeToSpec(DOL.GS.eObjectType)">
            <summary>
            Convert object type to spec needed to use that object
            </summary>
            <param name="objectType">type of the object</param>
            <returns>spec names needed to use that object type</returns>
        </member>
        <member name="M:DOL.GS.SkillBase.SpecToSkill(System.String)">
            <summary>
            Convert spec to skill property
            </summary>
            <param name="specKey"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.SkillBase.SpecToFocus(System.String)">
            <summary>
            Convert spec to focus
            </summary>
            <param name="specKey"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:DOL.GS.NpcTemplate" -->
        <member name="F:DOL.GS.NpcTemplate.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.NpcTemplate.#ctor(DOL.Database.DBNpcTemplate)">
            <summary>
            Constructs a new NpcTemplate
            </summary>
            <param name="data">The source npc template data</param>
        </member>
        <member name="P:DOL.GS.NpcTemplate.TemplateId">
            <summary>
            Gets the npc template ID
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.Name">
            <summary>
            Gets the template npc name
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.ClassType">
            <summary>
            Gets the template npc class type
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.GuildName">
            <summary>
            Gets the template npc guild name
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.Model">
            <summary>
            Gets the template npc model
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.Size">
            <summary>
            Gets the template npc size
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.MaxSpeed">
            <summary>
            Gets the template npc max speed
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.Flags">
            <summary>
            Gets the template npc flags
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.Inventory">
            <summary>
            Gets the template npc inventory
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.MeleeDamageType">
            <summary>
            Gets the template npc melee damage type
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.ParryChance">
            <summary>
            Gets the template npc parry chance
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.EvadeChance">
            <summary>
            Gets the template npc evade chance
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.BlockChance">
            <summary>
            Gets the template npc block chance
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.LeftHandSwingChance">
            <summary>
            Gets the template npc left hand swing chance
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.Spells">
            <summary>
            Gets the template npc spells name array 
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.Styles">
            <summary>
            Gets the template npc styles name array 
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.SpellLines">
            <summary>
            Gets the template npc spellLines
            </summary>
        </member>
        <member name="P:DOL.GS.NpcTemplate.Abilities">
            <summary>
            Gets the template npc Abilities
            </summary>
        </member>
        <member name="T:DOL.GS.LootMgr">
            <summary>
            the LootMgr holds pointers to all LootGenerators at 
            associates the correct LootGenerator with a given Mob
            </summary>
        </member>
        <member name="F:DOL.GS.LootMgr.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.LootMgr.m_ClassGenerators">
            <summary>
            Map holding one generator for each different class, to reuse similar generators...
            </summary>
        </member>
        <member name="F:DOL.GS.LootMgr.m_globalGenerators">
            <summary>
            List of global Lootgenerators 
            </summary>
        </member>
        <member name="F:DOL.GS.LootMgr.m_mobNameGenerators">
            <summary>
            List of Lootgenerators related by mobname
            </summary>
        </member>
        <member name="F:DOL.GS.LootMgr.m_mobGuildGenerators">
            <summary>
            List of Lootgenerators related by mobguild
            </summary>
        </member>
        <member name="F:DOL.GS.LootMgr.m_mobRegionGenerators">
            <summary>
            List of Lootgenerators related by region ID
            </summary>
        </member>
        <member name="M:DOL.GS.LootMgr.Init">
            <summary>
            Initializes the LootMgr. This function must be called
            before the LootMgr can be used!
            </summary>
        </member>
        <member name="M:DOL.GS.LootMgr.PutGeneratorInCache(DOL.Database.DBLootGenerator,DOL.GS.ILootGenerator)">
            <summary>
            Stores a generator in a cache to reused the same generators multiple times
            </summary>
            <param name="dbGenerator"></param>
            <param name="generator"></param>
        </member>
        <member name="M:DOL.GS.LootMgr.GetGeneratorInCache(DOL.Database.DBLootGenerator)">
            <summary>
             Returns a generator from cache
            </summary>
            <param name="dbGenerator"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.LootMgr.UnRegisterLootGenerator(DOL.GS.ILootGenerator,System.String,System.String,System.String)">
            <summary>
            Unregister a generator for the given parameters		
            </summary>
            <param name="generator"></param>
            <param name="mobname"></param>
            <param name="mobguild"></param>
            <param name="mobfaction"></param>
        </member>
        <member name="M:DOL.GS.LootMgr.RegisterLootGenerator(DOL.GS.ILootGenerator,System.String,System.String,System.String,System.Int32)">
            <summary>
            Register a generator for the given parameters,
            If all parameters are null a global generaotr for all mobs will be registered
            </summary>
            <param name="generator"></param>
            <param name="mobname"></param>
            <param name="mobguild"></param>
            <param name="mobfaction"></param>
        </member>
        <member name="M:DOL.GS.LootMgr.GetLoot(DOL.GS.GameNPC,DOL.GS.GameObject)">
            <summary>
            Returns the lot for the given Mob
            </summary>		
            <param name="mob"></param>
            <param name="killer"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.LootMgr.GetLootGenerators(DOL.GS.GameNPC)">
            <summary>
            Returns the ILootGenerators for the given mobs
            </summary>
            <param name="mob"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Effects.StrikePredictionEffect">
            <summary>
            Effect handler for Barrier Of Fortitude
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StrikePredictionEffect.#ctor">
            <summary>
            Default constructor for AmelioratingMelodiesEffect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StrikePredictionEffect.Start(DOL.GS.GamePlayer,System.Int32,System.Int32)">
            <summary>
            Called when effect is to be started
            </summary>
            <param name="player">The player to start the effect for</param>
            <param name="duration">The effectduration in secounds</param>
            <param name="value">The percentage additional value for melee absorb</param>
        </member>
        <member name="M:DOL.GS.Effects.StrikePredictionEffect.PlayerLeftWorld(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Called when a player leaves the game
            </summary>
            <param name="e">The event which was raised</param>
            <param name="sender">Sender of the event</param>
            <param name="args">EventArgs associated with the event</param>
        </member>
        <member name="M:DOL.GS.Effects.StrikePredictionEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect is to be cancelled
            </summary>
            <param name="playerCancel">Whether or not effect is player cancelled</param>
        </member>
        <member name="M:DOL.GS.Effects.StrikePredictionEffect.StartTimers">
            <summary>
            Starts the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StrikePredictionEffect.StopTimers">
            <summary>
            Stops the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.StrikePredictionEffect.ExpireCallback(DOL.GS.RegionTimer)">
            <summary>
            The callback for when the effect expires
            </summary>
            <param name="timer">The ObjectTimerCallback object</param>
        </member>
        <member name="P:DOL.GS.Effects.StrikePredictionEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StrikePredictionEffect.RemainingTime">
            <summary>
            Remaining time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StrikePredictionEffect.Icon">
            <summary>
            Icon ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StrikePredictionEffect.InternalID">
            <summary>
            Unique ID for identification in the effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.StrikePredictionEffect.DelveInfo">
            <summary>
            Delve information
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.DivineInterventionEffect">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.DivineInterventionEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect must be canceled
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.DivineInterventionEffect.StartTimers">
            <summary>
            Starts the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.DivineInterventionEffect.StopTimers">
            <summary>
            Stops the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.DivineInterventionEffect.ExpiredCallback(DOL.GS.RegionTimer)">
            <summary>
            The callback method when the effect expires
            </summary>
            <param name="timer">the gametimer of the effect</param>
            <returns>the new intervall (0) </returns>
        </member>
        <member name="P:DOL.GS.Effects.DivineInterventionEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.DivineInterventionEffect.RemainingTime">
            <summary>
            Remaining time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.DivineInterventionEffect.Icon">
            <summary>
            Icon to show on players, can be id
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.DivineInterventionEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.DivineInterventionEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.eLoginError">
            <summary>
            Enum for LoginDeny reasons
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.eRealm">
            <summary>
            Defines the realms for various packets and search functions etc.
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.eRealm._First">
            <summary>
            First realm number, for use in all arrays
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.eRealm.None">
            <summary>
            No specific realm
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.eRealm._FirstPlayerRealm">
            <summary>
            First player realm number, for use in all arrays
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.eRealm.Albion">
            <summary>
            Albion Realm
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.eRealm.Midgard">
            <summary>
            Midgard Realm
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.eRealm.Hibernia">
            <summary>
            Hibernia Realm
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.eRealm._LastPlayerRealm">
            <summary>
            Last player realm number, for use in all arrays
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.eRealm._Last">
            <summary>
            LastRealmNumber to allow dynamic allocation of realm specific arrays.
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.eChatLoc">
            <summary>
            Chat locations on the client window
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.eChatType">
            <summary>
            Types of chat messages
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.RegionEntry">
            <summary>
            The RegionEntry structure
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.RegionEntry.id">
            <summary>
            Region id
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.RegionEntry.name">
            <summary>
            Name of the region
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.RegionEntry.fromPort">
            <summary>
            Port client receives on
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.RegionEntry.toPort">
            <summary>
            Port the region receives on
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.RegionEntry.ip">
            <summary>
            Region IP address
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.RegionEntry.expansion">
            <summary>
            Region expansion
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.ObjectInteractRequestHandler.InteractActionHandler">
            <summary>
            Handles player interact actions
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.ObjectInteractRequestHandler.InteractActionHandler.m_targetOid">
            <summary>
            The interact target OID
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.ObjectInteractRequestHandler.InteractActionHandler.#ctor(DOL.GS.GamePlayer,System.Int32)">
            <summary>
            Constructs a new InterractActionHandler
            </summary>
            <param name="actionSource">The action source</param>
            <param name="targetOid">The interact target OID</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.ObjectInteractRequestHandler.InteractActionHandler.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.TemplateMgr.SetGuardModel(DOL.GS.Keeps.GameKeepGuard)">
            <summary>
            Sets a guards model
            </summary>
            <param name="guard">The guard object</param>
        </member>
        <member name="M:DOL.GS.Keeps.TemplateMgr.SetGuardName(DOL.GS.Keeps.GameKeepGuard)">
            <summary>
            Sets a guards name
            </summary>
            <param name="guard">The guard object</param>
        </member>
        <member name="M:DOL.GS.Keeps.TemplateMgr.SetBlockEvadeParryChance(DOL.GS.Keeps.GameKeepGuard)">
            <summary>
            Sets a guards Block, Parry and Evade change
            </summary>
            <param name="guard">The guard object</param>
        </member>
        <member name="M:DOL.GS.Keeps.TemplateMgr.SetGuardBrain(DOL.GS.Keeps.GameKeepGuard)">
            <summary>
            Sets the guards brain
            </summary>
            <param name="guard">The guard object</param>
        </member>
        <member name="M:DOL.GS.Keeps.TemplateMgr.SetGuardSpeed(DOL.GS.Keeps.GameKeepGuard)">
            <summary>
            Sets the guards speed
            </summary>
            <param name="guard">The guard object</param>
        </member>
        <member name="M:DOL.GS.Keeps.TemplateMgr.SetGuardResists(DOL.GS.Keeps.GameKeepGuard)">
            <summary>
            Sets a guards resists
            </summary>
            <param name="guard">The guard object</param>
        </member>
        <member name="T:DOL.GS.ChatGroup">
            <summary>
            Description résumée de ChatGroup.
            </summary>
        </member>
        <member name="F:DOL.GS.ChatGroup.m_chatgroupMembers">
            <summary>
            This holds all players inside the chatgroup
            </summary>
        </member>
        <member name="M:DOL.GS.ChatGroup.#ctor">
            <summary>
            constructor of chat group
            </summary>
        </member>
        <member name="M:DOL.GS.ChatGroup.AddPlayer(DOL.GS.GamePlayer,System.Boolean)">
            <summary>
            Adds a player to the chatgroup
            </summary>
            <param name="player">GamePlayer to be added to the group</param>
            <returns>true if added successfully</returns>
        </member>
        <member name="M:DOL.GS.ChatGroup.RemovePlayer(DOL.GS.GamePlayer)">
            <summary>
            Removes a player from the group
            </summary>
            <param name="player">GamePlayer to be removed</param>
            <returns>true if removed, false if not</returns>
        </member>
        <member name="T:DOL.GS.GamePlayer">
            <summary>
            This class represents a player inside the game
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.LAST_BIND_TICK">
            <summary>
            Property that holds tick when the player bind last time
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.RELEASE_MINIMUM_WAIT">
            <summary>
            minimum time to wait before release is possible in seconds
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.RELEASE_TIME">
            <summary>
            max time before auto release in seconds
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.RELEASING_PROPERTY">
            <summary>
            The property name that is set when releasing to another region
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.PRAY_DELAY">
            <summary>
            The delay to wait until xp is regained, in milliseconds
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.GRAVESTONE_PROPERTY">
            <summary>
            Property that saves the gravestone in the pray timer
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.DEATH_EXP_LOSS_PROPERTY">
            <summary>
            Property that saves experience lost on last death
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.DEATH_CONSTITUTION_LOSS_PROPERTY">
            <summary>
            Property that saves condition lost on last death
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.MAX_LEVEL">
            <summary>
            The maximum level a player can reach
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.RANGE_ATTACK_HOLD_START">
            <summary>
            The time someone can hold a ranged attack before tiring
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.RANGE_ATTACK_ENDURANCE">
            <summary>
            Endurance used for normal range attack
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.CRITICAL_SHOT_ENDURANCE">
            <summary>
            Endurance used for critical shot
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.LAST_CHARGED_ITEM_USE_TICK">
            <summary>
            Property that holds tick when charged item was used last time
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.DEBUG_MODE_PROPERTY">
            <summary>
            The property to save debug mode on region change
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.MAX_LAST_Z">
            <summary>
            Property that saves last maximum Z value
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.LAST_POSITION_UPDATE_ZONE">
            <summary>
            Property that saves zone on last postion update
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.PLAYER_BASE_SPEED">
            <summary>
            The base speed of the player
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.STEALTH_CHANGE_TICK">
            <summary>
            Property that holds tick when stealth state was changed last time
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.UNCOVER_STEALTH_ACTION_PROP">
            <summary>
            The temp property that stores the uncover stealth action
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_client">
            <summary>
            This is our gameclient!
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_character">
            <summary>
            This holds the character this player is
            based on!
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_enteredGame">
            <summary>
            Has this player entered the game, will be
            true after the first time the char enters
            the world
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_objectUpdates">
            <summary>
            Holds the objects that need update
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_lastUpdateArray">
            <summary>
            Holds the index into the last update array
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_lastNPCUpdate">
            <summary>
            Holds the tickcount when the npcs around this player
            were checked the last time for new npcs. Will be done
            every 250ms in WorldMgr.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_targetInView">
            <summary>
            true if the targetObject is visible
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_isAnonymous">
            <summary>
            Holds the anonymous flag for this player
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.AFK_MESSAGE">
            <summary>
            Property for the optional away from keyboard message.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.QUICK_CAST_CHANGE_TICK">
            <summary>
            Property for the optional away from keyboard message.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_groundtargetInView">
            <summary>
            Holds the ground target visibility flag
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.SwitchUpdateArrays">
            <summary>
            Switches the update arrays
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_quitTimer">
            <summary>
            quit timer
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.QuitTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            Timer callback for quit
            </summary>
            <param name="callingTimer">the calling timer</param>
            <returns>the new intervall</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.LinkdeathTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            Callback method, called when the player went linkdead and now he is
            allowed to be disconnected
            </summary>
            <param name="callingTimer">the timer</param>
            <returns>0</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.CleanupOnDisconnect">
            <summary>
            Stop all timers, events and remove player from everywhere (group/guild/chat)
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.Quit(System.Boolean)">
            <summary>
            This function saves the character and sends a message to all others
            that the player has quit the game!
            </summary>
            <param name="forced">true if Quit can not be prevented!</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.UpdatePlayerStatus">
            <summary>
            Updates Health, Mana, Sitting, Endurance, Concentration and Alive status to client
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.Bind(System.Boolean)">
            <summary>
            Binds this player to the current location
            </summary>
            <param name="forced">if true, can bind anywhere</param>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_deathTick">
            <summary>
            tick when player is died
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_automaticRelease">
            <summary>
            choosed the player to release as soon as possible?
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_releaseTimer">
            <summary>
            The release timer for this player
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.StopReleaseTimer">
            <summary>
            Stops release timer and closes timer window
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_releaseType">
            <summary>
            The current release type
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.Release(DOL.GS.GamePlayer.eReleaseType,System.Boolean)">
            <summary>
            Releases this player after death ... subtracts xp etc etc...
            </summary>
            <param name="releaseCommand">The type of release used for this player</param>
            <param name="forced">if true, will release even if not dead</param>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_releasePhase">
            <summary>
            helper state var for different release phases
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.ReleaseTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            callback every second to control realtime release
            </summary>
            <param name="callingTimer"></param>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_prayAction">
            <summary>
            The timer that will be started when the player wants to pray
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.Pray">
            <summary>
            Prays on a gravestone for XP!
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.PrayTimerStop">
            <summary>
            Stop praying; used when player changes target
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.OnRevive(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Called when player revive
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_totalConLostAtDeath">
            <summary>
            Holds the total amount of constitution lost at deaths
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.ChangeBaseStat(DOL.GS.eStat,System.Int16)">
            <summary>
            Change a stat value
            </summary>
            <param name="stat">The stat to change</param>
            <param name="val">The new value</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.OnStatChanged(DOL.GS.eStat,System.Int32)">
            <summary>
            Is called whenever a stat changed in value
            </summary>
            <param name="stat">The stat that changed</param>
            <param name="change">The change value</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.StartHealthRegeneration">
            <summary>
            Starts the health regeneration.
            Overriden. No lazy timers for GamePlayers.
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.StartPowerRegeneration">
            <summary>
            Starts the power regeneration.
            Overriden. No lazy timers for GamePlayers.
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.StartEnduranceRegeneration">
            <summary>
            Starts the endurance regeneration.
            Overriden. No lazy timers for GamePlayers.
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.StopHealthRegeneration">
            <summary>
            Stop the health regeneration.
            Overriden. No lazy timers for GamePlayers.
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.StopPowerRegeneration">
            <summary>
            Stop the power regeneration.
            Overriden. No lazy timers for GamePlayers.
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.StopEnduranceRegeneration">
            <summary>
            Stop the endurance regeneration.
            Overriden. No lazy timers for GamePlayers.
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.HealthRegenerationTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            Override HealthRegenTimer because if we are not connected anymore
            we DON'T regenerate health, even if we are not garbage collected yet!
            </summary>
            <param name="callingTimer">the timer</param>
            <returns>the new time</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.PowerRegenerationTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            Override PowerRegenTimer because if we are not connected anymore
            we DON'T regenerate mana, even if we are not garbage collected yet!
            </summary>
            <param name="selfRegenerationTimer">the timer</param>
            <returns>the new time</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.EnduranceRegenerationTimerCallback(DOL.GS.RegionTimer)">
            <summary>
            Override EnduranceRegenTimer because if we are not connected anymore
            we DON'T regenerate endurance, even if we are not garbage collected yet!
            </summary>
            <param name="selfRegenerationTimer">the timer</param>
            <returns>the new time</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.CalculateMaxHealth(System.Int32,System.Int32)">
            <summary>
            Calculates the maximum health for a specific playerlevel and constitution
            </summary>
            <param name="level">The level of the player</param>
            <param name="constitution">The constitution of the player</param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.CalculateMaxMana(System.Int32,System.Int32)">
            <summary>
            Calculates MaxHealth
            </summary>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.RACENAMES">
            <summary>
            All possible player races
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_class">
            <summary>
            Players class
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_race">
            <summary>
            Holds the player's race id
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.SetCharacterClass(System.Int32)">
            <summary>
            Set the character class to a specific one
            </summary>
            <param name="id">id of the character class</param>
            <returns>success</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_customFaceAttributes">
            <summary>
            Hold all player face custom attibutes
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetFaceAttribute(DOL.GS.eCharFacePart)">
            <summary>
            Get the character face attribute you want
            </summary>
            <param name="part">face part</param>
            <returns>attribute</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_specialization">
            <summary>
            Holds the player specializable skills and style lines
            (KeyName -> Specialization)
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_specList">
            <summary>
            Holds the players specs again but ordered
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_spelllines">
            <summary>
            Holds the Spell lines the player can use
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_styles">
            <summary>
            Holds all styles of the player
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_skillList">
            <summary>
            Holds all non trainable skills in determined order without styles
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_statBonus">
            <summary>
            Temporary Stats Boni
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_statBonusPercent">
            <summary>
            Temporary Stats Boni in percent
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_respecAmountAllSkill">
            <summary>
            Holds amount of full skill respecs
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_respecAmountSingleSkill">
            <summary>
            Holds amount of single-line skill respecs
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_respecAmountRealmSkill">
            <summary>
            Holds amount of realm skill respecs
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_isLevelRespecUsed">
            <summary>
            Holds level respec usage flag
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.AddSpecialization(DOL.GS.Specialization)">
            <summary>
            give player a new Specialization
            </summary>
            <param name="skill"></param>
        </member>
        <member name="M:DOL.GS.GamePlayer.RemoveSpecialization(System.String)">
            <summary>
            Removes the existing specialization from the player
            </summary>
            <param name="specKeyName">The spec keyname to remove</param>
            <returns>true if removed</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.RemoveSpellLine(DOL.GS.SpellLine)">
            <summary>
            Removes the existing specialization from the player
            </summary>
            <param name="line">The spell line to remove</param>
            <returns>true if removed</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.RemoveSpellLine(System.String)">
            <summary>
            Removes the existing specialization from the player
            </summary>
            <param name="lineKeyName">The spell line keyname to remove</param>
            <returns>true if removed</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.RespecSingleLine(DOL.GS.Specialization)">
            <summary>
            Respec single line
            </summary>
            <param name="player">Player that is doing respec</param>
            <returns>Amount of points spent in that line</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetSpecList">
            <summary>
            returns a list with all specializations
            in the order they were added
            be careful when iterating this list, it has to be
            synced via SyncRoot before any foreach loop
            because its a reference to the player internal list of specs
            that can change at any time
            </summary>
            <returns>list of Spec's</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetNonTrainableSkillList">
            <summary>
            returns a list with all non trainable skills without styles
            in the order they were added
            be careful when iterating this list, it has to be
            synced via SyncRoot before any foreach loop
            because its a reference to the player internal list of skills
            that can change at any time
            </summary>
            <returns>list of Skill's</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetSpecialization(System.String)">
            <summary>
            Retrieves a specific specialization by key name
            </summary>
            <param name="keyName">the key name</param>
            <returns>the found specialization or null</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetSpecializationByName(System.String,System.Boolean)">
            <summary>
            Retrives a specific specialization by name
            </summary>
            <param name="name">the name of the specialization line</param>
            <param name="caseSensitive">false for case-insensitive compare</param>
            <returns>found specialization or null</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.AddAbility(DOL.GS.Ability)">
            <summary>
            Adds a new Ability to the player
            </summary>
            <param name="ability"></param>
        </member>
        <member name="M:DOL.GS.GamePlayer.AddAbility(DOL.GS.Ability,System.Boolean)">
            <summary>
            Adds a new Ability to the player
            </summary>
            <param name="ability"></param>
        </member>
        <member name="M:DOL.GS.GamePlayer.RemoveAbility(System.String)">
            <summary>
            Removes the existing ability from the player
            </summary>
            <param name="abilityKeyName">The ability keyname to remove</param>
            <returns>true if removed</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.HasSpecialization(System.String)">
            <summary>
            Asks for existance of specific specialization
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.CalculateLeftHandSwingCount">
            <summary>
            Calculates how many times left hand swings
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetBaseSpecLevel(System.String)">
            <summary>
            returns the level of a specialization
            if 0 is returned, the spec is non existent on player
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetModifiedSpecLevel(System.String)">
            <summary>
            returns the level of a specialization + bonuses from RR and Items
            if 0 is returned, the spec is non existent on the player
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.AddSpellLine(DOL.GS.SpellLine)">
            <summary>
            Adds a spell line to the player
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetSpellLines">
            <summary>
            return a list of spell lines in the order they were added
            iterate only with locking SyncRoot on the list!
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetSpellLine(System.String)">
            <summary>
            find a spell line on player and return them
            </summary>
            <param name="keyname"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetStyleList">
            <summary>
            gets a list of available styles
            lock SyncRoot to iterate in the list!
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetAmountOfSpell">
            <summary>
            Return the amount of spell the player can use
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetUsableSpellsOfLine(DOL.GS.SpellLine)">
            <summary>
            Return a list of spells usable in the specified SpellLine
            </summary>
            <param name="line">the line of spell</param>
            <returns>list of Spells</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.RefreshSpecDependantSkills(System.Boolean)">
            <summary>
            updates the list of available styles
            </summary>
            <param name="sendMessages">sends "you learn" messages if true</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DOL.GS.GamePlayer.UpdateSpellLineLevels(System.Boolean)" -->
        <member name="M:DOL.GS.GamePlayer.OnSkillTrained(DOL.GS.Specialization)">
            <summary>
            Called by trainer when specialization points were added to a skill
            </summary>
            <param name="skill"></param>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_playereffectiveness">
            <summary>
            effectiveness of the player (resurrection illness)
            Effectiveness is used in physical/magic damage (exept dot), in weapon skill and max concentration formula
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.CreateEffectsList">
            <summary>
            Creates new effects list for this living.
            </summary>
            <returns>New effects list instance</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_bntyPts">
            <summary>
            Character's bounty points
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_realmPts">
            <summary>
            Character's realm points
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_skillSpecPts">
            <summary>
            Character's skill points
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_realmSpecPts">
            <summary>
            Character's realm special points
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_realmLevel">
            <summary>
            Character's realm rank
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.REALM_RANK_NAMES">
            <summary>
            Holds all realm rank names
            sirru mod 20.11.06
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.GainRealmPoints(System.Int64)">
            <summary>
            Called when this living gains realm points
            </summary>
            <param name="amount">The amount of realm points gained</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.RemoveBountyPoints(System.Int64)">
            <summary>
            Called when this living buy something with realm points
            </summary>
            <param name="amount">The amount of realm points loosed</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.RemoveBountyPoints(System.Int64,System.String)">
            <summary>
            Called when this living buy something with realm points
            </summary>
            <param name="amount">The amount of realm points loosed</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.RemoveBountyPoints(System.Int64,System.String,DOL.GS.PacketHandler.eChatType,DOL.GS.PacketHandler.eChatLoc)">
            <summary>
            Called when this living buy something with realm points
            </summary>
            <param name="amount">The amount of realm points loosed</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.GainBountyPoints(System.Int64)">
            <summary>
            Called when this living gains bounty points
            </summary>
            <param name="amount">The amount of bounty points gained</param>
        </member>
        <member name="F:DOL.GS.GamePlayer.REALMPOINTS_FOR_LEVEL">
            <summary>
            Holds realm points needed for special realm level
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.CalculateRPsFromRealmLevel(System.Int32)">
            <summary>
            Calculates amount of RealmPoints needed for special realm level
            </summary>
            <param name="realmLevel">realm level</param>
            <returns>amount of realm points</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.CalculateRealmLevelFromRPs(System.Int64)">
            <summary>
            Calculates realm level from realm points. SLOW.
            </summary>
            <param name="realmPoints">amount of realm points</param>
            <returns>realm level: RR5L3 = 43, RR1L2 = 2; capped at 99</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.XPLevel">
            <summary>
            A table that holds the required XP/Level
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_currentXP">
            <summary>
            Holds how many XP this player has
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.GainExperience(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Called whenever this player gains experience
            </summary>
            <param name="expTotal">amount of xp to gain</param>
            <param name="expCampBonus">camp bonus to included in total exp</param>
            <param name="expGroupBonus">group bonus included in total exp</param>
            <param name="sendMessage">should exp gain message be sent</param>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_isLevelSecondStage">
            <summary>
            Holds second stage of current level flag
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.OnLevelUp(System.Int32)">
            <summary>
            Called when this player levels
            </summary>
            <param name="previouslevel"></param>
        </member>
        <member name="M:DOL.GS.GamePlayer.OnLevelSecondStage">
            <summary>
            Called when this player reaches second stage of the current level
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_nextCombatStyle">
            <summary>
            Holds the Style that this player wants to use next
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_nextCombatBackupStyle">
            <summary>
            Holds the backup style for the style that the player wants to use next
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_cancelStyle">
            <summary>
            Holds the cancel style flag
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetStyleToUse">
            <summary>
            Decides which style living will use in this moment
            </summary>
            <returns>Style to use or null if none</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_safetyFlag">
            <summary>
            Stores PvP safety flag
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_spellQueue">
            <summary>
            Holds the SpellQueue flag
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.SwitchWeapon(DOL.GS.GameLiving.eActiveWeaponSlot)">
            <summary>
            Switches the active weapon to another one
            </summary>
            <param name="slot">the new eActiveWeaponSlot</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.RangeAttackHandler(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Removes ammo and endurance on range attack
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:DOL.GS.GamePlayer.StartAttack(DOL.GS.GameObject)">
            <summary>
            Starts a melee attack with this player
            </summary>
            <param name="attackTarget">the target to attack</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.StopAttack">
            <summary>
            Stops all attacks this player is making
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.SwitchQuiver(DOL.GS.GameLiving.eActiveQuiverSlot,System.Boolean)">
            <summary>
            Switches the active quiver slot to another one
            </summary>
            <param name="slot">the new eActiveWeaponSlot</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.CheckRangedAmmoCompatibilityWithActiveWeapon">
            <summary>
            Check the selected range ammo and decides if it's compatible with select weapon
            </summary>
            <returns>True if compatible, false if not</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_rangeAttackAmmo">
            <summary>
            Holds the arrows for next range attack
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_rangeAttackTarget">
            <summary>
            Holds the target for next range attack
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.CheckRangeAttackState(DOL.GS.GameObject)">
            <summary>
            Check the range attack state and decides what to do
            Called inside the AttackTimerCallback
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.MakeAttack(DOL.GS.GameObject,DOL.Database.InventoryItem,DOL.GS.Styles.Style,System.Double,System.Int32,System.Boolean)">
            <summary>
            Called whenever a single attack strike is made
            </summary>
            <param name="target">the target of attack</param>
            <param name="weapon">the weapon to use for attack</param>
            <param name="style">the style to use for attack</param>
            <param name="effectiveness">damage effectiveness (0..1)</param>
            <returns>the object where we collect and modifiy all parameters about the attack</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.CalculateCriticalDamage(DOL.GS.AttackData,DOL.Database.InventoryItem)">
            <summary>
            Calculates melee critical damage of this player
            </summary>
            <param name="ad">The attack data</param>
            <param name="weapon">The weapon used</param>
            <returns>The amount of critical damage</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.OnAttackedByEnemy(DOL.GS.AttackData)">
            <summary>
            This method is called at the end of the attack sequence to
            notify objects if they have been attacked/hit by an attack
            </summary>
            <param name="ad">information about the attack</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.OnInterruptTick(DOL.GS.GameLiving,DOL.GS.AttackData.eAttackType)">
            <summary>
            Does needed interrupt checks and interrupts if needed
            </summary>
            <param name="attacker">the attacker that is interrupting</param>
            <param name="attacktype">The attack type</param>
            <returns>true if interrupted successfully</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.CalculateArmorHitLocation">
            <summary>
            Calc Armor hit location when player is hit by enemy
            </summary>
            <returns>slotnumber where enemy hits</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.WeaponSpecLevel(DOL.Database.InventoryItem)">
            <summary>
            determines current weaponspeclevel
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.WeaponBaseSpecLevel(DOL.Database.InventoryItem)">
            <summary>
            determines current weaponspeclevel
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetWeaponSkill(DOL.Database.InventoryItem)">
            <summary>
            Gets the weaponskill of weapon
            </summary>
            <param name="weapon"></param>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetWeaponStat(DOL.Database.InventoryItem)">
            <summary>
            calculates weapon stat
            </summary>
            <param name="weapon"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetArmorAF(DOL.GS.eArmorSlot)">
            <summary>
            calculate item armor factor influenced by quality, con and duration
            </summary>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetKeepBonuses">
            <summary>
            Calculates keep bonuses
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetArmorAbsorb(DOL.GS.eArmorSlot)">
            <summary>
            Calculates armor absorb level
            </summary>
            <param name="slot"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.WeaponDamage(DOL.Database.InventoryItem)">
            <summary>
            Gets the weapondamage of currently used weapon
            Used to display weapon damage in stats, 16.5dps = 1650
            </summary>
            <param name="weapon">the weapon used for attack</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.UnstyledDamageCap(DOL.Database.InventoryItem)">
            <summary>
            Max. Damage possible without style
            </summary>
            <param name="weapon">attack weapon</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.AttackCriticalChance(DOL.Database.InventoryItem)">
            <summary>
            The chance for a critical hit
            </summary>
            <param name="weapon">attack weapon</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.AttackDamageType(DOL.Database.InventoryItem)">
            <summary>
            Returns the damage type of the current attack
            </summary>
            <param name="weapon">attack weapon</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.AttackSpeed(DOL.Database.InventoryItem[])">
            <summary>
            Gets the current attackspeed of this living in milliseconds
            </summary>
            <param name="weapons">attack weapons</param>
            <returns>effective speed of the attack. average if more than one weapon.</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.AttackDamage(DOL.Database.InventoryItem)">
            <summary>
            Gets the attack damage
            </summary>
            <param name="weapon">the weapon used for attack</param>
            <returns>the weapon damage</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_lastDeathRealmPoints">
            <summary>
            Stores the amount of realm points gained by other players on last death
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.Die(DOL.GS.GameObject)">
            <summary>
            Called when the player dies
            </summary>
            <param name="killer">the killer</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetDamageResist(DOL.GS.eProperty)">
            <summary>
            Easy method to get the resist of a certain damage type
            Good for when we add RAs
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_duelTarget">
            <summary>
            The duel target of this player
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.DuelStart(DOL.GS.GamePlayer)">
            <summary>
            Starts the duel
            </summary>
            <param name="duelTarget">The duel target</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.DuelStop">
            <summary>
            Stops the duel if it is running
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.DuelOnAttack(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Stops the duel if player attack or is attacked by anything other that duel target
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="M:DOL.GS.GamePlayer.DuelOnPlayerQuit(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Stops the duel on quit/link death
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_disabledCastingTimeout">
            <summary>
            The time someone can not cast
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.DisableSkill(DOL.GS.Skill,System.Int32)">
            <summary>
            Grey out some skills on client for specified duration
            </summary>
            <param name="skill">the skill to disable</param>
            <param name="duration">duration of disable in milliseconds</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.UpdateDisabledSkills">
            <summary>
            Updates all disabled skills to player
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_nextSpell">
            <summary>
            The next spell
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_nextSpellLine">
            <summary>
            The next spell line
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_spellQueueAccessMonitor">
            <summary>
            A lock for the spellqueue
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.ClearSpellQueue">
            <summary>
            Clears the spell queue when a player is interrupted
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.OnAfterSpellCastSequence(DOL.GS.Spells.ISpellHandler)">
            <summary>
            Callback after spell execution finished and next spell can be processed
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:DOL.GS.GamePlayer.CastSpell(DOL.GS.Spell,DOL.GS.SpellLine)">
            <summary>
            Cast a specific spell from given spell line
            </summary>
            <param name="spell">spell to cast</param>
            <param name="line">Spell line of the spell (for bonus calculations)</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.ReceiveTradeItem(DOL.GS.GamePlayer,DOL.Database.InventoryItem)">
            <summary>
            Called when this player receives a trade item
            </summary>
            <param name="source">the source of the item</param>
            <param name="item">the item</param>
            <returns>true to accept, false to deny the item</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.ReceiveTradeMoney(DOL.GS.GamePlayer,System.Int64)">
            <summary>
            Called when the player receives trade money
            </summary>
            <param name="source">the source</param>
            <param name="money">the money value</param>
            <returns>true to accept, false to deny</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetCurrentMoney">
            <summary>
            Gets the money value this player owns
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.AddMoney(System.Int64)">
            <summary>
            Adds money to this player
            </summary>
            <param name="money">money to add</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.AddMoney(System.Int64,System.String)">
            <summary>
            Adds money to this player
            </summary>
            <param name="money">money to add</param>
            <param name="messageFormat">null if no message or "text {0} text"</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.AddMoney(System.Int64,System.String,DOL.GS.PacketHandler.eChatType,DOL.GS.PacketHandler.eChatLoc)">
            <summary>
            Adds money to this player
            </summary>
            <param name="money">money to add</param>
            <param name="messageFormat">null if no message or "text {0} text"</param>
            <param name="ct">message chat type</param>
            <param name="cl">message chat location</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.RemoveMoney(System.Int64)">
            <summary>
            Removes money from the player
            </summary>
            <param name="money">money value to subtract</param>
            <returns>true if successfull, false if player doesn't have enough money</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.RemoveMoney(System.Int64,System.String)">
            <summary>
            Removes money from the player
            </summary>
            <param name="money">money value to subtract</param>
            <param name="messageFormat">null if no message or "text {0} text"</param>
            <returns>true if successfull, false if player doesn't have enough money</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.RemoveMoney(System.Int64,System.String,DOL.GS.PacketHandler.eChatType,DOL.GS.PacketHandler.eChatLoc)">
            <summary>
            Removes money from the player
            </summary>
            <param name="money">money value to subtract</param>
            <param name="messageFormat">null if no message or "text {0} text"</param>
            <param name="ct">message chat type</param>
            <param name="cl">message chat location</param>
            <returns>true if successfull, false if player doesn't have enough money</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.UseSlot(System.Int32,System.Int32)">
            <summary>
            Called when the player uses an inventory in a slot
            eg. by clicking on the icon in the qickbar dragged from a slot
            </summary>
            <param name="slot"></param>
            <param name="type">Which /use command was used (0=simple click on icon, 1=use, 2=/use2)</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.ApplyPoison(DOL.Database.InventoryItem,DOL.Database.InventoryItem)">
            <summary>
            Apply poison to weapon
            </summary>
            <param name="poisonPotion"></param>
            <param name="toItem"></param>
            <returns>true if applied</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.ClearOnSendReceive">
            <summary>
            Clears all OnSendReceive event handlers
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.SendReceive(DOL.GS.GamePlayer,System.String)">
            <summary>
            This function is called when the Player receives a sent text
            </summary>
            <param name="source">GamePlayer that was sending</param>
            <param name="str">string that was sent</param>
            <returns>true if the string was received successfully, false if it was not received</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.ClearOnSend">
            <summary>
            Clears all send event handlers
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.Send(DOL.GS.GamePlayer,System.String)">
            <summary>
            Sends a text to a target
            </summary>
            <param name="target">The target of the send</param>
            <param name="str">string to send (without any "xxx sends:" in front!!!)</param>
            <returns>true if text was sent successfully</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.SayReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            This function is called when the Player receives a Say text!
            </summary>
            <param name="source">The source living saying something</param>
            <param name="str">the text that was said</param>
            <returns>true if received successfully</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.Say(System.String)">
            <summary>
            Call this function to make the player say something
            </summary>
            <param name="str">string to say</param>
            <returns>true if said successfully</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.YellReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            This function is called when the player hears a yell
            </summary>
            <param name="source">the source living yelling</param>
            <param name="str">string that was yelled</param>
            <returns>true if received successfully</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.Yell(System.String)">
            <summary>
            Call this function to make the player yell something
            </summary>
            <param name="str">string to yell</param>
            <returns>true if yelled successfully</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            This function is called when the player hears a whisper
            from some living
            </summary>
            <param name="source">Source that was living</param>
            <param name="str">string that was whispered</param>
            <returns>true if whisper was received successfully</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.Whisper(DOL.GS.GameLiving,System.String)">
            <summary>
            Call this function to make the player whisper to someone
            </summary>
            <param name="target">GameLiving to whisper to</param>
            <param name="str">string to whisper</param>
            <returns>true if whispered successfully</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_steed">
            <summary>
            Holds the GameLiving that is the steed of this player as weakreference
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.ClearMountSteedHandlers">
            <summary>
            Clears all MountSteed handlers
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.MountSteed(DOL.GS.GameNPC,System.Boolean)">
            <summary>
            Mounts the player onto a steed
            </summary>
            <param name="steed">the steed to mount</param>
            <param name="forced">true if the mounting can not be prevented by handlers</param>
            <returns>true if mounted successfully or false if not</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.ClearDismountSteedHandlers">
            <summary>
            Clears all DismountSteed handlers
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.DismountSteed(System.Boolean)">
            <summary>
            Dismounts the player from it's steed.
            </summary>
            <param name="forced">true if the dismounting should not be prevented by handlers</param>
            <returns>true if the dismount was successful, false if not</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.AddToWorld">
            <summary>
            Called to create an player in the world and send the other
            players around this player an update
            </summary>
            <returns>true if created, false if creation failed</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.RemoveFromWorld">
            <summary>
            Called to remove the item from the world. Also removes the
            player visibly from all other players around this one
            </summary>
            <returns>true if removed, false if removing failed</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.Delete">
            <summary>
            Marks this player as deleted
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.MoveTo(System.UInt16,System.Int32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            This function moves a player to a specific region and
            specific coordinates.
            </summary>
            <param name="regionID">RegionID to move to</param>
            <param name="x">X target coordinate</param>
            <param name="y">Y target coordinate</param>
            <param name="z">Z target coordinate (0 to put player on floor)</param>
            <param name="heading">Target heading</param>
            <returns>true if move succeeded, false if failed</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_playerGroup">
            <summary>
            Holds the group of this player
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_playerGroupIndex">
            <summary>
            Holds the index of this player inside of the group
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_lookingForGroup">
            <summary>
            true if this player is looking for a group
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_autoSplitLoot">
            <summary>
            true if this player want to receive loot with autosplit between members of group
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.ModifyFriend(System.String,System.Boolean)">
            <summary>
            Modifies the friend list of this player
            </summary>
            <param name="friendName">the friend name</param>
            <param name="remove">true to remove this friend, false to add it</param>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_lastPositionUpdateZone">
            <summary>
            Holds the zone player was in after last position update
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_maxLastZ">
            <summary>
            Holds the players max Z for fall damage
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_stuckFlag">
            <summary>
            The suck state of this player
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_diving">
            <summary>
            The diving state of this player
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_sitting">
            <summary>
            The sitting state of this player
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_sprintEffect">
            <summary>
            The sprint effect of this player
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.Sprint(System.Boolean)">
            <summary>
            Change sprint state of this player
            </summary>
            <param name="state">new state</param>
            <returns>sprint state after command</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_strafing">
            <summary>
            The strafe state of this player
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.Sit(System.Boolean)">
            <summary>
            Sits/Stands the player
            </summary>
            <param name="sit">True if sitting, otherwise false</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.SetGroundTarget(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Living's ground-target Coordinates inside the current Region
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_lastUniqueLocations">
            <summary>
            Holds unique locations array
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_overencumbered">
            <summary>
            The Encumberance state of this player
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.UpdateEquipmentAppearance">
            <summary>
            Updates the appearance of the equipment this player is using
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.UpdateEncumberance">
            <summary>
            Updates Encumberance and its effects
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.OnItemEquipped(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Adds magical bonuses whenever item was equipped
            </summary>
            <param name="e"></param>
            <param name="sender">inventory</param>
            <param name="arguments"></param>
        </member>
        <member name="M:DOL.GS.GamePlayer.OnItemUnequipped(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Removes magical bonuses whenever item was unequipped
            </summary>
            <param name="e"></param>
            <param name="sender">inventory</param>
            <param name="arguments"></param>
        </member>
        <member name="M:DOL.GS.GamePlayer.ReceiveItem(DOL.GS.GameLiving,DOL.Database.InventoryItem)">
            <summary>
            Receive an item from another living
            </summary>
            <param name="source"></param>
            <param name="item"></param>
            <returns>true if player took the item</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.DropItem(DOL.GS.eInventorySlot)">
            <summary>
            Called to drop an Item from the Inventory to the floor
            </summary>
            <param name="slot_pos">SlotPosition to drop</param>
            <returns>true if dropped</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.DropItem(DOL.GS.eInventorySlot,DOL.GS.GameInventoryItem@)">
            <summary>
            Called to drop an item from the Inventory to the floor
            and return the GameInventoryItem that is created on the floor
            </summary>
            <param name="slot_pos">SlotPosition to drop</param>
            <param name="droppedItem">out GameItem that was created</param>
            <returns>true if dropped</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.CreateItemOnTheGround(DOL.Database.InventoryItem)">
            <summary>
            called to make an item on the ground with owner is player
            </summary>
            <param name="item">the item to create on the ground</param>
            <returns>the GameInventoryItem on the ground</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.PickupObject(DOL.GS.GameObject)">
            <summary>
            Called when the player picks up an item from the ground
            </summary>
            <param name="floorObject">GameItem on the floor</param>
            <returns>true if picked up</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.SaveSkillsToCharacter">
            <summary>
            Saves the player's skills
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.LoadSkillsFromCharacter">
            <summary>
            Loads the Skills from the Character
            Called after the default skills / level have been set!
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.LoadFromDatabase(DOL.Database.DataObject)">
            <summary>
            Loads this player from a character table slot
            </summary>
            <param name="obj">DOLCharacter</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.SaveIntoDatabase">
            <summary>
            Save the player into the database
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_customDialogCallback">
            <summary>
            Holds the delegates that calls
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetPronoun(System.Int32,System.Boolean)">
            <summary>
            Pronoun of this player in case you need to refer it in 3rd person
            http://webster.commnet.edu/grammar/cases.htm
            </summary>
            <param name="firstLetterUppercase"></param>
            <param name="form">0=Subjective, 1=Possessive, 2=Objective</param>
            <returns>pronoun of this object</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetExamineMessages(DOL.GS.GamePlayer)">
            <summary>
            Adds messages to ArrayList which are sent when object is targeted
            </summary>
            <param name="player">GamePlayer that is examining this object</param>
            <returns>list with string messages</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_stealthEffect">
            <summary>
            Holds the stealth effect
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.Stealth(System.Boolean)">
            <summary>
            Set player's stealth state
            </summary>
            <param name="newState">stealth state</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.UncoverLOSHandler(DOL.GS.GamePlayer,System.UInt16,System.UInt16)">
            <summary>
            This handler is called by the unstealth check of mobs
            </summary>   
        </member>
        <member name="M:DOL.GS.GamePlayer.CanDetect(DOL.GS.GamePlayer)">
            <summary>
            Checks whether this player can detect stealthed enemy
            </summary>
            <param name="enemy"></param>
            <returns>true if enemy can be detected</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_task">
            <summary>
            Holding tasks of player
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_questList">
            <summary>
            Holds all the quests currently active on this player
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_questListFinished">
            <summary>
            Holds all already finished quests off this player
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.AddQuest(DOL.GS.Quests.AbstractQuest)">
            <summary>
            Adds a quest to the players questlist
            </summary>
            <param name="quest">The quest to add</param>
            <returns>true if added, false if player is already doing the quest!</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.HasFinishedQuest(System.Type)">
            <summary>
            Checks if a player has done a specific quest
            </summary>
            <param name="questType">The quest type</param>
            <returns>the number of times the player did this quest</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.IsDoingQuest(System.Type)">
            <summary>
            Checks if this player is currently doing the specified quest
            </summary>
            <param name="questType">The quest type</param>
            <returns>the quest if player is doing the quest or null if not</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.craftingSkills">
            <summary>
            Store all player crafting skill and their value (eCraftingSkill => Value)
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_craftingPrimarySkill">
            <summary>
            Store the player primary crafting skill
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.GetCraftingSkillValue(DOL.GS.eCraftingSkill)">
            <summary>
            Get the specified player crafting skill value
            </summary>
            <param name="skill">The crafting skill to get value</param>
            <returns>the level in the specified crafting if valid and -1 if not</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.GainCraftingSkill(DOL.GS.eCraftingSkill,System.Int32)">
            <summary>
            Increase the specified player crafting skill
            </summary>
            <param name="skill">Crafting skill to increase</param>
            <param name="count">How much increase or decrase</param>
            <returns>true if the skill is valid and -1 if not</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.AddCraftingSkill(DOL.GS.eCraftingSkill,System.Int32)">
            <summary>
            Add a new crafting skill to the player
            </summary>
            <param name="skill">the crafting skill to add</param>
            <returns>true if the skill correctly added and false if not</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_crafttimer">
            <summary>
            This is the timer used to count time when a player craft
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.SaveCraftingSkills">
            <summary>
            This function save all player crafting skill in the db
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.LoadCraftingSkills">
            <summary>
            This function load all player crafting skill from the db
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.CraftItem(System.UInt16)">
            <summary>
            This function is called each time a player try to make a item
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.SalvageItem(DOL.Database.InventoryItem)">
            <summary>
            This function is called each time a player try to salvage a item
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.RepairItem(DOL.Database.InventoryItem)">
            <summary>
            This function is called each time a player try to repair a item
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_housingUpdateArray">
            <summary>
            Holds the houses that need a update
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.LeaveHouse">
            <summary>
            Jumps the player out of the house he is in
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_tradeWindow">
            <summary>
            Holds the trade window object
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.OpenTrade(DOL.GS.GamePlayer)">
            <summary>
            Opens the trade between two players
            </summary>
            <param name="tradePartner">GamePlayer to trade with</param>
            <returns>true if trade has started</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.OpenSelfCraft(DOL.Database.InventoryItem)">
            <summary>
            Opens the trade between two players
            </summary>
            <param name="item">The item to spell craft</param>
            <returns>true if trade has started</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_controlledNpc">
            <summary>
            Holds the controlled object
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.SetControlledNpc(DOL.AI.Brain.IControlledBrain)">
            <summary>
            Sets the controlled object for this player
            </summary>
            <param name="controlledNpc"></param>
        </member>
        <member name="M:DOL.GS.GamePlayer.CheckControlledNpc(DOL.AI.Brain.IControlledBrain)">
            <summary>
            Checks if player controls a brain and send any needed messages
            </summary>
            <param name="npc">The Npc from local var to avoid changes but other threads</param>
            <returns>success</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.CommandNpcAttack">
            <summary>
            Commands controlled object to attack
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.CommandNpcRelease">
            <summary>
            Releases controlled object
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.CommandNpcFollow">
            <summary>
            Commands controlled object to follow
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.CommandNpcStay">
            <summary>
            Commands controlled object to stay where it is
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.CommandNpcComeHere">
            <summary>
            Commands controlled object to go to players location
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.CommandNpcGoTarget">
            <summary>
            Commands controlled object to go to target
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.CommandNpcPassive">
            <summary>
            Changes controlled object state to passive
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.CommandNpcAgressive">
            <summary>
            Changes controlled object state to aggressive
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.CommandNpcDefensive">
            <summary>
            Changes controlled object state to defensive
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_ShadeEffect">
            <summary>
            The shade effect of this player
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.Shade(System.Boolean)">
            <summary>
            Changes shade state of the player
            </summary>
            <param name="state">The new state</param>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_pvpInvulnerabilityTimer">
            <summary>
            Holds the invulnerability timer
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_pvpInvulnerabilityTick">
            <summary>
            Holds the invulnerability expiration tick
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.SetPvPInvulnerability(System.Int32,DOL.GS.GamePlayer.InvulnerabilityExpiredCallback)">
            <summary>
            Sets the PvP invulnerability
            </summary>
            <param name="duration">The invulnerability duration in milliseconds</param>
            <param name="callback">
            The callback for when invulnerability expires;
            not guaranteed to be called if overwriten by another invulnerability
            </param>
            <returns>true if invulnerability was set (smaller than old invulnerability)</returns>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_titles">
            <summary>
            Holds all players titles.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_currentTitle">
            <summary>
            Holds current selected title.
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.AddTitle(DOL.GS.PlayerTitles.IPlayerTitle)">
            <summary>
            Adds the title to player.
            </summary>
            <param name="title">The title to add.</param>
            <returns>true if added.</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.RemoveTitle(DOL.GS.PlayerTitles.IPlayerTitle)">
            <summary>
            Removes the title from player.
            </summary>
            <param name="title">The title to remove.</param>
            <returns>true if removed.</returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.UpdateCurrentTitle">
            <summary>
            Updates player's current title to him and everyone around.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_killsAlbionPlayers">
            <summary>
            Stores the count of albion players killed.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_killsMidgardPlayers">
            <summary>
            Stores the count of midgard players killed.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_killsHiberniaPlayers">
            <summary>
            Stores the count of hibernia players killed.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_killsAlbionDeathBlows">
            <summary>
            Stores the count of death blows on albion players.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_killsMidgardDeathBlows">
            <summary>
            Stores the count of death blows on midgard players.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_killsHiberniaDeathBlows">
            <summary>
            Stores the count of death blows on hibernia players.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_killsAlbionSolo">
            <summary>
            Stores the count of killed solo albion players.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_killsMidgardSolo">
            <summary>
            Stores the count of killed solo midgard players.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_killsHiberniaSolo">
            <summary>
            Stores the count of killed solo hibernia players.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_capturedKeeps">
            <summary>
            Stores the count of captured keeps.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.m_capturedTowers">
            <summary>
            Stores the count of captured towers.
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.ToString">
            <summary>
            Returns the string representation of the GamePlayer
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GamePlayer.#ctor(DOL.GS.GameClient,DOL.Database.Character)">
            <summary>
            Creates a new player
            </summary>
            <param name="client">The GameClient for this player</param>
            <param name="theChar">The character for this player</param>
        </member>
        <member name="P:DOL.GS.GamePlayer.TargetInView">
            <summary>
            Gets or sets the targetObject's visibility
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.GroundTargetInView">
            <summary>
            Gets or sets the GroundTargetObject's visibility
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.CurrentUpdateArray">
            <summary>
            Returns the Object update array that was used the last time
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.NewUpdateArray">
            <summary>
            Returns the Object update array that will be used next time
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Client">
            <summary>
            Returns the GameClient of this Player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Out">
            <summary>
            Returns the PacketSender for this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.PlayerCharacter">
            <summary>
            The character the player is based on
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.EnteredGame">
            <summary>
            Has this player entered the game for the first
            time after logging on (not Zoning!)
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsAnonymous">
            <summary>
            Gets or sets the anonymous flag for this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.GainXP">
            <summary>
            Gets or sets the gain XP flag for this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.GainRP">
            <summary>
            Gets or sets the gain RP flag for this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.QuitTime">
            <summary>
            Gets the amount of time the player must wait before quit, in seconds
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.LastNPCUpdate">
            <summary>
            The last time we did update the NPCs around us
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.ReleaseType">
            <summary>
            Gets the player's current release type.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.PrayState">
            <summary>
            Gets the praying-state of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.LastName">
            <summary>
            The lastname of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.GuildName">
            <summary>
            Gets or sets the guildname of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Name">
            <summary>
            Gets or sets the name of the player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Model">
            <summary>
            Sets or gets the model of the player. If the player is
            active in the world, the modelchange will be visible
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.TotalConstitutionLostAtDeath">
            <summary>
            Gets/sets the player efficacy percent
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Constitution">
            <summary>
            Gets player's constitution
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Dexterity">
            <summary>
            Gets player's dexterity
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Strength">
            <summary>
            Gets player's strength
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Quickness">
            <summary>
            Gets player's quickness
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Intelligence">
            <summary>
            Gets player's intelligence
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Piety">
            <summary>
            Gets player's piety
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Empathy">
            <summary>
            Gets player's empathy
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Charisma">
            <summary>
            Gets player's charisma
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Health">
            <summary>
            Gets/sets the object health
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.MaxHealth">
            <summary>
            Gets/sets the object max health
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Mana">
            <summary>
            Gets/sets the object mana
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.MaxMana">
            <summary>
            Gets/sets the object max mana
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Endurance">
            <summary>
            Gets/sets the object endurance
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.MaxEndurance">
            <summary>
            Gets/sets the objects maximum endurance
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Concentration">
            <summary>
            Gets the concentration left
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.MaxConcentration">
            <summary>
            Gets the maximum concentration for this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.RaceName">
            <summary>
            Gets/sets the player's race name
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Race">
            <summary>
            Gets or sets this player's race id
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.CharacterClass">
            <summary>
            Gets the player's character class
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.RespecAmountAllSkill">
            <summary>
            Gets/Sets amount of full skill respecs
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.RespecAmountSingleSkill">
            <summary>
            Gets/Sets amount of single-line respecs
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.RespecAmountRealmSkill">
            <summary>
            Gets/Sets amount of realm skill respecs
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsLevelRespecUsed">
            <summary>
            Gets/Sets level respec usage flag
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.CanUseLefthandedWeapon">
            <summary>
            Checks whether Living has ability to use lefthanded weapons
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.PlayerEffectiveness">
            <summary>
            get / set the player's effectiveness.
            Effectiveness is used in physical/magic damage (exept dot), in weapon skill and max concentration
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.BountyPoints">
            <summary>
            Gets/sets player bounty points
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.RealmPoints">
            <summary>
            Gets/sets player realm points
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.SkillSpecialtyPoints">
            <summary>
            Gets/sets player skill specialty points
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.RealmSpecialtyPoints">
            <summary>
            Gets/sets player realm specialty points
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.RealmLevel">
            <summary>
            Gets/sets player realm rank
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.RealmTitle">
            <summary>
            Gets player realm rank name
            sirru mod 20.11.06
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.RealmPointsValue">
            <summary>
            Realm point value of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.BountyPointsValue">
            <summary>
            Bounty point value of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Experience">
            <summary>
            Gets or sets the current xp of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.ExperienceForNextLevel">
            <summary>
            Returns the xp that are needed for the next level
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.ExperienceForCurrentLevel">
            <summary>
            Returns the xp that were needed for the current level
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.ExperienceForCurrentLevelSecondStage">
            <summary>
            Returns the xp that is needed for the second stage of current level
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.LevelPermill">
            <summary>
            Returns how far into the level we have progressed
            A value between 0 and 1000 (1 bubble = 100)
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Level">
            <summary>
            Gets or sets the level of the player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsLevelSecondStage">
            <summary>
            Is this player in second stage of current level
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.NextCombatStyle">
            <summary>
            Gets or Sets the next combat style to use
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.NextCombatBackupStyle">
            <summary>
            Gets or Sets the next combat backup style to use
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.CancelStyle">
            <summary>
            Gets or Sets the cancel style flag
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.SafetyFlag">
            <summary>
            Gets/Sets safety flag
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsCloakHoodUp">
            <summary>
            Sets/gets the living's cloak hood state
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.SpellQueue">
            <summary>
            Gets or sets the players SpellQueue option
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.RangeAttackAmmo">
            <summary>
            Gets/Sets the item that is used for ranged attack
            </summary>
            <returns>Item that will be used for range/accuracy/damage modifications</returns>
        </member>
        <member name="P:DOL.GS.GamePlayer.RangeAttackTarget">
            <summary>
            Gets/Sets the target for current ranged attack
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.GS.GamePlayer.EffectiveOverallAF">
            <summary>
            Gets the effective AF of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.DisplayedWeaponSkill">
            <summary>
            Weaponskill thats shown to the player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.AttackRange">
            <summary>
            Returns the AttackRange of this living
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.LastDeathRealmPoints">
            <summary>
            Gets/sets the amount of realm points gained by other players on last death
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.InCombat">
            <summary>
            Check this flag to see wether this living is involved in combat
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.DuelTarget">
            <summary>
            Gets the duel target of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.DisabledCastingTimeout">
            <summary>
            Time when casting is allowed again (after interrupt from enemy attack)
            </summary>
        </member>
        <member name="E:DOL.GS.GamePlayer.OnSendReceive">
            <summary>
            Event that is fired when the Player receives a Send text
            </summary>
        </member>
        <member name="E:DOL.GS.GamePlayer.OnSend">
            <summary>
            Event that is fired when the Player is about to send a text
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Steed">
            <summary>
            Holds the Steed of this player
            </summary>
        </member>
        <member name="E:DOL.GS.GamePlayer.OnMountSteed">
            <summary>
            Event will be fired whenever the player tries to
            mount a steed
            </summary>
        </member>
        <member name="E:DOL.GS.GamePlayer.OnDismountSteed">
            <summary>
            Event will be fired whenever the player tries to dismount
            from a steed
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsRiding">
            <summary>
            Returns if the player is riding or not
            </summary>
            <returns>true if on a steed, false if not</returns>
        </member>
        <member name="P:DOL.GS.GamePlayer.Guild">
            <summary>
            Gets or sets the player's guild
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.GuildRank">
            <summary>
            Gets or sets the player's guild rank
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.GuildNameFlag">
            <summary>
            Gets or sets the player's guild flag
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.PlayerGroup">
            <summary>
            Gets or sets the player's group
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.PlayerGroupIndex">
            <summary>
            Gets or sets the index of this player inside of the group
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.LookingForGroup">
            <summary>
            Gets or sets the LookingForGroup flag in this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.AutoSplitLoot">
            <summary>
            Gets/sets the autosplit for loot
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Friends">
            <summary>
            Gets or sets the friends of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.AreaUpdateTick">
            <summary>
            Gets the tick when the areas should be updated
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.X">
            <summary>
            Gets the current position of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Y">
            <summary>
            Gets the current position of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Z">
            <summary>
            Gets the current position of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.CurrentSpeed">
            <summary>
            Gets or sets the current speed of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.CurrentRegion">
            <summary>
            Gets or sets the region of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.LastPositionUpdateZone">
            <summary>
            Gets or sets the zone after last position update
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.MaxLastZ">
            <summary>
            Gets or sets the players max Z for fall damage
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Realm">
            <summary>
            Gets or sets the realm of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Heading">
            <summary>
            Gets or sets the heading of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsClimbing">
            <summary>
            Gets/sets the current diving state
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Stuck">
            <summary>
            Gets/sets the current stuck state
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsDiving">
            <summary>
            Gets/sets the current diving state
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsSitting">
            <summary>
            Gets/sets the current sit state
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.MaxSpeedBase">
            <summary>
            Gets or sets the max speed of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsMoving">
            <summary>
            the moving state of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsSprinting">
            <summary>
            Gets sprinting flag
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsStrafing">
            <summary>
            Gets/sets the current strafing mode
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.LastUniqueLocations">
            <summary>
            Gets unique locations array
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.MaxEncumberance">
            <summary>
            Gets the total possible Encumberance
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Encumberance">
            <summary>
            Gets the current Encumberance
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsOverencumbered">
            <summary>
            Gets/Set the players Encumberance state
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.PlayedTime">
            <summary>
            Subtracts the current time from the last time the character was saved
            and adds it in the form of seconds to player.PlayedTime
            for the /played command.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.CustomDialogCallback">
            <summary>
            Gets/sets the custom dialog callback
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsStealthed">
            <summary>
            The stealth state of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Task">
            <summary>
            Gets the tasklist of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Mission">
            <summary>
            Gets the personal mission
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.QuestList">
            <summary>
            Gets the questlist of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.QuestListFinished">
            <summary>
            Gets the questlist of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.CraftingSkills">
            <summary>
            Get all player crafting skill and their value
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.CraftingPrimarySkill">
            <summary>
            Store the player primary crafting skill
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.CraftTimer">
            <summary>
            Get and set the craft timer
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsCrafting">
            <summary>
            Does the player is crafting
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.CraftTitle">
            <summary>
            Get the craft title string of the player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.HousingUpdateArray">
            <summary>
            Returns the Housing Update Array
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.TradeWindow">
            <summary>
            Gets or sets the player trade windows
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.ControlledNpc">
            <summary>
            Gets the controlled object of this player
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsShade">
            <summary>
            Gets flag indication whether player is in shade mode
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsPvPInvulnerability">
            <summary>
            True if player is invulnerable to PvP attacks
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.Titles">
            <summary>
            Gets all player's titles.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.CurrentTitle">
            <summary>
            Gets/sets currently selected/active player title.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.KillsAlbionPlayers">
            <summary>
            Gets or sets the count of albion players killed.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.KillsMidgardPlayers">
            <summary>
            Gets or sets the count of midgard players killed.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.KillsHiberniaPlayers">
            <summary>
            Gets or sets the count of hibernia players killed.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.KillsAlbionDeathBlows">
            <summary>
            Gets or sets the count of death blows on albion players.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.KillsMidgardDeathBlows">
            <summary>
            Gets or sets the count of death blows on midgard players.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.KillsHiberniaDeathBlows">
            <summary>
            Gets or sets the count of death blows on hibernia players.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.KillsAlbionSolo">
            <summary>
            Gets or sets the count of killed solo albion players.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.KillsMidgardSolo">
            <summary>
            Gets or sets the count of killed solo midgard players.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.KillsHiberniaSolo">
            <summary>
            Gets or sets the count of killed solo hibernia players.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.CapturedKeeps">
            <summary>
            Gets or sets the count of captured keeps.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.CapturedTowers">
            <summary>
            Gets or sets the count of captured towers.
            </summary>
        </member>
        <member name="P:DOL.GS.GamePlayer.IsCarryingGuildBanner">
            <summary>
            Gets/Sets the visibility of the carryable RvrGuildBanner. Wont work if the player has no guild.
            </summary>
        </member>
        <member name="T:DOL.GS.GamePlayer.eReleaseType">
            <summary>
            The current after-death player release type
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.eReleaseType.Normal">
            <summary>
            Normal release to the bind point using /release command and 10sec delay after death
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.eReleaseType.City">
            <summary>
            Release to the players home city
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.eReleaseType.Duel">
            <summary>
            Release to the current location
            </summary>
        </member>
        <member name="T:DOL.GS.GamePlayer.PrayAction">
            <summary>
            The timed pray action
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.PrayAction.m_gravestone">
            <summary>
            The gravestone player is plraying at
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.PrayAction.#ctor(DOL.GS.GamePlayer,DOL.GS.GameGravestone)">
            <summary>
            Constructs a new pray action
            </summary>
            <param name="actionSource">The action source</param>
            <param name="grave">The pray grave stone</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.PrayAction.OnTick">
            <summary>
            Callback method for the pray-timer
            </summary>
        </member>
        <member name="T:DOL.GS.GamePlayer.SendReceiveHandler">
            <summary>
            Delegate to be called when this player receives a text
            by someone sending something
            </summary>
        </member>
        <member name="T:DOL.GS.GamePlayer.SendHandler">
            <summary>
            Delegate to be called when this player is about to send a text
            </summary>
        </member>
        <member name="T:DOL.GS.GamePlayer.MountSteedHandler">
            <summary>
            Delegate callback to be called when the player
            tries to mount a steed
            </summary>
        </member>
        <member name="T:DOL.GS.GamePlayer.DismountSteedHandler">
            <summary>
            Delegate callback to be called whenever the player tries
            to dismount from a steed
            </summary>
        </member>
        <member name="T:DOL.GS.GamePlayer.UncoverStealthAction">
            <summary>
            Uncovers the player if a mob is too close
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.UncoverStealthAction.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new uncover stealth action
            </summary>
            <param name="actionSource">The action source</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.UncoverStealthAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.GamePlayer.InvulnerabilityExpiredCallback">
            <summary>
            The delegate for invulnerability expire callbacks
            </summary>
        </member>
        <member name="T:DOL.GS.GamePlayer.InvulnerabilityTimer">
            <summary>
            The timer to call invulnerability expired callbacks
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.InvulnerabilityTimer.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GamePlayer.InvulnerabilityTimer.m_callback">
            <summary>
            Holds the callback
            </summary>
        </member>
        <member name="M:DOL.GS.GamePlayer.InvulnerabilityTimer.#ctor(DOL.GS.GamePlayer,DOL.GS.GamePlayer.InvulnerabilityExpiredCallback)">
            <summary>
            Constructs a new InvulnerabilityTimer
            </summary>
            <param name="actionSource">The action source</param>
        </member>
        <member name="M:DOL.GS.GamePlayer.InvulnerabilityTimer.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.GameInventoryItem">
            <summary>
            This class represents an inventory item when it is
            laying on the floor in the world! It is just a wraper
            class around InventoryItem
            </summary>
        </member>
        <member name="F:DOL.GS.GameInventoryItem.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.GameInventoryItem.m_item">
            <summary>
            The InventoryItem that is contained within
            </summary>
        </member>
        <member name="M:DOL.GS.GameInventoryItem.#ctor">
            <summary>
            Constructs an empty GameInventoryItem
            that will disappear from the world after 3 minutes
            </summary>
        </member>
        <member name="M:DOL.GS.GameInventoryItem.#ctor(DOL.Database.InventoryItem)">
            <summary>
            Constructs a GameInventoryItem based on an
            InventoryItem. Will disappear after 3 minutes if
            added to the world
            </summary>
            <param name="item">the InventoryItem to put into this class</param>
        </member>
        <member name="M:DOL.GS.GameInventoryItem.CreateFromTemplate(DOL.Database.InventoryItem)">
            <summary>
            Creates a new GameInventoryItem based on an
            InventoryTemplateID. Will disappear after 3 minutes if
            added to the world
            </summary>
            <param name="item">The InventoryItem to load and create an item from</param>
            <returns>Found item or null</returns>
        </member>
        <member name="M:DOL.GS.GameInventoryItem.CreateFromTemplate(System.String)">
            <summary>
            Creates a new GameInventoryItem based on an
            InventoryTemplateID. Will disappear after 3 minutes if
            added to the world
            </summary>
            <param name="templateID">the templateID to load and create an item</param>
            <returns>Found item or null</returns>
        </member>
        <member name="P:DOL.GS.GameInventoryItem.Item">
            <summary>
            Gets the InventoryItem contained within this class
            </summary>
        </member>
        <member name="T:DOL.Events.KeepEventArgs">
            <summary>
            Holds the arguments for the Keep event
            </summary>
        </member>
        <member name="F:DOL.Events.KeepEventArgs.m_keep">
            <summary>
            The keep
            </summary>
        </member>
        <member name="F:DOL.Events.KeepEventArgs.m_realm">
            <summary>
            The realm
            </summary>
        </member>
        <member name="M:DOL.Events.KeepEventArgs.#ctor(DOL.GS.Keeps.AbstractGameKeep)">
            <summary>
            Constructs a new KeepEventArgs
            </summary>
        </member>
        <member name="P:DOL.Events.KeepEventArgs.Keep">
            <summary>
            Gets the Keep
            </summary>
        </member>
        <member name="P:DOL.Events.KeepEventArgs.Realm">
            <summary>
            Gets the Realm
            </summary>
        </member>
        <member name="T:DOL.Events.TurnToEventArgs">
            <summary>
            Holds the arguments for the TurnTo event of GameNPC
            </summary>
        </member>
        <member name="M:DOL.Events.TurnToEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new TurnToEventArgs
            </summary>
            <param name="x">the target x</param>
            <param name="y">the target y</param>
        </member>
        <member name="P:DOL.Events.TurnToEventArgs.X">
            <summary>
            Gets the target X
            </summary>
        </member>
        <member name="P:DOL.Events.TurnToEventArgs.Y">
            <summary>
            Gets the target Y
            </summary>
        </member>
        <member name="T:DOL.Events.TimerEventArgs">
            <summary>
            Holds the arguments for the Timer event of GameObjects
            </summary>
        </member>
        <member name="M:DOL.Events.TimerEventArgs.#ctor(DOL.GS.GameLiving,System.String)">
            <summary>
            Constructs a new TimerEventArgs
            </summary>
            <param name="text">the text being said</param>
        </member>
        <member name="P:DOL.Events.TimerEventArgs.TimerID">
            <summary>
            Gets the id of timer
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.InterceptEffect">
            <summary>
            The helper class for the intercept ability
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.InterceptEffect.m_interceptSource">
            <summary>
            Holds the interceptor
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.InterceptEffect.m_interceptTarget">
            <summary>
            Reference to gameplayer that is protecting this player with intercept
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.InterceptEffect.m_group">
            <summary>
            Holds the interceptor/intercepted group
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.InterceptEffect.#ctor">
            <summary>
            Creates a new intercept effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.InterceptEffect.Start(DOL.GS.GameLiving,DOL.GS.GameLiving)">
            <summary>
            Start the intercepting on player
            </summary>
            <param name="interceptor">The interceptor</param>
            <param name="intercepted">The intercepted</param>
        </member>
        <member name="M:DOL.GS.Effects.InterceptEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect must be canceled
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.InterceptEffect.GroupDisbandCallback(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Cancels effect if interceptor or intercepted leaves the group
            </summary>
            <param name="e"></param>
            <param name="sender">The group</param>
            <param name="args"></param>
        </member>
        <member name="F:DOL.GS.Effects.InterceptEffect.m_id">
            <summary>
            Holds unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.InterceptEffect.InterceptSource">
            <summary>
            Gets the interceptor
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.InterceptEffect.InterceptTarget">
            <summary>
            Gets the intercepted
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.InterceptEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.InterceptEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.InterceptEffect.Icon">
            <summary>
            Icon to show on players, can be id
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.InterceptEffect.InternalID">
            <summary>
            Gets or Sets unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.InterceptEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.DatabaseConverters.DatabaseConverterAttribute">
            <summary>
            Attribute that denotes a class as a database converter
            from previous version to the specified in attribute
            </summary>
        </member>
        <member name="M:DOL.GS.DatabaseConverters.DatabaseConverterAttribute.#ctor(System.Int32)">
            <summary>
            Constructs new attribute for database converter classes
            </summary>
            <param name="targetVersion">Target database version after convertion</param>
        </member>
        <member name="T:DOL.GS.WeaponCrafting">
            <summary>
            Crafting skill to make weapon
            </summary>
        </member>
        <member name="M:DOL.GS.WeaponCrafting.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.WeaponCrafting.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.WeaponCrafting.CalculateSecondCraftingSkillMinimumLevel(DOL.Database.DBCraftedItem)">
            <summary>
            Calculate the minumum needed secondary crafting skill level to make the item
            </summary>
        </member>
        <member name="M:DOL.GS.WeaponCrafting.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="T:DOL.GS.Trainer.SpiritmasterTrainer">
            <summary>
            Spiritmaster Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.SpiritmasterTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.SpiritmasterTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.SpiritmasterTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.StalkerTrainer">
            <summary>
            Stalker Trainer
            </summary>	
        </member>
        <member name="F:DOL.GS.Trainer.StalkerTrainer.PRACTICE_WEAPON_ID">
            <summary>
            The practice weaopon template ID
            </summary>
        </member>
        <member name="M:DOL.GS.Trainer.StalkerTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.StalkerTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.NaturalistTrainer">
            <summary>
            Naturalist Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.NaturalistTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.NaturalistTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.MentalistTrainer">
            <summary>
            Mentalist Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.MentalistTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.MentalistTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks whether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.MentalistTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Trainer.HereticTrainer">
            <summary>
            Heretic Trainer
            </summary>	
        </member>
        <member name="M:DOL.GS.Trainer.HereticTrainer.Interact(DOL.GS.GamePlayer)">
            <summary>
            Interact with trainer
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.HereticTrainer.CanPromotePlayer(DOL.GS.GamePlayer)">
            <summary>
            checks wether a player can be promoted or not
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Trainer.HereticTrainer.WhisperReceive(DOL.GS.GameLiving,System.String)">
            <summary>
            Talk to trainer
            </summary>
            <param name="source"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.Spells.SummonSpellHandler">
             <summary>
             Pet summon spell handler
             
             Spell.LifeDrainReturn is used for pet ID.
            
             Spell.Value is used for hard pet level cap
             Spell.Damage is used to set pet level:
             less than zero is considered as a percent (0 .. 100+) of target level;
             higher than zero is considered as level value.
             Resulting value is limited by the Byte field type.
             </summary>
        </member>
        <member name="M:DOL.GS.Spells.SummonSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            called after normal spell cast is completed and effect has to be started
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.SummonSpellHandler.CheckBeginCast(DOL.GS.GameLiving)">
            <summary>
            All checks before any casting begins
            </summary>
            <param name="selectedTarget"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.Spells.SummonSpellHandler.ApplyEffectOnTarget(DOL.GS.GameLiving,System.Double)">
            <summary>
            Apply effect on target or do spell action if non duration spell
            </summary>
            <param name="target">target that gets the effect</param>
            <param name="effectiveness">factor from 0..1 (0%-100%)</param>
        </member>
        <member name="M:DOL.GS.Spells.SummonSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.SummonSpellHandler.OnNpcReleaseCommand(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Called when owner release NPC
            </summary>
            <param name="e"></param>
            <param name="sender"></param>
            <param name="arguments"></param>
        </member>
        <member name="P:DOL.GS.Spells.SummonSpellHandler.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.Spells.LifeTransferSpellHandler">
            <summary>
            Based on HealSpellHandler.cs
            Spell calculates a percentage of the caster's health.
            Heals target for the full amount, Caster loses half that amount in health.
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.LifeTransferSpellHandler.StartSpell(DOL.GS.GameLiving)">
            <summary>
            Execute lifetransfer spell
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.LifeTransferSpellHandler.HealTarget(DOL.GS.GameLiving,System.Int32)">
            <summary>
            Heals hit points of one target and sends needed messages, no spell effects
            </summary>
            <param name="target"></param>
            <param name="amount">amount of hit points to heal</param>
            <returns>true if heal was done</returns>
        </member>
        <member name="T:DOL.GS.Spells.DiseaseSpellHandler">
            <summary>
            Disease always debuffs the target by 7.5% movement
            and 15% total hit points, and prevents health regeneration.
            http://www.camelotherald.com/article.php?id=63
            Here they say hit points but spell description states that
            it is strength, what should I use hmm...
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.DiseaseSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            called after normal spell cast is completed and effect has to be started
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.DiseaseSpellHandler.OnEffectStart(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            When an applied effect starts
            duration spells only
            </summary>
            <param name="effect"></param>
        </member>
        <member name="M:DOL.GS.Spells.DiseaseSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.DiseaseSpellHandler.CalculateEffectDuration(DOL.GS.GameLiving,System.Double)">
            <summary>
            Calculates the effect duration in milliseconds
            </summary>
            <param name="target">The effect target</param>
            <param name="effectiveness">The effect effectiveness</param>
            <returns>The effect duration in milliseconds</returns>
        </member>
        <member name="M:DOL.GS.Spells.DiseaseSpellHandler.SendUpdates(DOL.GS.Effects.GameSpellEffect)">
            <summary>
            Sends needed updates on start/stop
            </summary>
            <param name="effect"></param>
        </member>
        <member name="T:DOL.GS.Spells.BladeturnSpellHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.BladeturnSpellHandler.FinishSpellCast(DOL.GS.GameLiving)">
            <summary>
            Execute buff spell
            </summary>
        </member>
        <member name="M:DOL.GS.Spells.BladeturnSpellHandler.OnEffectExpires(DOL.GS.Effects.GameSpellEffect,System.Boolean)">
            <summary>
            When an applied effect expires.
            Duration spells only.
            </summary>
            <param name="effect">The expired effect</param>
            <param name="noMessages">true, when no messages should be sent to player and surrounding</param>
            <returns>immunity duration in milliseconds</returns>
        </member>
        <member name="T:DOL.GS.RealmAbilities.RAStatEnhancer">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.RealmAbilities.RAStatEnhancer.SendUpdates(DOL.GS.GameLiving)">
            <summary>
            send updates about the changes
            </summary>
            <param name="target"></param>
        </member>
        <member name="T:DOL.GS.PropertyCalc.PropertyCalculatorAttribute">
            <summary>
            Denotes a class as a property calculator. Must also implement IPropertyCalculator.
            </summary>
        </member>
        <member name="F:DOL.GS.PropertyCalc.PropertyCalculatorAttribute.m_min">
            <summary>
            Defines lowest property of calculator properties range
            </summary>
        </member>
        <member name="F:DOL.GS.PropertyCalc.PropertyCalculatorAttribute.m_max">
            <summary>
            Defines highest property of calculator properties range
            </summary>
        </member>
        <member name="M:DOL.GS.PropertyCalc.PropertyCalculatorAttribute.#ctor(DOL.GS.eProperty)">
            <summary>
            Constructs a new calculator attribute for just one property
            </summary>
            <param name="prop">The property calculator is assigned to</param>
        </member>
        <member name="M:DOL.GS.PropertyCalc.PropertyCalculatorAttribute.#ctor(DOL.GS.eProperty,DOL.GS.eProperty)">
            <summary>
            Constructs a new calculator attribute for range of properties
            </summary>
            <param name="min">The lowest property in range</param>
            <param name="max">The highest property in range</param>
        </member>
        <member name="P:DOL.GS.PropertyCalc.PropertyCalculatorAttribute.Min">
            <summary>
            Gets the lowest property of calculator properties range
            </summary>
        </member>
        <member name="P:DOL.GS.PropertyCalc.PropertyCalculatorAttribute.Max">
            <summary>
            Gets the highest property of calculator properties range
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.MaxSpeedCalculator">
            <summary>
            The Max Speed calculator
            
            BuffBonusCategory1 unused
            BuffBonusCategory2 unused
            BuffBonusCategory3 unused
            BuffBonusCategory4 unused
            BuffBonusMultCategory1 used for all multiplicative speed bonuses
            </summary>
        </member>
        <member name="T:DOL.GS.PropertyCalc.ArmorFactorCalculator">
             <summary>
             The Armor Factor calculator
            
             BuffBonusCategory1 is used for base buffs directly in player.GetArmorAF because it must be capped by item AF cap
             BuffBonusCategory2 is used for spec buffs, level*1.875 cap for players
             BuffBonusCategory3 is used for debuff, uncapped
             BuffBonusCategory4 is used for buffs, uncapped
             BuffBonusMultCategory1 unused
             ItemBonus is used for players TOA bonuse, living.Level cap
             </summary>
        </member>
        <member name="T:DOL.GS.PlayerTitles.EventPlayerTitle">
            <summary>
            Base abstract class for typical player titles based on events.
            </summary>
        </member>
        <member name="M:DOL.GS.PlayerTitles.EventPlayerTitle.#ctor">
            <summary>
            Constructs a new EventPlayerTitle instance.
            </summary>
        </member>
        <member name="M:DOL.GS.PlayerTitles.EventPlayerTitle.EventCallback(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            The event callback.
            </summary>
            <param name="e">The event fired.</param>
            <param name="sender">The event sender.</param>
            <param name="arguments">The event arguments.</param>
        </member>
        <member name="P:DOL.GS.PlayerTitles.EventPlayerTitle.Event">
            <summary>
            The event to hook.
            </summary>
        </member>
        <member name="T:DOL.GS.Scripts.ClassDruid">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassDruid.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.Scripts.ClassChampion">
            <summary>
            
            </summary>
        </member>
        <member name="M:DOL.GS.Scripts.ClassChampion.OnLevelUp(DOL.GS.GamePlayer)">
            <summary>
            Update all skills and add new for current level
            </summary>
            <param name="player"></param>
        </member>
        <member name="T:DOL.GS.PlayerClassAttribute">
            <summary>
            Denotes a class as a DOL Character class
            </summary>
        </member>
        <member name="T:DOL.GS.eClassType">
            <summary>
            The type of character class
            </summary>
        </member>
        <member name="F:DOL.GS.eClassType.ListCaster">
            <summary>
            The class has access to all spells
            </summary>
        </member>
        <member name="F:DOL.GS.eClassType.Hybrid">
            <summary>
            The class has access to best one or two spells
            </summary>
        </member>
        <member name="F:DOL.GS.eClassType.PureTank">
            <summary>
            The class has no spells
            </summary>
        </member>
        <member name="T:DOL.GS.DefaultCharacterClass">
            <summary>
            Usable default Character Class, if not other can be found or used
            just for getting things valid in problematic situations
            </summary>
        </member>
        <member name="T:DOL.GS.LootList">
            <summary>
            List containing all possible candidates for loot drop
            </summary>
        </member>
        <member name="F:DOL.GS.LootList.m_randomItemDrops">
            <summary>
            m_dropCount items will be chosen from randomitemdrops list depending on their chance, to drop for mob loot
            </summary>
        </member>
        <member name="F:DOL.GS.LootList.m_fixedItemDrops">
            <summary>
            Items in fixed drop list will ALWAYS drop for mob loot
            </summary>
        </member>
        <member name="M:DOL.GS.LootList.AddFixed(DOL.Database.ItemTemplate)">
            <summary>
            Adds a dbloottemplate to list of fixed drops
            </summary>
            <param name="loot"></param>
        </member>
        <member name="M:DOL.GS.LootList.AddAll(DOL.GS.LootList)">
            <summary>
            Merges two list into one big list, containing items of both and having the bigger dropCount
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:DOL.GS.LootList.GetLoot">
            <summary>
            Returns a list of ItemTemplates chosen from Random and Fixed loot.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.LootEntry">
            <summary>
            Container class for entries in the randomdroplist
            </summary>
        </member>
        <member name="T:DOL.GS.RealmAbilities.FalconsEyeAbility">
            <summary>
            Falcons Eye RA
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.SpeedOfSoundEffect">
            <summary>
            Effect handler for Barrier Of Fortitude
            </summary> 
        </member>
        <member name="M:DOL.GS.Effects.SpeedOfSoundEffect.#ctor">
            <summary>
            Default constructor for AmelioratingMelodiesEffect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.SpeedOfSoundEffect.Start(DOL.GS.GamePlayer,System.Int32,System.Int32)">
            <summary>
            Called when effect is to be started
            </summary>
            <param name="player">The player to start the effect for</param>
            <param name="duration">The effectduration in secounds</param>
            <param name="value">The percentage additional value for melee absorb</param>
        </member>
        <member name="M:DOL.GS.Effects.SpeedOfSoundEffect.PlayerLeftWorld(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Called when a player leaves the game
            </summary>
            <param name="e">The event which was raised</param>
            <param name="sender">Sender of the event</param>
            <param name="args">EventArgs associated with the event</param>
        </member>
        <member name="M:DOL.GS.Effects.SpeedOfSoundEffect.AttackFinished(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Called when the effectowner attacked an enemy
            </summary>
            <param name="e">The event which was raised</param>
            <param name="sender">Sender of the event</param>
            <param name="args">EventArgs associated with the event</param>
        </member>
        <member name="M:DOL.GS.Effects.SpeedOfSoundEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect is to be cancelled
            </summary>
            <param name="playerCancel">Whether or not effect is player cancelled</param>
        </member>
        <member name="M:DOL.GS.Effects.SpeedOfSoundEffect.StartTimers">
            <summary>
            Starts the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.SpeedOfSoundEffect.StopTimers">
            <summary>
            Stops the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.SpeedOfSoundEffect.ExpireCallback(DOL.GS.RegionTimer)">
            <summary>
            The callback for when the effect expires
            </summary>
            <param name="timer">The ObjectTimerCallback object</param>
        </member>
        <member name="P:DOL.GS.Effects.SpeedOfSoundEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SpeedOfSoundEffect.RemainingTime">
            <summary>
            Remaining time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SpeedOfSoundEffect.Icon">
            <summary>
            Icon ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SpeedOfSoundEffect.InternalID">
            <summary>
            Unique ID for identification in the effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SpeedOfSoundEffect.DelveInfo">
            <summary>
            Delve information
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.SoldiersBarricadeEffect">
            <summary>
            Effect handler for Barrier Of Fortitude
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.SoldiersBarricadeEffect.#ctor">
            <summary>
            Default constructor for AmelioratingMelodiesEffect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.SoldiersBarricadeEffect.Start(DOL.GS.GamePlayer,System.Int32,System.Int32)">
            <summary>
            Called when effect is to be started
            </summary>
            <param name="player">The player to start the effect for</param>
            <param name="duration">The effectduration in secounds</param>
            <param name="value">The percentage additional value for all magic resis</param>
        </member>
        <member name="M:DOL.GS.Effects.SoldiersBarricadeEffect.PlayerLeftWorld(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Called when a player leaves the game
            </summary>
            <param name="e">The event which was raised</param>
            <param name="sender">Sender of the event</param>
            <param name="args">EventArgs associated with the event</param>
        </member>
        <member name="M:DOL.GS.Effects.SoldiersBarricadeEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect is to be cancelled
            </summary>
            <param name="playerCancel">Whether or not effect is player cancelled</param>
        </member>
        <member name="M:DOL.GS.Effects.SoldiersBarricadeEffect.StartTimers">
            <summary>
            Starts the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.SoldiersBarricadeEffect.StopTimers">
            <summary>
            Stops the timers for this effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.SoldiersBarricadeEffect.ExpireCallback(DOL.GS.RegionTimer)">
            <summary>
            The callback for when the effect expires
            </summary>
            <param name="timer">The ObjectTimerCallback object</param>
        </member>
        <member name="P:DOL.GS.Effects.SoldiersBarricadeEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SoldiersBarricadeEffect.RemainingTime">
            <summary>
            Remaining time of the effect in milliseconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SoldiersBarricadeEffect.Icon">
            <summary>
            Icon ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SoldiersBarricadeEffect.InternalID">
            <summary>
            Unique ID for identification in the effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.SoldiersBarricadeEffect.DelveInfo">
            <summary>
            Delve information
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.UseSpellHandler">
            <summary>
            Handles spell cast requests from client
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.UseSpellHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.UseSpellHandler.UseSpellAction">
            <summary>
            Handles player use spell actions
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.UseSpellHandler.UseSpellAction.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.UseSpellHandler.UseSpellAction.m_flagSpeedData">
            <summary>
            The speed and flags data
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.UseSpellHandler.UseSpellAction.m_spellLevel">
            <summary>
            The used spell level
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.UseSpellHandler.UseSpellAction.m_spellLineIndex">
            <summary>
            The used spell line index
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.UseSpellHandler.UseSpellAction.#ctor(DOL.GS.GamePlayer,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new UseSpellAction
            </summary>
            <param name="actionSource">The action source</param>
            <param name="flagSpeedData">The speed and flags data</param>
            <param name="spellLevel">The used spell level</param>
            <param name="spellLineIndex">The used spell line index</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.UseSpellHandler.UseSpellAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.ObjectUpdateRequestHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.InviteToGroupHandler.HandleGroupInviteAction">
            <summary>
            Handles group invlite actions
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.InviteToGroupHandler.HandleGroupInviteAction.#ctor(DOL.GS.GamePlayer)">
            <summary>
            constructs a new HandleGroupInviteAction
            </summary>
            <param name="actionSource">The action source</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.InviteToGroupHandler.HandleGroupInviteAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.DisbandFromGroupHandler">
            <summary>
            Handles the disband group packet
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.DisbandFromGroupHandler.PlayerDisbandAction">
            <summary>
            Handles players disband actions
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.DisbandFromGroupHandler.PlayerDisbandAction.#ctor(DOL.GS.GamePlayer)">
            <summary>
            Constructs a new PlayerDisbandAction
            </summary>
            <param name="actionSource">The disbanding player</param>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.DisbandFromGroupHandler.PlayerDisbandAction.OnTick">
            <summary>
            Called on every timer tick
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.DetailDisplayHandler">
            <summary>
            delve button shift+i = detail of spell object...
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.DetailDisplayHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.DetailDisplayHandler.WriteClassicWeaponInfos(System.Collections.ArrayList,DOL.Database.ItemTemplate,DOL.GS.GameClient)">
             <summary>
            
            
             Damage Modifiers:
             - X.X Base DPS
             - X.X Clamped DPS
             - XX Weapon Speed
             - XX% Quality
             - XX% Condition
             Damage Type: XXX
            
             Effective Damage:
             - X.X DPS
             </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.DetailDisplayHandler.WriteClassicShieldInfos(System.Collections.ArrayList,DOL.Database.ItemTemplate,DOL.GS.GameClient)">
             <summary>
            
            
             Damage Modifiers (when used with shield styles):
             - X.X Base DPS
             - X.X Clamped DPS
             - XX Shield Speed
             </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.DetailDisplayHandler.WriteClassicArmorInfos(System.Collections.ArrayList,DOL.Database.ItemTemplate,DOL.GS.GameClient)">
             <summary>
            
            
             Armor Modifiers:
             - X.X Base Factor
             - X.X Clamped Factor
             - XX% Absorption
             - XX% Quality
             - XX% Condition
             Damage Type: XXX
            
             Effective Armor:
             - X.X Factor
             </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.CharacterListUpdateRequestHandler.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="T:DOL.GS.PacketHandler.Client.v168.CharacterListUpdateRequestHandler.CheckCharacter">
            <summary>
            Provides methods to handle char creation checks
            </summary>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.CharacterListUpdateRequestHandler.CheckCharacter.IsCharacterValid(DOL.Database.Character)">
            <summary>
            Verify whether created character is valid
            </summary>
            <param name="ch">The character to check</param>
            <returns>True if valid</returns>
        </member>
        <member name="M:DOL.GS.PacketHandler.Client.v168.CharacterListUpdateRequestHandler.CheckCharacter.PointsUsed(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates amount of starting points spent on one stat
            </summary>
            <param name="race">race index in starting stats array</param>
            <param name="statIndex">index of that stat in starting stats array</param>
            <param name="statValue">base+spent points in stat</param>
            <returns></returns>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.CharacterListUpdateRequestHandler.CheckCharacter.STARTING_STATS">
            <summary>
            All possible player races
            </summary>
        </member>
        <member name="F:DOL.GS.PacketHandler.Client.v168.CharacterListUpdateRequestHandler.CheckCharacter.STARTING_CLASSES">
            <summary>
            All possible player starting classes
            </summary>
        </member>
        <member name="M:DOL.GS.GameRelicPad.AddToWorld">
            <summary>
            add the relicpad to world
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameRelicPad.RemoveFromWorld">
            <summary>
            removes the relicpad from the world
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.GS.GameRelicPad.IsMountedHere(DOL.GS.GameRelic)">
            <summary>
            Checks if a GameRelic is mounted at this GameRelicPad
            </summary>
            <param name="Relic"></param>
            <returns></returns>
        </member>
        <member name="T:DOL.GS.GameRelicPad.PadArea">
            <summary>
            Area around the pit that checks if a player brings a GameRelic
            </summary>
        </member>
        <member name="T:DOL.GS.Keeps.SpellMgr">
            <summary>
            Class to deal with spell casting for the guards
            </summary>
        </member>
        <member name="M:DOL.GS.Keeps.SpellMgr.CheckAreaForHeals(DOL.GS.Keeps.GameKeepGuard)">
            <summary>
            Method to check the area for heals
            </summary>
            <param name="guard">The guard object</param>
        </member>
        <member name="M:DOL.GS.Keeps.SpellMgr.LordCastHealSpell(DOL.GS.Keeps.GameKeepGuard)">
            <summary>
            Method for a lord to cast a heal spell
            </summary>
            <param name="lord">The lord object</param>
        </member>
        <member name="M:DOL.GS.Keeps.SpellMgr.CastHealSpell(DOL.GS.GameNPC,DOL.GS.GameLiving)">
            <summary>
            Method to cast a heal spell
            </summary>
            <param name="guard">The guard object</param>
            <param name="target">The spell target</param>
        </member>
        <member name="M:DOL.GS.Keeps.SpellMgr.CastNukeSpell(DOL.GS.GameNPC,DOL.GS.GameLiving)">
            <summary>
            Method to cast a nuke spell
            </summary>
            <param name="guard">The guard object</param>
            <param name="target">The spell target</param>
        </member>
        <member name="M:DOL.GS.Keeps.SpellMgr.LaunchSpell(System.Int32,System.String,DOL.GS.GameNPC)">
            <summary>
            Method to launch a spell
            </summary>
            <param name="spellLevel">The spell level</param>
            <param name="spellLineName">The spell line</param>
            <param name="guard">The guard caster</param>
        </member>
        <member name="P:DOL.GS.Keeps.SpellMgr.GuardSpellLine">
            <summary>
            Spell line used by guards
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.SpellMgr.AlbLordHealSpell">
            <summary>
            The spell the Albion Lord uses to heal itself
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.SpellMgr.MidLordHealSpell">
            <summary>
            The spell the Midgard Lord uses to heal itself
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.SpellMgr.HibLordHealSpell">
            <summary>
            The spell the Hibernia Lord uses to heal itself
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.SpellMgr.AlbGuardHealSmallSpell">
            <summary>
            The spell that Albion Guards use to heal small amounts
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.SpellMgr.MidGuardHealSmallSpell">
            <summary>
            The spell that Midgard Guards use to heal small amounts
            </summary>
        </member>
        <member name="P:DOL.GS.Keeps.SpellMgr.HibGuardHealSmallSpell">
            <summary>
            The spell that Hibernian Guards use to heal small amounts
            </summary>
        </member>
        <member name="T:DOL.GS.GameServerConfiguration">
            <summary>
            This is the game server configuration
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_rootDirectory">
            <summary>
            holds the server root directory
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_logConfigFile">
            <summary>
            Holds the log configuration file path
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_regionConfigFile">
            <summary>
            Holds the log configuration file path
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_zoneConfigFile">
            <summary>
            Holds the log configuration file path
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_scriptCompilationTarget">
            <summary>
            Name of the scripts compilation target
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_scriptAssemblies">
            <summary>
            The assemblies to include when compiling the scripts
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_autoAccountCreation">
            <summary>
            True if the server shall automatically create accounts
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_serverType">
            <summary>
            The game server type
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_ServerName">
            <summary>
            The game server name
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_ServerNameShort">
            <summary>
            The short server name, shown in /loc command
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_languageFile">
            <summary>
            The location of the language file
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_cpuCount">
            <summary>
            The count of server cpu
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_maxClientCount">
            <summary>
            The max client count.
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_gmActionsLoggerName">
            <summary>
            The logger name where to log the gm+ commandos
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_cheatLoggerName">
            <summary>
            The logger name where to log cheat attempts
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_invalidNamesFile">
            <summary>
            The file name of the invalid names file
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_dbConnectionString">
            <summary>
            The path to the XML database folder
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_dbType">
            <summary>
            Type database type
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_autoSave">
            <summary>
            True if the server shall autosave the db
            </summary>
        </member>
        <member name="F:DOL.GS.GameServerConfiguration.m_saveInterval">
            <summary>
            The auto save interval in minutes
            </summary>
        </member>
        <member name="M:DOL.GS.GameServerConfiguration.LoadFromConfig(DOL.Config.ConfigElement)">
            <summary>
            Loads the config values from a specific config element
            </summary>
            <param name="root">the root config element</param>
        </member>
        <member name="M:DOL.GS.GameServerConfiguration.SaveToConfig(DOL.Config.ConfigElement)">
            <summary>
            Saves the values into a specific config element
            </summary>
            <param name="root">the root config element</param>
        </member>
        <member name="M:DOL.GS.GameServerConfiguration.#ctor">
            <summary>
            Constructs a server configuration with default values
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.RootDirectory">
            <summary>
            Gets or sets the root directory of the server
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.LogConfigFile">
            <summary>
            Gets or sets the log configuration file of this server
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.RegionConfigFile">
            <summary>
            Gets or sets the region configuration file of this server
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.ZoneConfigFile">
            <summary>
            Gets or sets the zone configuration file of this server
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.LanguageFile">
            <summary>
            Gets or sets the language file
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.ScriptCompilationTarget">
            <summary>
            Gets or sets the script compilation target
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.ScriptAssemblies">
            <summary>
            Gets or sets the script assemblies to be included in the script compilation
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.AutoAccountCreation">
            <summary>
            Gets or sets the auto account creation flag
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.ServerType">
            <summary>
            Gets or sets the server type
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.ServerName">
            <summary>
            Gets or sets the server name
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.ServerNameShort">
            <summary>
            Gets or sets the short server name
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.GMActionsLoggerName">
            <summary>
            Gets or sets the GM action logger name
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.CheatLoggerName">
            <summary>
            Gets or sets the cheat logger name
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.InvalidNamesFile">
            <summary>
            Gets or sets the invalid name filename
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.DBConnectionString">
            <summary>
            Gets or sets the xml database path
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.DBType">
            <summary>
            Gets or sets the DB type
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.AutoSave">
            <summary>
            Gets or sets the autosave flag
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.SaveInterval">
            <summary>
            Gets or sets the autosave interval
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.CpuCount">
            <summary>
            Gets or sets the server cpu count
            </summary>
        </member>
        <member name="P:DOL.GS.GameServerConfiguration.MaxClientCount">
            <summary>
            Gets or sets the max cout of clients allowed
            </summary>
        </member>
        <member name="T:DOL.Events.PlayerGroupEvent">
            <summary>
            This class holds all possible player group events.
            Only constants defined here!
            </summary>
        </member>
        <member name="M:DOL.Events.PlayerGroupEvent.#ctor(System.String)">
            <summary>
            Constructs a new PlayerGroup event
            </summary>
            <param name="name">the event name</param>
        </member>
        <member name="F:DOL.Events.PlayerGroupEvent.PlayerJoined">
            <summary>
            The PlayerJoined event is fired whenever player joins the group
            </summary>
        </member>
        <member name="F:DOL.Events.PlayerGroupEvent.PlayerDisbanded">
            <summary>
            The PlayerDisbanded event is fired whenever player disbands
            </summary>
        </member>
        <member name="T:DOL.Events.EnemyKilledEventArgs">
            <summary>
            Holds the arguments for the EnemyKilled event of GameLivings
            </summary>
        </member>
        <member name="F:DOL.Events.EnemyKilledEventArgs.m_target">
            <summary>
            the attacker of attack
            </summary>
        </member>
        <member name="M:DOL.Events.EnemyKilledEventArgs.#ctor(DOL.GS.GameLiving)">
            <summary>
            Constructs a new EnemyKilledEventArgs
            </summary>
        </member>
        <member name="P:DOL.Events.EnemyKilledEventArgs.Target">
            <summary>
            Gets the attacker of attack
            </summary>
        </member>
        <member name="T:DOL.GS.Effects.ProtectEffect">
            <summary>
            The helper class for the protect ability
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.ProtectEffect.delveString">
            <summary>
            The ability description
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.ProtectEffect.m_protectSource">
            <summary>
            The player protecting the target
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.ProtectEffect.m_protectTarget">
            <summary>
            Reference to gameplayer that is protecting this player
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.ProtectEffect.#ctor">
            <summary>
            Creates a new protect effect
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.ProtectEffect.Start(DOL.GS.GamePlayer,DOL.GS.GamePlayer)">
            <summary>
            Start the guarding on player
            </summary>
        </member>
        <member name="M:DOL.GS.Effects.ProtectEffect.GroupDisbandCallback(DOL.Events.DOLEvent,System.Object,System.EventArgs)">
            <summary>
            Cancels guard if one of players disbands
            </summary>
            <param name="e"></param>
            <param name="sender">The group</param>
            <param name="args"></param>
        </member>
        <member name="M:DOL.GS.Effects.ProtectEffect.Cancel(System.Boolean)">
            <summary>
            Called when effect must be canceled
            </summary>
        </member>
        <member name="F:DOL.GS.Effects.ProtectEffect.m_id">
            <summary>
            The internal unique ID
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.ProtectEffect.ProtectSource">
            <summary>
            Gets the player protecting the target
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.ProtectEffect.ProtectTarget">
            <summary>
            Gets the protected player
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.ProtectEffect.Name">
            <summary>
            Name of the effect
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.ProtectEffect.RemainingTime">
            <summary>
            Remaining Time of the effect in seconds
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.ProtectEffect.Icon">
            <summary>
            Icon to show on players, can be id
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.ProtectEffect.InternalID">
            <summary>
            unique id for identification in effect list
            </summary>
        </member>
        <member name="P:DOL.GS.Effects.ProtectEffect.DelveInfo">
            <summary>
            Delve Info
            </summary>
        </member>
        <member name="T:DOL.GS.ClothWorking">
            <summary>
            The cloth crafting skill
            </summary>
        </member>
        <member name="M:DOL.GS.ClothWorking.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.GS.ClothWorking.CheckTool(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Check if  the player own all needed tools
            </summary>
            <param name="player">the crafting player</param>
            <param name="craftItemData">the object in construction</param>
            <returns>true if the player hold all needed tools</returns>
        </member>
        <member name="M:DOL.GS.ClothWorking.GainCraftingSkillPoints(DOL.GS.GamePlayer,DOL.Database.DBCraftedItem)">
            <summary>
            Select craft to gain point and increase it
            </summary>
            <param name="player"></param>
            <param name="item"></param>
        </member>
        <member name="T:DOL.AI.Brain.RoundsBrain">
            <summary>
            A brain that make npc walk on rounds with way point
            </summary>
        </member>
        <member name="M:DOL.AI.Brain.RoundsBrain.Start">
            <summary>
            Load the path of the mob
            </summary>
            <returns>True if is ok</returns>
        </member>
        <member name="M:DOL.AI.Brain.RoundsBrain.AddToAggroList(DOL.GS.GameLiving,System.Int32)">
            <summary>
            Add living to the aggrolist
            save path of player before attack to walk back to way point after fight
            </summary>
            <param name="living"></param>
            <param name="aggroamount"></param>
        </member>
        <member name="M:DOL.AI.Brain.RoundsBrain.CalculateNextAttackTarget">
            <summary>
            Returns the best target to attack
            if no target go to saved pathpoint to continue the round
            </summary>
            <returns>the best target</returns>
        </member>
        <member name="T:DOL.AI.Brain.eWalkState">
            <summary>
            Defines walk state when brain is not in combat
            </summary>
        </member>
        <member name="F:DOL.AI.Brain.eWalkState.Follow">
            <summary>
            Follow the owner
            </summary>
        </member>
        <member name="F:DOL.AI.Brain.eWalkState.Stay">
            <summary>
            Don't move if not in combat
            </summary>
        </member>
        <member name="T:DOL.AI.Brain.eAggressionState">
            <summary>
            Defines aggression level of the brain
            </summary>
        </member>
        <member name="F:DOL.AI.Brain.eAggressionState.Aggressive">
            <summary>
            Attack any enemy in range
            </summary>
        </member>
        <member name="F:DOL.AI.Brain.eAggressionState.Defensive">
            <summary>
            Attack anything that attacks brain owner or owner of brain owner
            </summary>
        </member>
        <member name="F:DOL.AI.Brain.eAggressionState.Passive">
            <summary>
            Attack only on order
            </summary>
        </member>
    </members>
</doc>
