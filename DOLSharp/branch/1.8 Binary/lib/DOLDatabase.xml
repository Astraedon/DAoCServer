<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DOLDatabase</name>
    </assembly>
    <members>
        <member name="T:MySql.Data.Types.MySqlUInt16">
            <summary>
            Summary description for MySqlInt16.
            </summary>
        </member>
        <member name="T:MySql.Data.Types.MySqlValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:MySql.Data.Types.MySqlValue.numberFormat">
            <summary></summary>
        </member>
        <member name="F:MySql.Data.Types.MySqlValue.objectValue">
            <summary></summary>
        </member>
        <member name="F:MySql.Data.Types.MySqlValue.dbType">
            <summary>The generic dbtype of this value</summary>
        </member>
        <member name="F:MySql.Data.Types.MySqlValue.mySqlDbType">
            <summary>The specific MySQL db type</summary>
        </member>
        <member name="F:MySql.Data.Types.MySqlValue.mySqlTypeName">
            <summary>The MySQL specific typename of this value</summary>
        </member>
        <member name="F:MySql.Data.Types.MySqlValue.classType">
            <summary>The system type represented by this value</summary>
        </member>
        <member name="F:MySql.Data.Types.MySqlValue.isNull">
            <summary>Is this value null</summary>
        </member>
        <member name="M:MySql.Data.Types.MySqlValue.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySql.Data.Types.MySqlValue.GetMySqlTypeName">
            <summary></summary>
        </member>
        <member name="M:MySql.Data.Types.MySqlValue.ToString">
            <summary>Returns a string representation of this value</summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlValue.ValueAsObject">
            <summary>Returns the value of this field as an object</summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlValue.IsNull">
            <summary>
            
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.CompressedStream">
            <summary>
            Summary description for CompressedStream.
            </summary>
        </member>
        <member name="T:MySql.Data.Common.NamedPipeStream">
            <summary>
            Summary description for API.
            </summary>
        </member>
        <member name="T:DOL.Database.DBQuest">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.Database.DataObject">
            <summary>
            Abstract Baseclass for all DataObject's. All Classes that are derived from this class
            are stored in a Datastore
            </summary>
        </member>
        <member name="M:DOL.Database.DataObject.#ctor">
            <summary>
            Default-Construktor that generates a new Object-ID and set
            Dirty and Valid to <c>false</c>
            </summary>
        </member>
        <member name="M:DOL.Database.DataObject.GetTableName(System.Type)">
            <summary>
            Returns the Tablename for an Objecttype. 
            Reads the DataTable-Attribute or if
            not defined returns the Classname
            </summary>
            <param name="myType">get the Tablename for this DataObject</param>
            <returns>The </returns>
        </member>
        <member name="M:DOL.Database.DataObject.GetPreCachedFlag(System.Type)">
            <summary>
            Returns the Tablename for an Objecttype. 
            Reads the DataTable-Attribute or if
            not defined returns the Classname
            </summary>
            <param name="myType">get the Tablename for this DataObject</param>
            <returns>The </returns>
        </member>
        <member name="M:DOL.Database.DataObject.Clone">
            <summary>
            Clone the current object and return the copy
            </summary>
            <returns></returns>
        </member>
        <member name="P:DOL.Database.DataObject.TableName">
            <summary>
            The table name which own he object 
            </summary>
        </member>
        <member name="P:DOL.Database.DataObject.UsesPreCaching">
            <summary>
            Load object in cache or not?
            </summary>
        </member>
        <member name="P:DOL.Database.DataObject.IsValid">
            <summary>
            Is object valid
            </summary>
        </member>
        <member name="P:DOL.Database.DataObject.AutoSave">
            <summary>
            Auto save object or not?
            </summary>
        </member>
        <member name="P:DOL.Database.DataObject.ObjectId">
            <summary>
            Index of the object in his table
            </summary>
        </member>
        <member name="P:DOL.Database.DataObject.Dirty">
            <summary>
            Is object different of object in DB
            </summary>
        </member>
        <member name="M:DOL.Database.DBQuest.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DOL.Database.DBQuest.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The quest name</param>
            <param name="step">The step number</param>
            <param name="charname">The character name</param>
        </member>
        <member name="P:DOL.Database.DBQuest.AutoSave">
            <summary>
            AutoSave record
            </summary>
        </member>
        <member name="P:DOL.Database.DBQuest.Name">
            <summary>
            Quest Name
            </summary>
        </member>
        <member name="P:DOL.Database.DBQuest.Step">
            <summary>
            Quest Step
            </summary>
        </member>
        <member name="P:DOL.Database.DBQuest.CharName">
            <summary>
            Character Name
            </summary>
        </member>
        <member name="P:DOL.Database.DBQuest.CustomPropertiesString">
            <summary>
            Custom properties string
            </summary>
        </member>
        <member name="T:DOL.Database.DBPathPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:DOL.Database.DBPathPoint.MaxSpeed">
            <summary>
            Maximum speed, 0 = no limit
            </summary>
        </member>
        <member name="T:DOL.Database.DBOTDXCharacter">
            <summary>
            character which have already drop otd is in this table
            </summary>
        </member>
        <member name="M:DOL.Database.DBOTDXCharacter.#ctor">
            <summary>
            Create account row in DB
            </summary>
        </member>
        <member name="P:DOL.Database.DBOTDXCharacter.AutoSave">
            <summary>
            Auto save this table
            </summary>
        </member>
        <member name="P:DOL.Database.DBOTDXCharacter.CharacterName">
            <summary>
            The character name of player who have ever drop otd
            </summary>
        </member>
        <member name="P:DOL.Database.DBOTDXCharacter.LootOTD_ID">
            <summary>
            The object id of the DBLootOtd
            </summary>
        </member>
        <member name="T:DOL.Database.DBFaction">
            <summary>
            Faction table
            </summary>
        </member>
        <member name="M:DOL.Database.DBFaction.#ctor">
            <summary>
            Create faction
            </summary>
        </member>
        <member name="P:DOL.Database.DBFaction.AutoSave">
            <summary>
            autosave faction table
            </summary>
        </member>
        <member name="P:DOL.Database.DBFaction.ID">
            <summary>
            Index of faction
            </summary>
        </member>
        <member name="P:DOL.Database.DBFaction.Name">
            <summary>
            Name of faction
            </summary>
        </member>
        <member name="P:DOL.Database.DBFaction.BaseAggroLevel">
             <summary>
             base friendship/relationship/aggro level at start for playe when never it before
            
             </summary>
        </member>
        <member name="T:MySql.Data.Types.MySqlDateTime">
            <summary>
            Summary description for MySqlDateTime.
            </summary>
        </member>
        <member name="M:MySql.Data.Types.MySqlDateTime.GetDateTime">
            <summary>Returns this value as a DateTime</summary>
        </member>
        <member name="M:MySql.Data.Types.MySqlDateTime.ToString">
            <summary>Returns a MySQL specific string representation of this value</summary>
        </member>
        <member name="M:MySql.Data.Types.MySqlDateTime.op_Explicit(MySql.Data.Types.MySqlDateTime)~System.DateTime">
            <summary></summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.IsValidDateTime">
            <summary>
            Indicates if this object contains a value that can be represented as a DateTime
            </summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.Year">
            <summary>Returns the year portion of this datetime</summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.Month">
            <summary>Returns the month portion of this datetime</summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.Day">
            <summary>Returns the day portion of this datetime</summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.Hour">
            <summary>Returns the hour portion of this datetime</summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.Minute">
            <summary>Returns the minute portion of this datetime</summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.Second">
            <summary>Returns the second portion of this datetime</summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlError">
            <summary>
            Collection of error codes that can be returned by the server
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlError.#ctor(System.String,System.Int32,System.String)">
            <summary></summary>
            <param name="level"></param>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlError.Level">
            <summary>
            Error level
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlError.Code">
            <summary>
            Error code
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlError.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="T:MySql.Data.Common.DBConnectionString">
            <summary>
            Summary description for Utility.
            </summary>
        </member>
        <member name="T:DOL.Database.DBTask">
            <summary>
            Database Storage of Tasks
            </summary>
        </member>
        <member name="T:DOL.Database.DBSpellLine">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.Database.ObjectDatabase">
            <summary>
            Database to to full Dokumentation
            </summary>
        </member>
        <member name="F:DOL.Database.ObjectDatabase.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.Database.ObjectDatabase.LoadDatabaseTables">
            <summary>
            Loads the tables from all datasets
            </summary>
        </member>
        <member name="M:DOL.Database.ObjectDatabase.AddNewObject(DOL.Database.DataObject)">
            <summary>
            insert a new object into the db
            and save it if its autosave=true
            </summary>
            <param name="dataObject"></param>
        </member>
        <member name="M:DOL.Database.ObjectDatabase.SaveObject(DOL.Database.DataObject)">
            <summary>
            saves an object to db in memory and when autosave is activated 
            it saves immediately persistent to database
            </summary>
            <param name="dataObject"></param>
        </member>
        <member name="M:DOL.Database.ObjectDatabase.DeleteObject(DOL.Database.DataObject)">
            <summary>
            delete object from db and make it persist if autosave=true
            </summary>
            <param name="dataObject"></param>
        </member>
        <member name="M:DOL.Database.ObjectDatabase.SelectObject(System.Type,System.String)">
            <summary>
            Selects a single object, if more than
            one exist, the first is returned
            </summary>
            <param name="objectType">the type of the object</param>
            <param name="statement">the select statement</param>
            <returns>the object or null if none found</returns>
        </member>
        <member name="T:MySql.Data.Types.MySqlUByte">
            <summary>
            Summary description for MySqlByte.
            </summary>
        </member>
        <member name="T:DOL.Database.DBPath">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.Database.DBLootGenerator">
            <summary>
            Database Storage of Tasks
            </summary>
        </member>
        <member name="F:DOL.Database.DBLootGenerator.m_mobName">
            <summary>
            Trigger Mob
            </summary>
        </member>
        <member name="F:DOL.Database.DBLootGenerator.m_mobGuild">
            <summary>
            Trigger Guild
            </summary>
        </member>
        <member name="F:DOL.Database.DBLootGenerator.m_mobFaction">
            <summary>
            Trigger Faction
            </summary>
        </member>
        <member name="F:DOL.Database.DBLootGenerator.m_regionID">
            <summary>
            Trigger Region
            </summary>
        </member>
        <member name="F:DOL.Database.DBLootGenerator.m_lootGeneratorClass">
            <summary>
            Class of the Loot Generator
            </summary>
        </member>
        <member name="F:DOL.Database.DBLootGenerator.m_exclusivePriority">
            <summary>
            Exclusive Priority
            </summary>
        </member>
        <member name="M:DOL.Database.DBLootGenerator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:DOL.Database.DBLootGenerator.AutoSave">
            <summary>
            AutoSave
            </summary>
        </member>
        <member name="P:DOL.Database.DBLootGenerator.MobName">
            <summary>
            MobName
            </summary>
        </member>
        <member name="P:DOL.Database.DBLootGenerator.MobGuild">
            <summary>
            MobGuild
            </summary>
        </member>
        <member name="P:DOL.Database.DBLootGenerator.MobFaction">
            <summary>
            MobFaction
            </summary>
        </member>
        <member name="P:DOL.Database.DBLootGenerator.RegionID">
            <summary>
            Mobs Region ID
            </summary>
        </member>
        <member name="P:DOL.Database.DBLootGenerator.LootGeneratorClass">
            <summary>
            LootGeneratorClass
            </summary>
        </member>
        <member name="P:DOL.Database.DBLootGenerator.ExclusivePriority">
            <summary>
            ExclusivePriority
            </summary>
        </member>
        <member name="T:DOL.Database.Attributes.DataTable">
            <summary>
            Attribute to mark a Derived Class of DataObject as Table
            Mainly to set the TableName differnt to Classname
            </summary>
        </member>
        <member name="M:DOL.Database.Attributes.DataTable.#ctor">
            <summary>
            Constrctor of DataTable sets the TableName-Property to null.
            </summary>
        </member>
        <member name="P:DOL.Database.Attributes.DataTable.TableName">
            <summary>
            TableName-Property if null the Classname is used as Tablename.
            </summary>
            <value>The TableName that sould be used or <c>null</c> for Classname</value>
        </member>
        <member name="P:DOL.Database.Attributes.DataTable.PreCache">
            <summary>
            If preloading data is required for performance in Findobjectbykey
            Uses more memory then
            </summary>
            <value>true if enabled</value>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlPool">
            <summary>
            Summary description for MySqlPool.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.Driver">
            <summary>
            Summary description for BaseDriver.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.Driver.Configure(MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
            I don't like this setup but can't think of a better way of doing
            right now.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:MySql.Data.MySqlClient.Driver.LoadCharacterSets">
            <summary>
            Loads all the current character set names and ids for this server 
            into the charSets hashtable
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlConnection">
            <summary>
	Represents an open connection to a MySQL Server database. This class cannot be inherited.
	</summary><remarks>
	<para>
		A <b>MySqlConnection</b> object represents a session to a MySQL Server 
		data source.  When you create an instance of <B>MySqlConnection</B>, all 
		properties are set to their initial values. For a list of these values, see the 
		<B>MySqlConnection</B> constructor.
	</para>
		
	<para>
		If the <B>MySqlConnection</B> goes out of scope, it is not closed. Therefore, 
		you must explicitly close the connection by calling <see cref="M:MySql.Data.MySqlClient.MySqlConnection.Close"/> 
		or <see cref="M:MySql.Data.MySqlClient.MySqlConnection.Dispose(System.Boolean)"/>.
	</para>
	</remarks><example>
		The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and 
		a <B>MySqlConnection</B>. The <B>MySqlConnection</B> is opened and set as the  
		<see cref="P:MySql.Data.MySqlClient.MySqlCommand.Connection"/> for the <B>MySqlCommand</B>. The example then calls  
		<see cref="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery"/>, and closes the connection. To accomplish this, the <B>ExecuteNonQuery</B> is 
		passed a connection string and a query string that is a SQL INSERT 
		statement.
		<code lang="Visual Basic">
		<c>
	Public Sub InsertRow(myConnectionString As String)
		' If the connection string is null, use a default.
		If myConnectionString = "" Then
			myConnectionString = "Database=Test;Data Source=localhost;User Id=username;Password=pass"
		End If
		Dim myConnection As New MySqlConnection(myConnectionString)
		Dim myInsertQuery As String = "INSERT INTO Orders (id, customerId, amount) Values(1001, 23, 30.66)"
		Dim myCommand As New MySqlCommand(myInsertQuery)
		myCommand.Connection = myConnection
		myConnection.Open()
		myCommand.ExecuteNonQuery()
		myCommand.Connection.Close()
	End Sub
	</c> 
		</code>
		<code lang="C#">
	<c>
	public void InsertRow(string myConnectionString) 
	{
		// If the connection string is null, use a default.
		if(myConnectionString == "") 
		{
			myConnectionString = "Database=Test;Data Source=localhost;User Id=username;Password=pass";
		}
		MySqlConnection myConnection = new MySqlConnection(myConnectionString);
		string myInsertQuery = "INSERT INTO Orders (id, customerId, amount) Values(1001, 23, 30.66)";
		MySqlCommand myCommand = new MySqlCommand(myInsertQuery);
		myCommand.Connection = myConnection;
		myConnection.Open();
		myCommand.ExecuteNonQuery();
		myCommand.Connection.Close();
	}
	</c>
		</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.#ctor">
            <summary>Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> class.</summary><remarks>
		When a new instance of <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is created, the read/write 
		properties are set to the following initial values unless they are specifically 
		set using their associated keywords in the <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/> property.
	    <para/>
	    <list type="table">
			<listheader><term>Properties</term><term>Initial Value</term></listheader>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/></term><term>empty string ("")</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionTimeout"/></term><term>15</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlConnection.Database"/></term><term>empty string ("")</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlConnection.DataSource"/></term><term>empty string ("")</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlConnection.ServerVersion"/></term><term>empty string ("")</term></item>
	    </list>
		<para/>
		You can change the value for these properties only by using the <B>ConnectionString</B> property.
	</remarks><example>
	</example><overloads>
		<summary>Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> class.</summary>
	</overloads>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> class when given a string containing the connection string.</summary><remarks>
		When a new instance of <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is created, the read/write 
		properties are set to the following initial values unless they are specifically 
		set using their associated keywords in the <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/> property.
	    <para/>
	    <list type="table">
			<listheader><term>Properties</term><term>Initial Value</term></listheader>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/></term><term>empty string ("")</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionTimeout"/></term><term>15</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlConnection.Database"/></term><term>empty string ("")</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlConnection.DataSource"/></term><term>empty string ("")</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlConnection.ServerVersion"/></term><term>empty string ("")</term></item>
	    </list>
		<para/>
		You can change the value for these properties only by using the <B>ConnectionString</B> property.
	</remarks><example>
	</example><param name="connectionString">The connection properties used to open the MySQL database. </param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction">
            <summary>Begins a database transaction.</summary><returns>An object representing the new transaction.</returns><exception cref="T:System.InvalidOperationException">Parallel transactions are not supported.</exception><remarks>
		<para>This command is equivalent to the MySQL BEGIN TRANSACTION command.</para>
		<para>You must explicitly commit or roll back the transaction using the <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Commit"/> or 
		<see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Rollback"/> method.
		<note>If you do not specify an isolation level, the default isolation level is used. To specify an isolation 
		level with the <see cref="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction"/> method, use the overload that takes the <I>iso</I> parameter.
		</note></para>
	</remarks><example>
		The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and a 
		<see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/>.  It also demonstrates how to use the <B>BeginTransaction</B>, a 
		<see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Commit"/>, and <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Rollback"/> methods.
		<code lang="Visual Basic">
Public Sub RunTransaction(myConnString As String)
    Dim myConnection As New MySqlConnection(myConnString)
    myConnection.Open()
    
    Dim myCommand As MySqlCommand = myConnection.CreateCommand()
    Dim myTrans As MySqlTransaction
    
    ' Start a local transaction
    myTrans = myConnection.BeginTransaction()
    ' Must assign both transaction object and connection
    ' to Command object for a pending local transaction
    myCommand.Connection = myConnection
    myCommand.Transaction = myTrans
    
    Try
      myCommand.CommandText = "Insert into Test (id, desc) VALUES (100, 'Description')"
      myCommand.ExecuteNonQuery()
      myCommand.CommandText = "Insert into Test (id, desc) VALUES (101, 'Description')"
      myCommand.ExecuteNonQuery()
      myTrans.Commit()
      Console.WriteLine("Both records are written to database.")
    Catch e As Exception
      Try
        myTrans.Rollback()
      Catch ex As MySqlException
        If Not myTrans.Connection Is Nothing Then
          Console.WriteLine("An exception of type " + ex.GetType().ToString() + _
                            " was encountered while attempting to roll back the transaction.")
        End If
      End Try
    
      Console.WriteLine("An exception of type " + e.GetType().ToString() + _
                      "was encountered while inserting the data.")
      Console.WriteLine("Neither record was written to database.")
    Finally
      myConnection.Close()
    End Try
End Sub
		</code>
		<code lang="C#">
public void RunTransaction(string myConnString) 
{
	MySqlConnection myConnection = new MySqlConnection(myConnString);
	myConnection.Open();

	MySqlCommand myCommand = myConnection.CreateCommand();
	MySqlTransaction myTrans;

	// Start a local transaction
	myTrans = myConnection.BeginTransaction();
	// Must assign both transaction object and connection
	// to Command object for a pending local transaction
	myCommand.Connection = myConnection;
	myCommand.Transaction = myTrans;

    try
    {
      myCommand.CommandText = "insert into Test (id, desc) VALUES (100, 'Description')";
      myCommand.ExecuteNonQuery();
      myCommand.CommandText = "insert into Test (id, desc) VALUES (101, 'Description')";
      myCommand.ExecuteNonQuery();
      myTrans.Commit();
      Console.WriteLine("Both records are written to database.");
    }
    catch(Exception e)
    {
      try
      {
        myTrans.Rollback();
      }
      catch (SqlException ex)
      {
        if (myTrans.Connection != null)
        {
          Console.WriteLine("An exception of type " + ex.GetType() +
                            " was encountered while attempting to roll back the transaction.");
        }
      }
    
      Console.WriteLine("An exception of type " + e.GetType() +
                        " was encountered while inserting the data.");
      Console.WriteLine("Neither record was written to database.");
    }
    finally 
    {
      myConnection.Close();
    }
}
		</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>Begins a database transaction with the specified isolation level.</summary><param name="iso">The isolation level under which the transaction should run. </param><returns>An object representing the new transaction.</returns><exception cref="T:System.InvalidOperationException">Parallel exceptions are not supported.</exception><remarks>
		<para>This command is equivalent to the MySQL BEGIN TRANSACTION command.</para>
		<para>You must explicitly commit or roll back the transaction using the <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Commit"/> or 
		<see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Rollback"/> method.
		<note>If you do not specify an isolation level, the default isolation level is used. To specify an isolation 
		level with the <see cref="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction"/> method, use the overload that takes the <I>iso</I> parameter.
		</note></para>
	</remarks><example>
		The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and a 
		<see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/>.  It also demonstrates how to use the <B>BeginTransaction</B>, a 
		<see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Commit"/>, and <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Rollback"/> methods.
		<code lang="Visual Basic">
Public Sub RunTransaction(myConnString As String)
    Dim myConnection As New MySqlConnection(myConnString)
    myConnection.Open()
    
    Dim myCommand As MySqlCommand = myConnection.CreateCommand()
    Dim myTrans As MySqlTransaction
    
    ' Start a local transaction
    myTrans = myConnection.BeginTransaction()
    ' Must assign both transaction object and connection
    ' to Command object for a pending local transaction
    myCommand.Connection = myConnection
    myCommand.Transaction = myTrans
    
    Try
      myCommand.CommandText = "Insert into Test (id, desc) VALUES (100, 'Description')"
      myCommand.ExecuteNonQuery()
      myCommand.CommandText = "Insert into Test (id, desc) VALUES (101, 'Description')"
      myCommand.ExecuteNonQuery()
      myTrans.Commit()
      Console.WriteLine("Both records are written to database.")
    Catch e As Exception
      Try
        myTrans.Rollback()
      Catch ex As MySqlException
        If Not myTrans.Connection Is Nothing Then
          Console.WriteLine("An exception of type " + ex.GetType().ToString() + _
                            " was encountered while attempting to roll back the transaction.")
        End If
      End Try
    
      Console.WriteLine("An exception of type " + e.GetType().ToString() + _
                      "was encountered while inserting the data.")
      Console.WriteLine("Neither record was written to database.")
    Finally
      myConnection.Close()
    End Try
End Sub
		</code>
		<code lang="C#">
public void RunTransaction(string myConnString) 
{
	MySqlConnection myConnection = new MySqlConnection(myConnString);
	myConnection.Open();

	MySqlCommand myCommand = myConnection.CreateCommand();
	MySqlTransaction myTrans;

	// Start a local transaction
	myTrans = myConnection.BeginTransaction();
	// Must assign both transaction object and connection
	// to Command object for a pending local transaction
	myCommand.Connection = myConnection;
	myCommand.Transaction = myTrans;

    try
    {
      myCommand.CommandText = "insert into Test (id, desc) VALUES (100, 'Description')";
      myCommand.ExecuteNonQuery();
      myCommand.CommandText = "insert into Test (id, desc) VALUES (101, 'Description')";
      myCommand.ExecuteNonQuery();
      myTrans.Commit();
      Console.WriteLine("Both records are written to database.");
    }
    catch(Exception e)
    {
      try
      {
        myTrans.Rollback();
      }
      catch (SqlException ex)
      {
        if (myTrans.Connection != null)
        {
          Console.WriteLine("An exception of type " + ex.GetType() +
                            " was encountered while attempting to roll back the transaction.");
        }
      }
    
      Console.WriteLine("An exception of type " + e.GetType() +
                        " was encountered while inserting the data.");
      Console.WriteLine("Neither record was written to database.");
    }
    finally 
    {
      myConnection.Close();
    }
}
		</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.ChangeDatabase(System.String)">
            <summary>Changes the current database for an open MySqlConnection.</summary><param name="databaseName">The name of the database to use.</param><remarks>
		<para>The value supplied in the <I>database</I> parameter must be a valid database 
		name. The <I>database</I> parameter cannot contain a null value, an empty 
		string, or a string with only blank characters.</para>
		
		<para>When you are using connection pooling against MySQL, and you close 
		the connection, it is returned to the connection pool. The next time the 
		connection is retrieved from the pool, the reset connection request 
		executes before the user performs any operations.</para>
	</remarks><exception cref="T:System.ArgumentException">The database name is not valid.</exception><exception cref="T:System.InvalidOperationException">The connection is not open.</exception><exception cref="T:MySql.Data.MySqlClient.MySqlException">Cannot change the database.</exception><example>
		The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and displays 
		some of its read-only properties.
		
		<code lang="Visual Basic">
Public Sub CreateMySqlConnection()
	Dim myConnString As String = _
		"Persist Security Info=False;database=test;server=localhost;user id=joeuser;pwd=pass"
	Dim myConnection As New MySqlConnection( myConnString )
	myConnection.Open()
	MessageBox.Show( "Server Version: " + myConnection.ServerVersion _
		+ ControlChars.NewLine + "Database: " + myConnection.Database )
	myConnection.ChangeDatabase( "test2" )
	MessageBox.Show( "ServerVersion: " + myConnection.ServerVersion _ 
		+ ControlChars.NewLine + "Database: " + myConnection.Database )
	myConnection.Close()
End Sub		
		</code>
		
		<code lang="C#">
public void CreateMySqlConnection()
{
	string myConnString = 
		"Persist Security Info=False;database=test;server=localhost;user id=joeuser;pwd=pass";
	MySqlConnection myConnection = new MySqlConnection( myConnString );
	myConnection.Open();
	MessageBox.Show( "Server Version: " + myConnection.ServerVersion 
		+ "\nDatabase: " + myConnection.Database );
	myConnection.ChangeDatabase( "test2" );
	MessageBox.Show( "ServerVersion: " + myConnection.ServerVersion  
		+ "\nDatabase: " + myConnection.Database );
	myConnection.Close();
}
		</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.Ping">
            <summary>
            Ping
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.Open">
            <summary>Opens a database connection with the property settings specified by the ConnectionString.</summary><exception cref="T:System.InvalidOperationException">Cannot open a connection without specifying a data source or server.</exception><exception cref="T:MySql.Data.MySqlClient.MySqlException">A connection-level error occurred while opening the connection.</exception><remarks>
		<para>The <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> draws an open connection from the connection pool if one is available. 
		Otherwise, it establishes a new connection to an instance of MySQL.</para>
	</remarks><example>
		The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, opens it, 
		displays some of its properties, then closes the connection.
		
		<code lang="Visual Basic">
Public Sub CreateMySqlConnection(myConnString As String)
    Dim myConnection As New MySqlConnection(myConnString)
    myConnection.Open()
    MessageBox.Show("ServerVersion: " + myConnection.ServerVersion _
		+ ControlChars.Cr + "State: " + myConnection.State.ToString())
    myConnection.Close()
End Sub
		</code>
		<code lang="C#">
public void CreateMySqlConnection(string myConnString) 
{
	MySqlConnection myConnection = new MySqlConnection(myConnString);
	myConnection.Open();
	MessageBox.Show("ServerVersion: " + myConnection.ServerVersion + 
					"\nState: " + myConnection.State.ToString());
	myConnection.Close();
}
		</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.Close">
            <summary>Closes the connection to the database. This is the preferred method of closing any open connection.</summary><remarks>
		<para>The <B>Close</B> method rolls back any pending transactions. It then releases 
		the connection to the connection pool, or closes the connection if connection 
		pooling is disabled.</para>
		<para>An application can call <B>Close</B> more than one time. No exception is 
		generated.</para>
	</remarks><example>
		The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, opens it, 
		displays some of its properties, then closes the connection.
		
		<code lang="Visual Basic">
Public Sub CreateMySqlConnection(myConnString As String)
    Dim myConnection As New MySqlConnection(myConnString)
    myConnection.Open()
    MessageBox.Show("ServerVersion: " + myConnection.ServerVersion _
		+ ControlChars.Cr + "State: " + myConnection.State.ToString())
    myConnection.Close()
End Sub
		</code>
		<code lang="C#">
public void CreateMySqlConnection(string myConnString) 
{
	MySqlConnection myConnection = new MySqlConnection(myConnString);
	myConnection.Open();
	MessageBox.Show("ServerVersion: " + myConnection.ServerVersion + 
					"\nState: " + myConnection.State.ToString());
	myConnection.Close();
}
		</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.CreateCommand">
            <summary>Creates and returns a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object associated with the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>.</summary><returns>A <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.System#ICloneable#Clone">
            <summary>
            Creates a new MySqlConnection object with the exact same ConnectionString value
            </summary>
            <returns>A cloned MySqlConnection object</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the MySqlConnection.
            </summary>
        </member>
        <member name="E:MySql.Data.MySqlClient.MySqlConnection.StateChange">
            <summary>Occurs when the state of the connection changes.</summary><remarks>
		<para>The <B>StateChange</B> event fires whenever the <see cref="P:MySql.Data.MySqlClient.MySqlConnection.State"/> changes from 
		closed to opened, or from opened to closed. <B>StateChange</B> fires immediately 
		after the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> transitions.</para>
		
		<para>If an event handler throws an exception from within the <B>StateChange</B> 
		event, the exception propagates to the caller of the <see cref="M:MySql.Data.MySqlClient.MySqlConnection.Open"/> or 
		<see cref="M:MySql.Data.MySqlClient.MySqlConnection.Close"/> method.</para>
		
		<para>The <B>StateChange</B> event is not raised unless you explicitly call 
		<B>Close</B> or <B>Dispose</B>.</para>
	</remarks><event cref="E:MySql.Data.MySqlClient.MySqlConnection.StateChange">
		Raised.
		<data>
			<para>The event handler receives an argument of type <see cref="T:System.Data.StateChangeEventArgs"/> 
			containing data related to this event. The following <B>StateChangeEventArgs</B> 
			properties provide information specific to this event.</para>
			<list type="table">
				<listheader>
					<term>Property</term>
					<description>Description</description>
				</listheader>
				<item>
					<term><see cref="P:System.Data.StateChangeEventArgs.CurrentState"/></term>
					<description>Gets the new state of the connection. The connection object will 
					be in the new state already when the event is fired.</description>
				</item>
				<item>
					<term><see cref="P:System.Data.StateChangeEventArgs.OriginalState"/></term>
					<description>Gets the original state of the connection.</description>
				</item>
			</list>
		</data>
	</event>
        </member>
        <member name="E:MySql.Data.MySqlClient.MySqlConnection.InfoMessage">
            <summary>Occurs when MySQL returns warnings as a result of executing a command or query.</summary><remarks>
	</remarks>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.ServerThread">
            <summary>
            Returns the id of the server thread this connection is executing on
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.DataSource">
            <summary>
            Gets the name of the MySQL server to which to connect.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionTimeout">
            <summary>
	Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.
	</summary><exception cref="T:System.ArgumentException">The value set is less than 0.</exception><remarks>
		A value of 0 indicates no limit, and should be avoided in a 
		<see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/> because an attempt to connect 
		will wait indefinitely.
	</remarks><example>
		The following example creates a MySqlConnection
		and sets some of its properties in the connection string.
		<code lang="Visual Basic">
Public Sub CreateSqlConnection()
	Dim myConnection As New MySqlConnection()
	myConnection.ConnectionString = "Persist Security Info=False;Username=user;Password=pass;database=test1;server=localhost;Connect Timeout=30"
	myConnection.Open()
End Sub
</code>
<code lang="C#">
public void CreateSqlConnection() 
{
	MySqlConnection myConnection = new MySqlConnection();
	myConnection.ConnectionString = "Persist Security Info=False;Username=user;Password=pass;database=test1;server=localhost;Connect Timeout=30";
	myConnection.Open();
}
</code>				
	</example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.Database">
            <summary>Gets the name of the current database or the database to be used after a connection is opened.</summary><returns>The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.</returns><remarks>
		<para>The <B>Database</B> property does not update dynamically. 
		If you change the current database using a SQL statement, then this property
		may reflect the wrong value.  If you change the current database using the <see cref="M:MySql.Data.MySqlClient.MySqlConnection.ChangeDatabase(System.String)"/> 
		method, this property is updated to reflect the new database.</para>
	</remarks><example>
		The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and displays 
		some of its read-only properties.
		
		<code lang="Visual Basic">
Public Sub CreateMySqlConnection()
	Dim myConnString As String = _
		"Persist Security Info=False;database=test;server=localhost;user id=joeuser;pwd=pass"
	Dim myConnection As New MySqlConnection( myConnString )
	myConnection.Open()
	MessageBox.Show( "Server Version: " + myConnection.ServerVersion _
		+ ControlChars.NewLine + "Database: " + myConnection.Database )
	myConnection.ChangeDatabase( "test2" )
	MessageBox.Show( "ServerVersion: " + myConnection.ServerVersion _ 
		+ ControlChars.NewLine + "Database: " + myConnection.Database )
	myConnection.Close()
End Sub		
		</code>
		
		<code lang="C#">
public void CreateMySqlConnection()
{
	string myConnString = 
		"Persist Security Info=False;database=test;server=localhost;user id=joeuser;pwd=pass";
	MySqlConnection myConnection = new MySqlConnection( myConnString );
	myConnection.Open();
	MessageBox.Show( "Server Version: " + myConnection.ServerVersion 
		+ "\nDatabase: " + myConnection.Database );
	myConnection.ChangeDatabase( "test2" );
	MessageBox.Show( "ServerVersion: " + myConnection.ServerVersion  
		+ "\nDatabase: " + myConnection.Database );
	myConnection.Close();
}
		</code>
	</example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.UseCompression">
            <summary>
            Indicates if this connection should use compression when communicating with the server.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.State">
            <summary>Gets the current state of the connection.</summary><returns>A bitwise combination of the <see cref="T:System.Data.ConnectionState"/> values. The default is <B>Closed</B>.</returns><remarks>
		The allowed state changes are: 
		<list type="bullet">
			<item>From <B>Closed</B> to <B>Open</B>, using the <B>Open</B> method of the connection object.</item>
			<item>From <B>Open</B> to <B>Closed</B>, using either the <B>Close</B> method or the <B>Dispose</B> method of the connection object. </item>
		</list>
	</remarks><example>
		The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, opens it, 
		displays some of its properties, then closes the connection.
		
		<code lang="Visual Basic">
Public Sub CreateMySqlConnection(myConnString As String)
    Dim myConnection As New MySqlConnection(myConnString)
    myConnection.Open()
    MessageBox.Show("ServerVersion: " + myConnection.ServerVersion _
		+ ControlChars.Cr + "State: " + myConnection.State.ToString())
    myConnection.Close()
End Sub
		</code>
		<code lang="C#">
public void CreateMySqlConnection(string myConnString) 
{
	MySqlConnection myConnection = new MySqlConnection(myConnString);
	myConnection.Open();
	MessageBox.Show("ServerVersion: " + myConnection.ServerVersion + 
					"\nState: " + myConnection.State.ToString());
	myConnection.Close();
}
		</code>
	</example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.ServerVersion">
            <summary>Gets a string containing the version of the MySQL server to which the client is connected.</summary><returns>The version of the instance of MySQL.</returns><exception cref="T:System.InvalidOperationException">The connection is closed.</exception><example>
		The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, opens it, 
		displays some of its properties, then closes the connection.
		
		<code lang="Visual Basic">
Public Sub CreateMySqlConnection(myConnString As String)
    Dim myConnection As New MySqlConnection(myConnString)
    myConnection.Open()
    MessageBox.Show("ServerVersion: " + myConnection.ServerVersion _
		+ ControlChars.Cr + "State: " + myConnection.State.ToString())
    myConnection.Close()
End Sub
		</code>
		<code lang="C#">
public void CreateMySqlConnection(string myConnString) 
{
	MySqlConnection myConnection = new MySqlConnection(myConnString);
	myConnection.Open();
	MessageBox.Show("ServerVersion: " + myConnection.ServerVersion + 
					"\nState: " + myConnection.State.ToString());
	myConnection.Close();
}
		</code>
	</example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString">
            <summary>
	Gets or sets the string used to connect to a MySQL Server database.
	</summary><remarks>
	<para>The <B>ConnectionString</B> returned may not be exactly like what was originally
	set but will be indentical in terms of keyword/value pairs.  Security information
	will not be included unless the Persist Security Info value is set to true. 
	</para>
	<para>You can use the <B>ConnectionString</B> property to connect to a database. 
	The following example illustrates a typical connection string.</para>
	<c>"Persist Security Info=False;database=MyDB;server=MySqlServer;user id=myUser;Password=myPass"</c>
	<para>The <B>ConnectionString</B> property can be set only when the connection is 
	closed. Many of the connection string values have corresponding read-only 
	properties. When the connection string is set, all of these properties are 
	updated, except when an error is detected. In this case, none of the properties 
	are updated. <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> properties return only those settings contained in the 
	<B>ConnectionString</B>.</para>
	<para>To connect to a local machine, specify "localhost" for the server. If you do not 
	specify a server, localhost is assumed.</para>
	<para>Resetting the <B>ConnectionString</B> on a closed connection resets all 
	connection string values (and related properties) including the password. For 
	example, if you set a connection string that includes "Database= MyDb", and 
	then reset the connection string to "Data Source=myserver;User Id=myUser;Password=myPass", 
	the <see cref="P:MySql.Data.MySqlClient.MySqlConnection.Database"/> property is no longer set to MyDb.</para>
	<para>The connection string is parsed immediately after being set. If errors in 
	syntax are found when parsing, a runtime exception, such as <see cref="T:System.ArgumentException"/>, 
	is generated. Other errors can be found only when an attempt is made to open the 
	connection.</para>
	<para>The basic format of a connection string consists of a series of keyword/value 
	pairs separated by semicolons. The equal sign (=) connects each keyword and its 
	value. To include values that contain a semicolon, single-quote character, or 
	double-quote character, the value must be enclosed in double quotes. If the 
	value contains both a semicolon and a double-quote character, the value can be 
	enclosed in single quotes. The single quote is also useful if the value begins 
	with a double-quote character. Conversely, the double quote can be used if the 
	value begins with a single quote. If the value contains both single-quote and 
	double-quote characters, the quote character used to enclose the value must be 
	doubled each time it occurs within the value.</para>
	<para>To include preceding or trailing spaces in the string value, the value must 
	be enclosed in either single quotes or double quotes. Any leading or trailing 
	spaces around integer, Boolean, or enumerated values are ignored, even if 
	enclosed in quotes. However, spaces within a string literal keyword or value are 
	preserved. Using .NET Framework version 1.1, single or double quotes may be used 
	within a connection string without using delimiters (for example, Data Source= 
	my'Server or Data Source= my"Server), unless a quote character is the first or 
	last character in the value.</para>
	<para>To include an equal sign (=) in a keyword or value, it must be preceded by 
	another equal sign. For example, in the hypothetical connection string</para>
	<c>"key==word=value"</c>
	<para></para>
	<para>the keyword is "key=word" and the value is "value".</para>
	<para>If a specific keyword in a keyword= value pair occurs multiple times in a 
	connection string, the last occurrence listed is used in the value set.</para>
	<para>Keywords are not case sensitive.</para>
	<para>The following table lists the valid names for keyword values within the 
	<B>ConnectionString</B>.</para>
	
	<div class="tablediv"><table class="dtTABLE" cellspacing="0"><tr valign="top">
		<th width="33%">Name</th>
		<th width="33%">Default</th>
		<th width="33%">Description</th>
		</tr>
		<tr>
			<td>Connect Timeout<para>  -or-  </para>Connection Timeout</td>
			<td>15</td>
			<td>The length of time (in seconds) to wait for a connection to the server before 
terminating the attempt and generating an error.</td>
		</tr>
		<tr>
			<td>
				Host<para>  -or-  </para>Server<para>  -or-  </para>Data Source<para>  -or-  </para>
				DataSource<para>  -or-  </para>Address<para>  -or-  </para>Addr<para>  -or-  </para>
				Network Address
			</td>
			<td>localhost</td>
			<td><para>The name or network address of the instance of MySQL to which to connect.  Multiple hosts can be
			specified separated by &amp;.  This can be useful where multiple MySQL servers are configured for replication
			and you are not concerned about the precise server you are connecting to.  No attempt is made by the provider to
			synchronize writes to the database so care should be taken when using this option.
			</para>
			<para>
				In Unix environment with Mono, this can be a fully qualified path to MySQL socket filename. With this configuration, the Unix socket will be used instead of TCP/IP socket.
				Currently only a single socket name can be given so accessing MySQL in a replicated environment using Unix sockets is not currently supported.
			</para>
			</td>
		</tr>
		<tr>
			<td>Port</td>
			<td>3306</td>
			<td>The port MySQL is using to listen for connections.  Specify -1 for this value to use a 
				named pipe connection (Windows only). This value is ignored if Unix socket is used.</td>
		</tr>
		<tr>
			<td>Protocol</td>
			<td>socket</td>
			<td>
			Specifies the type of connection to make to the server.<para>Values can be:</para>
			socket or tcp for a socket connection<br/>
			pipe for a named pipe connection<br/>
			unix for a Unix socket connection<br/>
			memory to use MySQL shared memory
			</td>
		</tr>
		<tr>
			<td>CharSet<para>  -or  </para>Character Set</td>
			<td></td>
			<td>
			Specifies the character set that should be used to encode all queries sent to the server.  
			Resultsets are still returned in the character set of the data returned.
			</td>
		</tr>
		<tr>
			<td>Logging</td>
			<td>false</td>
			<td>When true, various pieces of information is output to any configured TraceListeners.</td>
		</tr>
		<tr>
			<td>Allow Batch</td>
			<td>true</td>
			<td>
			When true, multiple SQL statements can be sent with one command execution.<br/><br/>
			-Note-<br/>
			Starting with MySQL 4.1.1, batch statements should be separated by the server-defined seperator character.<br/>
			Commands sent to earlier versions of MySQL should be seperated with ';'.
			</td>
		</tr>
		<tr>
			<td>Encrypt</td>
			<td>false</td>
			<td>When <B>true</B>, SSL encryption is used for all data sent between the 
client and server if the server has a certificate installed. Recognized values 
are <B>true</B>, <B>false</B>, <B>yes</B>, and <B>no</B>.<para><b>Note</b>  This parameter currently has no
effect.</para></td>
		</tr>
		<tr>
			<td>Initial Catalog<para>  -or-  </para>Database</td>
			<td>mysql</td>
			<td>The name of the database to use intially</td>
		</tr>
		<tr>
			<td>Password<para>  -or-  </para>pwd</td>
			<td></td>
			<td>The password for the MySQL account being used.</td>
		</tr>
		<tr>
			<td>Persist Security Info</td>
			<td>false</td>
			<td>When set to <B>false</B> or <B>no</B> (strongly recommended), security-sensitive 
information, such as the password, is not returned as part of the connection if 
the connection is open or has ever been in an open state. Resetting the 
connection string resets all connection string values including the password. 
Recognized values are <B>true</B>, <B>false</B>, <B>yes</B>, and <B>no</B>.</td>
		</tr>
		<tr>
			<td>User Id<para>  -or-  </para>Username<para>  -or-  </para>Uid<para>  -or-  </para>User name</td>
			<td></td>
			<td>The MySQL login account being used.</td>
		</tr>
		<tr>
			<td>Shared Memory Name</td>
			<td>MYSQL</td>
			<td>The name of the shared memory object to use for communication if the connection protocol is set to memory.</td>
		</tr>
		<tr>
			<td>Allow Zero Datetime</td>
			<td>false</td>
			<td>True to have MySqlDataReader.GetValue() return a MySqlDateTime for date or datetime columns that have illegal values.
			False will cause a DateTime object to be returned for legal values and an exception will be thrown for illegal values.</td>
		</tr>
		<tr>
			<td>Convert Zero Datetime</td>
			<td>false</td>
			<td>True to have MySqlDataReader.GetValue() and MySqlDataReader.GetDateTime()
			return DateTime.MinValue for date or datetime columns that have illegal values.</td>
		</tr>
		<tr>
			<td>Old Syntax<para>  -or-  </para>OldSyntax</td>
			<td>false</td>
			<td>
			Allows use of '@' symbol as a parameter marker.  See <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> for more
			info.
			<note>This is for compatibility only.  All future code should be written to 
			use the new '?' parameter marker.</note>
			</td>
		</tr>
		<tr>
			<td>Pipe Name<para>  -or-  </para>Pipe</td>
			<td>mysql</td>
			<td>When set to the name of a named pipe, the <B>MySqlConnection</B> will attempt to connect to MySQL
			on that named pipe.<br/><br/>This settings only applies to the Windows platform.</td>
		</tr>
		</table>
		</div>
	<para>
	The following table lists the valid names for connection pooling values within 
the <B>ConnectionString</B>. For more information about connection pooling, see 
Connection Pooling for the MySql Data Provider.</para>
	<div class="tablediv"><table class="dtTABLE" cellspacing="0"><tr valign="top">
		<th width="33%">Name</th>
		<th width="33%">Default</th>
		<th width="33%">Description</th>
		</tr>
		<tr>
			<td>Connection Lifetime</td>
			<td>0</td>
			<td>When a connection is returned to the pool, its creation time is compared with 
the current time, and the connection is destroyed if that time span (in seconds) 
exceeds the value specified by <B>Connection Lifetime</B>. This is useful in 
clustered configurations to force load balancing between a running server and a 
server just brought online. 
<para>A value of zero (0) causes pooled connections to have the maximum connection 
timeout.</para></td>
		</tr>
		<tr>
			<td>Max Pool Size</td>
			<td>100</td>
			<td>The maximum number of connections allowed in the pool.</td>
		</tr>
		<tr>
			<td>Min Pool Size</td>
			<td>0</td>
			<td>The minimum number of connections allowed in the pool.</td>
		</tr>
		<tr>
			<td>Pooling</td>
			<td>true</td>
			<td>When <B>true</B>, the <B>MySqlConnection</B> object is drawn from the appropriate 
pool, or if necessary, is created and added to the appropriate pool. Recognized 
values are <B>true</B>, <B>false</B>, <B>yes</B>, and <B>no</B>.</td>
		</tr>
		<tr>
			<td>Reset Pooled Connections<para>  -or-  </para>
			    ResetConnections<para>  -or-  </para>
			    ResetPooledConnections</td>
			<td>true</td>
			<td>Specifies whether a ping and a reset should be sent to the server
			before a pooled connection is returned.  Not resetting will yeild faster
			connection opens but also will not clear out session items such as
			temp tables.</td>
		</tr>
		<tr>
			<td>Cache Server Configuration<para>  -or-  </para>
			    CacheServerConfiguration<para>  -or-  </para>
			    CacheServerConfig</td>
			<td>false</td>
			<td>Specifies whether server variables should be updated when a pooled
			connection is returned.  Turning this one will yeild faster opens but
			will also not catch any server changes made by other connections.</td>
		</tr>
	</table></div>
<para>When setting keyword or connection pooling values that require a Boolean 
value, you can use 'yes' instead of 'true', and 'no' instead of 'false'.</para>
<para><B>Note</B>  The MySql Data Provider uses the native socket protocol to 
communicate with MySQL.  Therefore, it does not support the use of an ODBC data source name (DSN) when 
connecting to MySQL because it does not add an ODBC layer.</para>
<para><B>CAUTION</B>  In this release, the application should use caution when constructing a 
connection string based on user input (for example when retrieving user ID and password information from a 
dialog box, and appending it to the connection string). The application should 
ensure that a user cannot embed extra connection string parameters in these 
values (for example, entering a password as "validpassword;database=somedb" in 
an attempt to attach to a different database).</para>
	</remarks><example>
	The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and sets some of its properties
	<code lang="Visual Basic">
	Public Sub CreateConnection()
		Dim myConnection As New MySqlConnection()
		myConnection.ConnectionString = "Persist Security Info=False;database=myDB;server=myHost;Connect Timeout=30;user id=myUser; pwd=myPass"
		myConnection.Open()
	End Sub 'CreateConnection
	</code>
	<code lang="C#">
	public void CreateConnection() 
	{
		MySqlConnection myConnection = new MySqlConnection();
		myConnection.ConnectionString = "Persist Security Info=False;database=myDB;server=myHost;Connect Timeout=30;user id=myUser; pwd=myPass";
		myConnection.Open();
	}
	</code>
</example><example>
		The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> in Unix environment with Mono installed. MySQL socket filename used in this example is "/var/lib/mysql/mysql.sock". The actual filename depends on your MySQL configuration.
	<code lang="Visual Basic">
	Public Sub CreateConnection()
		Dim myConnection As New MySqlConnection()
		myConnection.ConnectionString = "database=myDB;server=/var/lib/mysql/mysql.sock;user id=myUser; pwd=myPass"
		myConnection.Open()
	End Sub 'CreateConnection
	</code>
	<code lang="C#">
	public void CreateConnection() 
	{
		MySqlConnection myConnection = new MySqlConnection();
		myConnection.ConnectionString = "database=myDB;server=/var/lib/mysql/mysql.sock;user id=myUser; pwd=myPass";
		myConnection.Open();
	}
	</code>
	</example>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlInfoMessageEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:MySql.Data.MySqlClient.MySqlConnection.InfoMessage"/> event of a 
            <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlInfoMessageEventArgs">
            <summary>
            Provides data for the InfoMessage event. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlInfoMessageEventArgs.errors">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.Database.NPCEquipment">
            <summary>
            The NPCEqupment table holds standard equipment
            templates that npcs may wear!
            </summary>
        </member>
        <member name="F:DOL.Database.NPCEquipment.m_templateID">
            <summary>
            The Equipment Template ID
            </summary>
        </member>
        <member name="F:DOL.Database.NPCEquipment.m_slot">
            <summary>
            The Item Slot
            </summary>
        </member>
        <member name="F:DOL.Database.NPCEquipment.m_model">
            <summary>
            The Item Model
            </summary>
        </member>
        <member name="F:DOL.Database.NPCEquipment.m_color">
            <summary>
            The Item Color
            </summary>
        </member>
        <member name="F:DOL.Database.NPCEquipment.m_effect">
            <summary>
            The Item Effect
            </summary>
        </member>
        <member name="F:DOL.Database.NPCEquipment.m_extension">
            <summary>
            The Item Extension
            </summary>
        </member>
        <member name="M:DOL.Database.NPCEquipment.#ctor">
            <summary>
            The Constructor
            </summary>
        </member>
        <member name="P:DOL.Database.NPCEquipment.AutoSave">
            <summary>
            Autosave in table
            </summary>
        </member>
        <member name="P:DOL.Database.NPCEquipment.TemplateID">
            <summary>
            Template ID
            </summary>
        </member>
        <member name="P:DOL.Database.NPCEquipment.Slot">
            <summary>
            Slot
            </summary>
        </member>
        <member name="P:DOL.Database.NPCEquipment.Model">
            <summary>
            Model
            </summary>
        </member>
        <member name="P:DOL.Database.NPCEquipment.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:DOL.Database.NPCEquipment.Effect">
            <summary>
            Effect
            </summary>
        </member>
        <member name="P:DOL.Database.NPCEquipment.Extension">
            <summary>
            Extension
            </summary>
        </member>
        <member name="T:DOL.Database.Connection.ConnectionType">
            <summary>
            Enum what Datatstorage should be used
            </summary>
        </member>
        <member name="F:DOL.Database.Connection.ConnectionType.DATABASE_XML">
            <summary>
            Use XML-Files as Database
            </summary>
        </member>
        <member name="F:DOL.Database.Connection.ConnectionType.DATABASE_MYSQL">
            <summary>
            Use the internal MySQL-Driver for Database
            </summary>
        </member>
        <member name="F:DOL.Database.Connection.ConnectionType.DATABASE_MSSQL">
            <summary>
            Use Microsoft SQL-Server
            </summary>
        </member>
        <member name="F:DOL.Database.Connection.ConnectionType.DATABASE_ODBC">
            <summary>
            Use an ODBC-Datasource
            </summary>
        </member>
        <member name="F:DOL.Database.Connection.ConnectionType.DATABASE_OLEDB">
            <summary>
            Use an OLEDB-Datasource
            </summary>
        </member>
        <member name="T:DOL.Database.Cache.ICache">
            <summary>
            Implementors define a caching algorithm.
            </summary>
            <remarks>
            All implementations MUST be threadsafe
            </remarks>
        </member>
        <member name="P:DOL.Database.Cache.ICache.Keys">
            <summary>
            Gets a Collection of all Key that are in the Cache at the Moment
            </summary>
            <value>All Keys that are in the Cache</value>
        </member>
        <member name="P:DOL.Database.Cache.ICache.Item(System.Object)">
            <summary>
            Gets or sets cached data
            </summary>
            <value>The cached object or <c>null</c></value>
            <exception cref="T:DOL.Database.Cache.CacheException"></exception>
        </member>
        <member name="T:MySql.Data.Common.DBVersion">
            <summary>
            Summary description for Version.
            </summary>
        </member>
        <member name="M:MySql.Data.Common.Platform.#ctor">
            <summary>
            By creating a private ctor, we keep the compiler from creating a default ctor
            </summary>
        </member>
        <member name="T:DOL.Database.DBFactionAggroLevel">
            <summary>
            Aggro level of faction against character
            </summary>
            
        </member>
        <member name="M:DOL.Database.DBFactionAggroLevel.#ctor">
            <summary>
            Create faction aggro level against character
            </summary>
        </member>
        <member name="P:DOL.Database.DBFactionAggroLevel.AutoSave">
            <summary>
            Autosave table
            </summary>
        </member>
        <member name="P:DOL.Database.DBFactionAggroLevel.CharacterID">
            <summary>
            Character
            </summary>
        </member>
        <member name="P:DOL.Database.DBFactionAggroLevel.FactionID">
            <summary>
            index of this faction
            </summary>
        </member>
        <member name="P:DOL.Database.DBFactionAggroLevel.AggroLevel">
            <summary>
            aggro level/ relationship of faction against character
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.ClientFlags">
            <summary>
            Summary description for ClientParam.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.DBCmd">
            <summary>
            DB Operations Code
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlDbType">
            <summary>
            Specifies MySQL specific data type of a field, property, for use in a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/>.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Decimal">
            <summary> <see cref="F:MySql.Data.MySqlClient.MySqlDbType.Decimal"/><para>A fixed precision and scale numeric value between -1038 -1 and 10 38 -1.</para></summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Byte">
            <summary> <see cref="F:MySql.Data.MySqlClient.MySqlDbType.Byte"/><para>The signed range is -128 to 127. The unsigned range is 0 to 255.</para></summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Int16">
            <summary><see cref="F:MySql.Data.MySqlClient.MySqlDbType.Int16"/><para>A 16-bit signed integer. The signed range is -32768 to 32767. The unsigned range is 0 to 65535</para></summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Int24">
            <summary>Specifies a 24 (3 byte) signed or unsigned value.</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Int32">
            <summary><see cref="F:MySql.Data.MySqlClient.MySqlDbType.Int32"/><para>A 32-bit signed integer</para></summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Int64">
            <summary><see cref="F:MySql.Data.MySqlClient.MySqlDbType.Int64"/><para>A 64-bit signed integer.</para></summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Float">
            <summary><see cref="T:System.Single"/><para>A small (single-precision) floating-point number. Allowable values are -3.402823466E+38 to -1.175494351E-38, 0, and 1.175494351E-38 to 3.402823466E+38.</para></summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Double">
            <summary><see cref="F:MySql.Data.MySqlClient.MySqlDbType.Double"/><para>A normal-size (double-precision) floating-point number. Allowable values are -1.7976931348623157E+308 to -2.2250738585072014E-308, 0, and 2.2250738585072014E-308 to 1.7976931348623157E+308.</para></summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Timestamp">
            <summary>A timestamp. The range is '1970-01-01 00:00:00' to sometime in the year 2037</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Date">
            <summary>Date The supported range is '1000-01-01' to '9999-12-31'.</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Time">
            <summary> Time <para>The range is '-838:59:59' to '838:59:59'.</para></summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Datetime">
            <summary>DateTime The supported range is '1000-01-01 00:00:00' to '9999-12-31 23:59:59'.</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Year">
            <summary>A year in 2- or 4-digit format (default is 4-digit). The allowable values are 1901 to 2155, 0000 in the 4-digit year format, and 1970-2069 if you use the 2-digit format (70-69)</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Newdate">
            <summary><b>Obsolete</b>  Use Datetime or Date type</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.VarString">
            <summary>A variable-length string containing 0 to 65535 characters</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Bit">
            <summary>Bit-field data type</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.NewDecimal">
            <summary>New Decimal</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Enum">
            <summary>An enumeration. A string object that can have only one value, chosen from the list of values 'value1', 'value2', ..., NULL or the special "" error value. An ENUM can have a maximum of 65535 distinct values</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Set">
            <summary>A set. A string object that can have zero or more values, each of which must be chosen from the list of values 'value1', 'value2', ... A SET can have a maximum of 64 members.</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.TinyBlob">
            <summary>A BLOB or TEXT column with a maximum length of 255 (2^8 - 1) characters</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.MediumBlob">
            <summary>A BLOB or TEXT column with a maximum length of 16777215 (2^24 - 1) characters</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.LongBlob">
            <summary>A BLOB or TEXT column with a maximum length of 4294967295 or 4G (2^32 - 1) characters</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Blob">
            <summary>A BLOB or TEXT column with a maximum length of 65535 (2^16 - 1) characters</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.VarChar">
            <summary>A variable-length string containing 0 to 255 characters</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.String">
            <summary><b>Obsolete</b>  Use VarChar type</summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Geometry">
            <summary></summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.UByte">
            <summary></summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.UInt16">
            <summary></summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.UInt24">
            <summary></summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.UInt32">
            <summary></summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.UInt64">
            <summary></summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.Logger">
            <summary>
            Provides methods to output messages to our log
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.CharSetMap">
            <summary>
            Summary description for CharSetMap.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.CharSetMap.GetEncoding(MySql.Data.Common.DBVersion,System.String)">
            <summary>
            Returns the text encoding for a given MySQL character set name
            </summary>
            <param name="version">Version of the connection requesting the encoding</param>
            <param name="CharSetName">Name of the character set to get the encoding for</param>
            <returns>Encoding object for the given character set name</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.CharSetMap.InitializeMapping">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.Database.DBKeep">
            <summary>
            DB Keep is database of keep
            </summary>
        </member>
        <member name="M:DOL.Database.DBKeep.#ctor">
            <summary>
            Create a keep row
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.AutoSave">
            <summary>
            autosave this table
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.KeepID">
            <summary>
            Index of keep
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.Name">
            <summary>
            Name of keep
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.Region">
            <summary>
            Region of keep
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.X">
            <summary>
            X position of keep
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.Y">
            <summary>
            Y position of keep
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.Z">
            <summary>
            Z position of keep
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.Heading">
            <summary>
            heading of keep
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.Realm">
            <summary>
            Realm of keep
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.Level">
            <summary>
            Level of keep
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.ClaimedGuildName">
            <summary>
            The guild chich claim this keep
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.AlbionDifficultyLevel">
            <summary>
            Albion difficulty level
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.MidgardDifficultyLevel">
            <summary>
            Midgard difficulty level
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.HiberniaDifficultyLevel">
            <summary>
            Hibernia difficulty level
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.OriginalRealm">
            <summary>
            Realm at start
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.KeepType">
            <summary>
            Keep type
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeep.BaseLevel">
            <summary>
            The base keep level
            </summary>
        </member>
        <member name="T:DOL.Database.DBNews">
            <summary>
            Account table
            </summary>
        </member>
        <member name="M:DOL.Database.DBNews.#ctor">
            <summary>
            Create account row in DB
            </summary>
        </member>
        <member name="P:DOL.Database.DBNews.AutoSave">
            <summary>
            Auto save this table
            </summary>
        </member>
        <member name="T:MySql.Data.Types.MySqlUInt32">
            <summary>
            Summary description for MySqlInt32.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlField">
            <summary>
            Summary description for Field.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlCommand">
            <summary>Represents a SQL statement to execute against a MySQL database. This class cannot be inherited.</summary><remarks>
	<B>MySqlCommand</B> features the following methods for executing commands at a MySQL database:
	<list type="table">
		<listheader><term>Item</term><term>Description</term></listheader>
		<item>
			<term><a href="MySql.Data.MySqlClient.MySqlCommand.ExecuteReader_overloads.html">ExecuteReader</a></term>
			<description>Executes commands that return rows.</description>
		</item>
		<item>
			<term><a href="MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery.html">ExecuteNonQuery</a></term>
			<description>Executes commands such as SQL INSERT, DELETE, and UPDATE statements.</description>
		</item>
		<item>
			<term><a href="MySql.Data.MySqlClient.MySqlCommand.ExecuteScalar.html">ExecuteScalar</a></term>
			<description>Retrieves a single value (for example, an aggregate value) from a database.</description>
		</item>
	</list>

	You can reset the <B>CommandText</B> property and reuse the <B>MySqlCommand</B> 
	object. However, you must close the <A href="MySql.Data.MySqlClient.MySqlDataReader.html">MySqlDataReader</A> 
	before you can execute a new or previous command.

	If a <A href="MySql.Data.MySqlClient.MySqlException.html">MySqlException</A> is 
	generated by the method executing a <B>MySqlCommand</B>, the <A href="MySql.Data.MySqlClient.MySqlConnection.html">MySqlConnection</A> 
	remains open.  It is the responsibility of the programmer to close the connection.
	
	<note>
	Prior versions of the provider used the '@' symbol to mark parameters in SQL.  This is incompatible
	with MySQL user variables, so the provider now uses the '?' symbol to locate parameters in SQL.  To
	support older code, you can set 'old syntax=yes' on your connection string.  If you do this, please
	be aware that an exception will not be throw if you fail to define a parameter that  you intended to
	use in your SQL.
	</note>
	</remarks><example>
		The following example creates a <A href="frlrfsystemdatasqlclientsqlcommandclasstopic.htm">MySqlCommand</A> and 
		a <B>MySqlConnection</B>. The <B>MySqlConnection</B> is opened and set as the <A href="frlrfsystemdatasqlclientsqlcommandclassconnectiontopic.htm">Connection</A> 
		for the <B>MySqlCommand</B>. The example then calls <A href="frlrfsystemdatasqlclientsqlcommandclassexecutenonquerytopic.htm">ExecuteNonQuery</A>, 
		and closes the connection. To accomplish this, the <B>ExecuteNonQuery</B> is 
		passed a connection string and a query string that is a SQL INSERT 
		statement.
		<code lang="Visual Basic">
	Public Sub InsertRow(myConnectionString As String)
		" If the connection string is null, use a default.
		If myConnectionString = "" Then
			myConnectionString = "Database=Test;Data Source=localhost;User Id=username;Password=pass"
		End If
		Dim myConnection As New MySqlConnection(myConnectionString)
		Dim myInsertQuery As String = "INSERT INTO Orders (id, customerId, amount) Values(1001, 23, 30.66)"
		Dim myCommand As New MySqlCommand(myInsertQuery)
		myCommand.Connection = myConnection
		myConnection.Open()
		myCommand.ExecuteNonQuery()
		myCommand.Connection.Close()
	End Sub
		</code>
		<code lang="C#">
	public void InsertRow(string myConnectionString) 
	{
		// If the connection string is null, use a default.
		if(myConnectionString == "") 
		{
			myConnectionString = "Database=Test;Data Source=localhost;User Id=username;Password=pass";
		}
		MySqlConnection myConnection = new MySqlConnection(myConnectionString);
		string myInsertQuery = "INSERT INTO Orders (id, customerId, amount) Values(1001, 23, 30.66)";
		MySqlCommand myCommand = new MySqlCommand(myInsertQuery);
		myCommand.Connection = myConnection;
		myConnection.Open();
		myCommand.ExecuteNonQuery();
		myCommand.Connection.Close();
	}
		</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.#ctor">
            <overloads>
	<summary>
	Initializes a new instance of the MySqlCommand class.
	</summary>
	<example>
	The following example creates a MySqlCommand and sets some of its properties.
	<para></para>
	<note>This example shows how to use one of the overloaded 
	versions of the MySqlCommand constructor. For other examples that might be available, 
	see the individual overload topics.
	</note>
	
	<code lang="Visual Basic">
	Public Sub CreateMySqlCommand()
		Dim myConnection As New MySqlConnection _
				("Persist Security Info=False;database=test;server=myServer")
		myConnection.Open()
		Dim myTrans As MySqlTransaction = myConnection.BeginTransaction()
		Dim mySelectQuery As String = "SELECT * FROM MyTable"
		Dim myCommand As New MySqlCommand(mySelectQuery, myConnection, myTrans)
		myCommand.CommandTimeout = 20
	End Sub
	</code>
	<code lang="C#">
	public void CreateMySqlCommand() 
	{
		MySqlConnection myConnection = new MySqlConnection("Persist Security Info=False;
			database=test;server=myServer");
		myConnection.Open();
		MySqlTransaction myTrans = myConnection.BeginTransaction();
		string mySelectQuery = "SELECT * FROM myTable";
		MySqlCommand myCommand = new MySqlCommand(mySelectQuery, myConnection,myTrans);
		myCommand.CommandTimeout = 20;
	}
	</code>
	<code lang="C++">
	public:
	void CreateMySqlCommand()
	{
		MySqlConnection* myConnection = new MySqlConnection(S"Persist Security Info=False;
			database=test;server=myServer");
		myConnection-&gt;Open();
		MySqlTransaction* myTrans = myConnection-&gt;BeginTransaction();
		String* mySelectQuery = S"SELECT * FROM myTable";
		MySqlCommand* myCommand = new MySqlCommand(mySelectQuery, myConnection, myTrans);
		myCommand-&gt;CommandTimeout = 20;
	};
	</code>
	</example>
	</overloads><summary>
		Initializes a new instance of the MySqlCommand class.
	</summary><remarks>
		The base constructor initializes all fields to their default values. The 
		following table shows initial property values for an instance of <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>.
		<list type="table">
			<listheader><term>Properties</term><term>Initial Value</term></listheader>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/></term><term>empty string ("")</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout"/></term><term>0</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandType"/></term><term>CommandType.Text</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.Connection"/></term><term>Null</term></item>
		</list>
		<para>
		You can change the value for any of these properties through a separate call to 
		the property.</para>
	</remarks><example>
	The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and 
	sets some of its properties.

<code lang="Visual Basic">
Public Sub CreateMySqlCommand()
    Dim myCommand As New MySqlCommand()
    myCommand.CommandType = CommandType.Text
End Sub
</code>
<code lang="C#">
public void CreateMySqlCommand() 
{
   MySqlCommand myCommand = new MySqlCommand();
   myCommand.CommandType = CommandType.Text;
}
</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.#ctor(System.String)">
            <summary>
		Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> class with the text of the query.
	</summary><param name="cmdText">The text of the query.</param><remarks>
		When an instance of <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> is created, 
		the following read/write properties are set to initial values.		
		
		<list type="table">
			<listheader><term>Properties</term><term>Initial Value</term></listheader>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/></term><term><i>cmdText</i></term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout"/></term><term>0</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandType"/></term><term>CommandType.Text</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.Connection"/></term><term>Null</term></item>
		</list>
		<para>
		You can change the value for any of these properties through a separate call to 
		the property.</para>
	</remarks><example>
	The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and 
	sets some of its properties.

<code lang="Visual Basic">
Public Sub CreateMySqlCommand()
	Dim sql as String = "SELECT * FROM mytable"
    Dim myCommand As New MySqlCommand(sql)
    myCommand.CommandType = CommandType.Text
End Sub
</code>
<code lang="C#">
public void CreateMySqlCommand() 
{
	string sql = "SELECT * FROM mytable";
	MySqlCommand myCommand = new MySqlCommand(sql);
	myCommand.CommandType = CommandType.Text;
}
</code>
</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.#ctor(System.String,MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
	Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> class 
	with the text of the query and a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>.
	</summary><param name="cmdText">The text of the query.</param><param name="connection">A <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> that represents the 
		connection to an instance of SQL Server.
	</param><remarks>
		When an instance of <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> is created, 
		the following read/write properties are set to initial values.		
		
		<list type="table">
			<listheader><term>Properties</term><term>Initial Value</term></listheader>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/></term><term><i>cmdText</i></term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout"/></term><term>0</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandType"/></term><term>CommandType.Text</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.Connection"/></term><term><i>connection</i></term></item>
		</list>
		<para>
		You can change the value for any of these properties through a separate call to 
		the property.</para>
	</remarks><example>
	The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and 
	sets some of its properties.

<code lang="Visual Basic">
Public Sub CreateMySqlCommand()
	Dim conn as new MySqlConnection("server=myServer")
	Dim sql as String = "SELECT * FROM mytable"
    Dim myCommand As New MySqlCommand(sql, conn)
    myCommand.CommandType = CommandType.Text
End Sub
</code>
<code lang="C#">
public void CreateMySqlCommand() 
{
	MySqlConnection conn = new MySqlConnection("server=myserver")
	string sql = "SELECT * FROM mytable";
	MySqlCommand myCommand = new MySqlCommand(sql, conn);
	myCommand.CommandType = CommandType.Text;
}
</code>
</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.#ctor(System.String,MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction)">
            <summary>
	Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> class 
	with the text of the query, a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, and the 
	<see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/>.
	</summary><param name="cmdText">The text of the query.</param><param name="connection">A <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> that represents the 
		connection to an instance of SQL Server.
	</param><param name="transaction">The <see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/> in which the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> executes.</param><remarks>
		When an instance of <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> is created, 
		the following read/write properties are set to initial values.		
		
		<list type="table">
			<listheader><term>Properties</term><term>Initial Value</term></listheader>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/></term><term><i>cmdText</i></term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout"/></term><term>0</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandType"/></term><term>CommandType.Text</term></item>
			<item><term><see cref="P:MySql.Data.MySqlClient.MySqlCommand.Connection"/></term><term><i>connection</i></term></item>
		</list>
		<para>
		You can change the value for any of these properties through a separate call to 
		the property.</para>
	</remarks><example>
	The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and 
	sets some of its properties.

<code lang="Visual Basic">
Public Sub CreateMySqlCommand()
	Dim conn as new MySqlConnection("server=myServer")
	conn.Open();
	Dim txn as MySqlTransaction = conn.BeginTransaction()
	Dim sql as String = "SELECT * FROM mytable"
    Dim myCommand As New MySqlCommand(sql, conn, txn)
    myCommand.CommandType = CommandType.Text
End Sub
</code>
<code lang="C#">
public void CreateMySqlCommand() 
{
	MySqlConnection conn = new MySqlConnection("server=myserver")
	conn.Open();
	MySqlTransaction txn = conn.BeginTransaction();
	string sql = "SELECT * FROM mytable";
	MySqlCommand myCommand = new MySqlCommand(sql, conn, txn);
	myCommand.CommandType = CommandType.Text;
}
</code>
</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.Cancel">
            <summary>
            Attempts to cancel the execution of a MySqlCommand.  This operation is not supported.
            </summary>
            <remarks>
            Cancelling an executing command is currently not supported on any version of MySQL.
            </remarks>
            <exception cref="T:System.NotSupportedException">This operation is not supported.</exception>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.CreateParameter">
            <summary>
            Creates a new instance of a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.
            </summary>
            <remarks>
            This method is a strongly-typed version of <see cref="M:System.Data.IDbCommand.CreateParameter"/>.
            </remarks>
            <returns>A <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
            
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.Consume">
            <summary>
            Executes all remaining command buffers
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.GetNextResultSet(MySql.Data.MySqlClient.MySqlDataReader)">
            <summary>
            Executes command buffers until we hit the next resultset
            </summary>
            <returns>CommandResult containing the next resultset when hit
            or null if no more resultsets were found</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.CheckState">
            <summary>
            Check the connection to make sure
            	- it is open
            	- it is not currently being used by a reader
            	- and we have the right version of MySQL for the requested command type
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery">
            <summary>
		Executes a SQL statement against the connection and returns the number of rows affected.
	</summary><returns>Number of rows affected</returns><remarks>
		You can use ExecuteNonQuery to perform any type of database operation, 
		however any resultsets returned will not be available.  Any output parameters
		used in calling a stored procedure will be populated with data and can be
		retrieved after execution is complete.
		For UPDATE, INSERT, and DELETE statements, the return value is the number
		of rows affected by the command.  For all other types of statements, the return
		value is -1.
	</remarks><example>
	The following example creates a MySqlCommand and then 
		executes it using ExecuteNonQuery. The example is passed a string that is a 
		SQL statement (such as UPDATE, INSERT, or DELETE) and a string to use to 
		connect to the data source.
	<code lang="Visual Basic">
		Public Sub CreateMySqlCommand(myExecuteQuery As String, myConnection As MySqlConnection)
			Dim myCommand As New MySqlCommand(myExecuteQuery, myConnection)
			myCommand.Connection.Open()
			myCommand.ExecuteNonQuery()
			myConnection.Close()
		End Sub 
	</code>
	<code lang="C#">
		public void CreateMySqlCommand(string myExecuteQuery, MySqlConnection myConnection) 
		{
			MySqlCommand myCommand = new MySqlCommand(myExecuteQuery, myConnection);
			myCommand.Connection.Open();
			myCommand.ExecuteNonQuery();
			myConnection.Close();
		}
	</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteReader">
            <summary>Sends the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/> to the <see cref="T:MySql.Data.MySqlClient.MySqlConnection">Connection</see>
	and builds a <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/>.</summary><returns>A <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> object.</returns><remarks>
		<para>
			When the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandType"/> property is set to <B>StoredProcedure</B>, 
			the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/> property should be set to the name of the stored 
			procedure. The command executes this stored procedure when you call 
			<B>ExecuteReader</B>.
		</para>
		<para>
			While the <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> is in use, the associated 
			<see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is busy serving the <B>MySqlDataReader</B>. 
			While in this state, no other operations can be performed on the 
			<B>MySqlConnection</B> other than closing it. This is the case until the 
			<see cref="M:MySql.Data.MySqlClient.MySqlDataReader.Close"/> method of the <B>MySqlDataReader</B> is called.
		</para>
	</remarks><example>
	The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, then executes it by 
	passing a string that is a SQL SELECT statement, and a string to use to connect to the 
	data source.
	<code lang="Visual Basic">
Public Sub CreateMySqlDataReader(mySelectQuery As String, myConnection As MySqlConnection)
    Dim myCommand As New MySqlCommand(mySelectQuery, myConnection)
    myConnection.Open()
    Dim myReader As MySqlDataReader
    myReader = myCommand.ExecuteReader()
    Try
    While myReader.Read()
        Console.WriteLine(myReader.GetString(0))
    End While
Finally
    myReader.Close
    myConnection.Close
    End Try
End Sub
</code> 
<code lang="C#">
public void CreateMySqlDataReader(string mySelectQuery, MySqlConnection myConnection) 
 {
    MySqlCommand myCommand = new MySqlCommand(mySelectQuery, myConnection);
    myConnection.Open();
    MMySqlDataReader myReader;
    myReader = myCommand.ExecuteReader();
    try
    {
      while(myReader.Read()) 
      {
        Console.WriteLine(myReader.GetString(0));
      }
    }
    finally
    {
      myReader.Close();
      myConnection.Close();
    }
 }	
 </code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
		Sends the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/> to the <see cref="T:MySql.Data.MySqlClient.MySqlConnection">Connection</see>,
		and builds a <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> using one of the <see cref="T:System.Data.CommandBehavior"/> values.
	</summary><param name="behavior">One of the <see cref="T:System.Data.CommandBehavior"/> values.</param><remarks>
		<para>
			When the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandType"/> property is set to <B>StoredProcedure</B>, 
			the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/> property should be set to the name of the stored 
			procedure. The command executes this stored procedure when you call 
			<B>ExecuteReader</B>.
		</para>
		<para>
			The <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> supports a special mode that enables large binary 
			values to be read efficiently. For more information, see the <B>SequentialAccess</B> 
			setting for <see cref="T:System.Data.CommandBehavior"/>.
		</para>
		<para>
			While the <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> is in use, the associated 
			<see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is busy serving the <B>MySqlDataReader</B>. 
			While in this state, no other operations can be performed on the 
			<B>MySqlConnection</B> other than closing it. This is the case until the 
			<see cref="M:MySql.Data.MySqlClient.MySqlDataReader.Close"/> method of the <B>MySqlDataReader</B> is called.
			If the <B>MySqlDataReader</B> is created with <B>CommandBehavior</B> set to 
			<B>CloseConnection</B>, closing the <B>MySqlDataReader</B> closes the connection 
			automatically.	
		</para>
		<note>
			When calling ExecuteReader with the SingleRow behavior, you should be aware that using a <i>limit</i> 
			clause in your SQL will cause all rows (up to the limit given) to be retrieved by the client.  The 
			<see cref="M:MySql.Data.MySqlClient.MySqlDataReader.Read"/> method will still return false after the first row but pulling all rows of data
			into the client will have a performance impact.  If the <i>limit</i> clause is not necessary, it should 
			be avoided.
		</note>
	</remarks><returns>A <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> object.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteScalar">
            <summary>
	Executes the query, and returns the first column of the first row in the 
	result set returned by the query. Extra columns or rows are ignored.
	</summary><returns>
	The first column of the first row in the result set, or a null reference if the 
	result set is empty
	</returns><remarks>
	<para>Use the <B>ExecuteScalar</B> method to retrieve a single value (for example, 
	an aggregate value) from a database. This requires less code than using the 
	<see cref="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteReader"/> method, and then performing the operations necessary 
	to generate the single value using the data returned by a <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/>
	</para>
	<para>A typical <B>ExecuteScalar</B> query can be formatted as in the following C# 
	example:</para>
<code lang="C#">
cmd.CommandText = "select count(*) from region";
Int32 count = (int32) cmd.ExecuteScalar();
</code>
	</remarks><example>
	The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and then 
	executes it using <B>ExecuteScalar</B>. The example is passed a string that is a 
	SQL statement that returns an aggregate result, and a string to use to 
	connect to the data source.
	
	<code lang="Visual Basic">
Public Sub CreateMySqlCommand(myScalarQuery As String, myConnection As MySqlConnection)
    Dim myCommand As New MySqlCommand(myScalarQuery, myConnection)
    myCommand.Connection.Open()
    myCommand.ExecuteScalar()
    myConnection.Close()
End Sub 
</code>
<code lang="C#">
public void CreateMySqlCommand(string myScalarQuery, MySqlConnection myConnection) 
 {
    MySqlCommand myCommand = new MySqlCommand(myScalarQuery, myConnection);
    myCommand.Connection.Open();
    myCommand.ExecuteScalar();
    myConnection.Close();
 }
</code>
<code lang="C++">
public:
    void CreateMySqlCommand(String* myScalarQuery, MySqlConnection* myConnection)
    {
        MySqlCommand* myCommand = new MySqlCommand(myScalarQuery, myConnection);
        myCommand-&gt;Connection-&gt;Open();
        myCommand-&gt;ExecuteScalar();
        myConnection-&gt;Close();
    }	
</code>    
	
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.Prepare">
            <summary>
		Creates a prepared version of the command on an instance of MySQL Server.
	</summary><remarks>
		<para>
		Prepared statements are only supported on MySQL version 4.1 and higher.  Calling
		prepare while connected to earlier versions of MySQL will succeed but will execute
		the statement in the same way as unprepared.
		</para>
	</remarks><example>
	The following example demonstrates the use of the <b>Prepare</b> method.
	<code lang="Visual Basic">
	public sub PrepareExample()
		Dim cmd as New MySqlCommand("INSERT INTO mytable VALUES (?val)", myConnection)
		cmd.Parameters.Add( "?val", 10 )
		cmd.Prepare()
		cmd.ExecuteNonQuery()
		
		cmd.Parameters(0).Value = 20
		cmd.ExecuteNonQuery()
	end sub
	</code>
	<code lang="C#">
	private void PrepareExample()
	{
		MySqlCommand cmd = new MySqlCommand("INSERT INTO mytable VALUES (?val)", myConnection);
		cmd.Parameters.Add( "?val", 10 );
		cmd.Prepare();
		cmd.ExecuteNonQuery();
		
		cmd.Parameters[0].Value = 20;
		cmd.ExecuteNonQuery();
	}
	</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.SerializeParameter(MySql.Data.MySqlClient.PacketWriter,System.String)">
            <summary>
            Serializes the given parameter to the given memory stream
            </summary>
            <param name="writer">PacketWriter to stream parameter data to</param>
            <param name="parmName">Name of the parameter to serialize</param>
            <remarks>
            <para>This method is called by PrepareSqlBuffers to convert the given
            parameter to bytes and write those bytes to the given memory stream.
            </para>
            </remarks>
            <returns>True if the parameter was successfully serialized, false otherwise.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.PrepareSqlBuffers(System.String)">
            <summary>
            Prepares the necessary byte buffers from the given CommandText
            </summary>
            <returns>Array of byte buffers, one for each SQL command</returns>
            <remarks>
            Converts the CommandText into an array of tokens 
            using TokenizeSql and then into one or more byte buffers that can be
            sent to the server.  If the server supports batching (and we  have enabled it),
            then all commands result in a single byte array, otherwise a single buffer
            is created for each SQL command (as separated by ';').
            The SQL text is converted to bytes using the active encoding for the server.
            </remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.PrepareCommandText(System.String)">
            <summary>
            Prepares CommandText for use with the Prepare method
            </summary>
            <returns>Command text stripped of all paramter names</returns>
            <remarks>
            Takes the output of TokenizeSql and creates a single string of SQL
            that only contains '?' markers for each parameter.  It also creates
            the parameterMap array list that includes all the paramter names in the
            order they appeared in the SQL
            </remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.TokenizeSql(System.String)">
            <summary>
            Breaks the given SQL up into 'tokens' that are easier to output
            into another form (bytes, preparedText, etc).
            </summary>
            <param name="sql">SQL to be tokenized</param>
            <returns>Array of tokens</returns>
            <remarks>The SQL is tokenized at parameter markers ('?') and at 
            (';') sql end markers if the server doesn't support batching.
            </remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.System#ICloneable#Clone">
            <summary>
            Creates a clone of this MySqlCommand object.  CommandText, Connection, and Transaction properties
            are included as well as the entire parameter list.
            </summary>
            <returns>The cloned MySqlCommand object</returns>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.CommandText">
            <summary>
		Gets or sets the SQL statement to execute at the data source.
	</summary><value>
	The SQL statement or stored procedure to execute. The default is an empty string.
	</value><remarks>
		<para>
			When the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandType"/> property is set to <B>StoredProcedure</B>, 
			the <B>CommandText</B> property should be set to the name of the stored procedure. 
			The user may be required to use escape character syntax if the stored procedure name 
			contains any special characters. The command executes this stored procedure when 
			you call one of the Execute methods.
		</para>
	</remarks><example>
The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and sets some of its properties.
<code lang="Visual Basic">
Public Sub CreateMySqlCommand()
    Dim myCommand As New MySqlCommand()
    myCommand.CommandText = "SELECT * FROM Mytable ORDER BY id"
    myCommand.CommandType = CommandType.Text
End Sub
</code>
<code lang="C#">
public void CreateMySqlCommand() 
 {
    MySqlCommand myCommand = new MySqlCommand();
    myCommand.CommandText = "SELECT * FROM mytable ORDER BY id";
    myCommand.CommandType = CommandType.Text;
 }	
</code>
	</example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout">
            <summary>
	Gets or sets the wait time before terminating the attempt to execute a command 
and generating an error.
	</summary><value>
	The time (in seconds) to wait for the command to execute. The default is 0 
seconds.
	</value><remarks>
	MySQL currently does not support any method of canceling a pending or exeucting operation. All 
	commands issues against a MySQL server will execute until completion or exception occurs.
	</remarks>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.CommandType">
            <summary>Gets or sets a value indicating how the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/> property is to be interpreted.
	</summary><value>
	One of the <see cref="T:System.Data.CommandType"/> values. The default is <B>Text</B>.
	</value><remarks>
		<para>
			When you set the <B>CommandType</B> property to <B>StoredProcedure</B>, you 
			should set the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/> property to the name of the stored 
			procedure. The command executes this stored procedure when you call one of the 
			Execute methods.
		</para>
	</remarks><example>
The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and sets some of its properties.
<code lang="Visual Basic">
Public Sub CreateMySqlCommand()
    Dim myCommand As New MySqlCommand()
    myCommand.CommandType = CommandType.Text
End Sub
</code>
<code lang="C#">
public void CreateMySqlCommand() 
{
   MySqlCommand myCommand = new MySqlCommand();
   myCommand.CommandType = CommandType.Text;
}
</code>
</example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.IsPrepared">
            <!-- No matching elements were found for the following include tag --><include file="docs/mysqlcommand.xml" path="docs/IsPrepared/*"/>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.Connection">
            <summary>
		Gets or sets the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> used by this instance of the 
		<see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>.
	</summary><value>
		The connection to a data source. The default value is a null reference 
(<B>Nothing</B> in Visual Basic).
	</value><remarks>
		<para>
		If you set <B>Connection</B> while a transaction is in progress and the 
		<see cref="P:MySql.Data.MySqlClient.MySqlCommand.Transaction"/> property is not null, an <see cref="T:System.InvalidOperationException"/>
		is generated. If the <B>Transaction</B> property is not null and the transaction 
		has already been committed or rolled back, <B>Transaction</B> is set to 
		null.
		</para>
	</remarks><example>
The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and sets some of its properties.
<code lang="Visual Basic">
Public Sub CreateMySqlCommand()
    Dim mySelectQuery As String = "SELECT * FROM mytable ORDER BY id"
    Dim myConnectString As String = "Persist Security Info=False;database=test;server=myServer"
    Dim myCommand As New MySqlCommand(mySelectQuery)
    myCommand.Connection = New MySqlConnection(myConnectString)
    myCommand.CommandType = CommandType.Text
End Sub
</code>
<code lang="C#">
public void CreateMySqlCommand() 
 {
    string mySelectQuery = "SELECT * FROM mytable ORDER BY id";
    string myConnectString = "Persist Security Info=False;database=test;server=myServer";
    MySqlCommand myCommand = new MySqlCommand(mySelectQuery);
    myCommand.Connection = new MySqlConnection(myConnectString);
    myCommand.CommandType = CommandType.Text;
 }	
 </code>
 </example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.Parameters">
            <summary>Get the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/></summary><value>The parameters of the SQL statement or stored procedure. The default is 
an empty collection.</value><remarks>
	Connector/Net does not support unnamed parameters.  Every parameter added to the collection must
	have an associated name.
	</remarks><example>
The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and displays its parameters. 
To accomplish this, the method is passed a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, a query string 
that is a SQL SELECT statement, and an array of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> objects.
<code lang="Visual Basic">
Public Sub CreateMySqlCommand(myConnection As MySqlConnection, _
mySelectQuery As String, myParamArray() As MySqlParameter)
    Dim myCommand As New MySqlCommand(mySelectQuery, myConnection)
    myCommand.CommandText = "SELECT id, name FROM mytable WHERE age=?age"
    myCommand.UpdatedRowSource = UpdateRowSource.Both
    myCommand.Parameters.Add(myParamArray)
    Dim j As Integer
    For j = 0 To myCommand.Parameters.Count - 1
       myCommand.Parameters.Add(myParamArray(j))
    Next j
    Dim myMessage As String = ""
    Dim i As Integer
    For i = 0 To myCommand.Parameters.Count - 1
        myMessage += myCommand.Parameters(i).ToString() &amp; ControlChars.Cr
    Next i
    Console.WriteLine(myMessage)
End Sub
</code>
<code lang="C#">
public void CreateMySqlCommand(MySqlConnection myConnection, string mySelectQuery, 
	MySqlParameter[] myParamArray) 
{
   MySqlCommand myCommand = new MySqlCommand(mySelectQuery, myConnection);
   myCommand.CommandText = "SELECT id, name FROM mytable WHERE age=?age";    
   myCommand.Parameters.Add(myParamArray);
   for (int j=0; j&lt;myParamArray.Length; j++)
   {
      myCommand.Parameters.Add(myParamArray[j]) ;
   }
   string myMessage = "";
   for (int i = 0; i &lt; myCommand.Parameters.Count; i++) 
   {
      myMessage += myCommand.Parameters[i].ToString() + "\n";
   }
   MessageBox.Show(myMessage);
}	
</code>
</example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.Transaction">
            <summary>
		Gets or sets the <see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/> within which the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> executes.
	</summary><value>
		The <see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/>.  The default value is a null reference (<B>Nothing</B> in Visual Basic).
	</value><remarks>
		You cannot set the <B>Transaction</B> property if it is already set to a 
		specific value, and the command is in the process of executing. If you set the 
		transaction property to a <see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/> object that is not connected 
		to the same <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> as the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object, 
		an exception will be thrown the next time you attempt to execute a statement.
	</remarks>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.UpdatedRowSource">
            <summary>
		Gets or sets how command results are applied to the <see cref="T:System.Data.DataRow"/>
		when used by the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/> method 
		of the <see cref="T:System.Data.Common.DbDataAdapter"/>.
	</summary><value>One of the <see cref="T:System.Data.UpdateRowSource"/> values.</value><remarks>
		<para>
		The default <see cref="T:System.Data.UpdateRowSource"/> value is 
		<B>Both</B> unless the command is automatically generated (as in the case of the 
		<see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/>), in which case the default is <B>None</B>.
		</para>
	</remarks>
        </member>
        <member name="T:MySql.Data.Types.MySqlUInt64">
            <summary>
            Summary description for MySqlUInt64.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlParameterCollection">
            <summary>
            Represents a collection of parameters relevant to a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> as well as their respective mappings to columns in a <see cref="T:System.Data.DataSet"/>. This class cannot be inherited.
            </summary>
            <remarks>
	The number of the parameters in the collection must be equal to the number of 
parameter placeholders within the command text, or an exception will be generated.
</remarks><example>
	The following example creates multiple instances of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> 
	through the <B>MySqlParameterCollection</B> collection within the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.  
	These parameters are used to select data within the data source and place the data in 
	the <see cref="T:System.Data.DataSet"/>. This code assumes that a <B>DataSet</B> and a <B>MySqlDataAdapter</B> 
	have already been created with the appropriate schema, commands, and connection.
<code lang="Visual Basic">
Public Sub AddParameters()
    ' ...
    ' create myDataSet and myDataAdapter
    ' ...
    myDataAdapter.SelectCommand.Parameters.Add("@CategoryName", MySqlDbType.VarChar, 80).Value = "toasters"
    myDataAdapter.SelectCommand.Parameters.Add("@SerialNum", MySqlDbType.Long).Value = 239
    
    myDataAdapter.Fill(myDataSet)
End Sub 'AddSqlParameters 
	</code>
	<code lang="C#">
public void AddSqlParameters() 
{
// ...
// create myDataSet and myDataAdapter
// ...

  myDataAdapter.SelectCommand.Parameters.Add("@CategoryName", MySqlDbType.VarChar, 80).Value = "toasters";
  myDataAdapter.SelectCommand.Parameters.Add("@SerialNum", MySqlDbType.Long).Value = 239;
  myDataAdapter.Fill(myDataSet);

}
	</code>
</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies MySqlParameter objects from the MySqlParameterCollection to the specified array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Contains(System.Object)">
            <summary>
            Gets a value indicating whether a MySqlParameter exists in the collection.
            </summary>
            <param name="value">The value of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object to find. </param>
            <returns>true if the collection contains the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object; otherwise, false.</returns>
            <overloads>Gets a value indicating whether a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> exists in the collection.</overloads>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.IndexOf(System.Object)">
            <summary>
            Gets the location of a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> in the collection.
            </summary>
            <param name="value">The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object to locate. </param>
            <returns>The zero-based location of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> in the collection.</returns>
            <overloads>Gets the location of a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> in the collection.</overloads>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a MySqlParameter into the collection at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified MySqlParameter from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> from the collection using a specific index.
            </summary>
            <param name="index">The zero-based index of the parameter. </param>
            <overloads>Removes the specified <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> from the collection.</overloads>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Add(System.Object)">
            <summary>
            Adds the specified <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object to the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/>.
            </summary>
            <param name="value">The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to add to the collection.</param>
            <returns>The index of the new <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Contains(System.String)">
            <summary>
            Gets a value indicating whether a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> with the specified parameter name exists in the collection.
            </summary>
            <param name="name">The name of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object to find.</param>
            <returns>true if the collection contains the parameter; otherwise, false.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.IndexOf(System.String)">
            <summary>
            Gets the location of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> in the collection with a specific parameter name.
            </summary>
            <param name="parameterName">The name of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object to retrieve. </param>
            <returns>The zero-based location of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> in the collection.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the specified <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> from the collection using the parameter name.
            </summary>
            <param name="name">The name of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object to retrieve. </param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Add(MySql.Data.MySqlClient.MySqlParameter)">
            <summary>
            Adds the specified <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object to the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/>.
            </summary>
            <param name="value">The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to add to the collection.</param>
            <returns>The newly added <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/> given the specified parameter name and value.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/> of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to add to the collection.</param>
            <returns>The newly added <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Add(System.String,MySql.Data.MySqlClient.MySqlDbType)">
            <summary>
            Adds a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/> given the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">One of the <see cref="T:MySql.Data.MySqlClient.MySqlDbType"/> values. </param>
            <returns>The newly added <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Add(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32)">
            <summary>
            Adds a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/> with the parameter name, the data type, and the column length.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">One of the <see cref="T:MySql.Data.MySqlClient.MySqlDbType"/> values. </param>
            <param name="size">The length of the column.</param>
            <returns>The newly added <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Add(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32,System.String)">
            <summary>
            Adds a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/> with the parameter name, the data type, the column length, and the source column name.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">One of the <see cref="T:MySql.Data.MySqlClient.MySqlDbType"/> values. </param>
            <param name="size">The length of the column.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <returns>The newly added <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameterCollection.Count">
            <summary>
            Gets the number of MySqlParameter objects in the collection.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameterCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> at the specified index.
            </summary>
            <overloads>Gets the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> with a specified attribute.
            [C#] In C#, this property is the indexer for the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/> class.
            </overloads>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> with the specified name.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlParameter">
            <summary>
            Represents a parameter to a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, and optionally, its mapping to <see cref="T:System.Data.DataSet"/> columns. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.#ctor">
            <summary>
            Initializes a new instance of the MySqlParameter class.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> class with the parameter name and a value of the new MySqlParameter.
            </summary>
            <param name="parameterName">The name of the parameter to map. </param>
            <param name="value">An <see cref="T:System.Object"/> that is the value of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/>. </param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.#ctor(System.String,MySql.Data.MySqlClient.MySqlDbType)">
            <summary>
            Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> class with the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter to map. </param>
            <param name="dbType">One of the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.MySqlDbType"/> values. </param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.#ctor(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> class with the parameter name, the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.MySqlDbType"/>, and the size.
            </summary>
            <param name="parameterName">The name of the parameter to map. </param>
            <param name="dbType">One of the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.MySqlDbType"/> values. </param>
            <param name="size">The length of the parameter. </param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.#ctor(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> class with the parameter name, the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.MySqlDbType"/>, the size, and the source column name.
            </summary>
            <param name="parameterName">The name of the parameter to map. </param>
            <param name="dbType">One of the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.MySqlDbType"/> values. </param>
            <param name="size">The length of the parameter. </param>
            <param name="sourceColumn">The name of the source column. </param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.#ctor(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> class with the parameter name, the type of the parameter, the size of the parameter, a <see cref="T:System.Data.ParameterDirection"/>, the precision of the parameter, the scale of the parameter, the source column, a <see cref="T:System.Data.DataRowVersion"/> to use, and the value of the parameter.
            </summary>
            <param name="parameterName">The name of the parameter to map. </param>
            <param name="dbType">One of the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.MySqlDbType"/> values. </param>
            <param name="size">The length of the parameter. </param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection"/> values. </param>
            <param name="isNullable">true if the value of the field can be null, otherwise false. </param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/> is resolved.</param>
            <param name="scale">The total number of decimal places to which <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/> is resolved. </param>
            <param name="sourceColumn">The name of the source column. </param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion"/> values. </param>
            <param name="value">An <see cref="T:System.Object"/> that is the value of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/>. </param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.ToString">
            <summary>
            Overridden. Gets a string containing the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.ParameterName"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.DbType">
            <summary>
            Gets or sets the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.DbType"/> of the parameter.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.IsUnsigned">
            <summary></summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.Direction">
            <summary>
            Gets or sets a value indicating whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter.
            As of MySql version 4.1 and earlier, input-only is the only valid choice.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.IsNullable">
            <summary>
            Gets or sets a value indicating whether the parameter accepts null values.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.MySqlDbType">
            <summary>
            Gets or sets the MySqlDbType of the parameter.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.ParameterName">
            <summary>
            Gets or sets the name of the MySqlParameter.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.Precision">
            <summary>
            Gets or sets the maximum number of digits used to represent the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/> property.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.Scale">
            <summary>
            Gets or sets the number of decimal places to which <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/> is resolved.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.Size">
            <summary>
            Gets or sets the maximum size, in bytes, of the data within the column.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.SourceColumn">
            <summary>
            Gets or sets the name of the source column that is mapped to the <see cref="T:System.Data.DataSet"/> and used for loading or returning the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/>.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.SourceVersion">
            <summary>
            Gets or sets the <see cref="T:System.Data.DataRowVersion"/> to use when loading <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/>.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.NativeDriver">
            <summary>
            Summary description for Driver.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.NativeDriver.SetDatabase(System.String)">
            <summary>
            Sets the current database for the this connection
            </summary>
            <param name="dbName"></param>
        </member>
        <member name="M:MySql.Data.MySqlClient.NativeDriver.SetConnectionFlags">
            <summary>
            Return the appropriate set of connection flags for our
            server capabilities and our user requested options.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.NativeDriver.Authenticate411">
            <summary>Perform an authentication against a 4.1.1 server</summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.NativeDriver.SendFileToServer(System.String)">
            <summary>
            Sends the specified file to the server. 
            This supports the LOAD DATA LOCAL INFILE
            </summary>
            <param name="filename"></param>
        </member>
        <member name="P:MySql.Data.MySqlClient.NativeDriver.SupportsBatch">
            <summary>
            Returns true if this connection can handle batch SQL natively
            This means MySQL 4.1.1 or later.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.CommandResult">
            <summary>
            Summary description for CommandResult.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.CommandResult.Load">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.CommandResult.ReadDataRow(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.CommandResult.Consume">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.Database.Mob">
            <summary>
            The database side of GameMob
            </summary>
        </member>
        <member name="M:DOL.Database.Mob.#ctor">
            <summary>
            The Constructor
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.AutoSave">
            <summary>
            AutoSave
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.ClassType">
            <summary>
            The Mob's ClassType
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.Name">
            <summary>
            The Mob's Name
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.Guild">
            <summary>
            The Mob's Guild Name
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.X">
            <summary>
            The Mob's X Position
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.Y">
            <summary>
            The Mob's Y Position
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.Z">
            <summary>
            The Mob's Z Position
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.Speed">
            <summary>
            The Mob's Max Speed
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.Heading">
            <summary>
            The Mob's Heading
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.Region">
            <summary>
            The Mob's Region ID
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.Model">
            <summary>
            The Mob's Model
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.Size">
            <summary>
            The Mob's Size
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.Level">
            <summary>
            The Mob's Level
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.Realm">
            <summary>
            The Mob's Realm
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.EquipmentTemplateID">
            <summary>
            The Mob's Equipment Template ID
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.ItemsListTemplateID">
            <summary>
            The Mob's Items List Template ID
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.Flags">
            <summary>
            The Mob's Flags
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.AggroLevel">
            <summary>
            The Mob's Aggro Level
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.AggroRange">
            <summary>
            The Mob's Aggro Range
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.MeleeDamageType">
            <summary>
            The Mob's Melee Damage Type
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.RespawnInterval">
            <summary>
            The Mob's Respawn Interval
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.FactionID">
            <summary>
            The Mob's Faction ID
            </summary>
        </member>
        <member name="P:DOL.Database.Mob.BodyType">
            <summary>
            The mob's body type
            </summary>
        </member>
        <member name="T:DOL.Database.Account">
            <summary>
            Account table
            </summary>
        </member>
        <member name="M:DOL.Database.Account.#ctor">
            <summary>
            Create account row in DB
            </summary>
        </member>
        <member name="F:DOL.Database.Account.Characters">
            <summary>
            List of charcter the account own
            </summary>
        </member>
        <member name="P:DOL.Database.Account.AutoSave">
            <summary>
            Auto save this table
            </summary>
        </member>
        <member name="P:DOL.Database.Account.Name">
            <summary>
            The name of the account (login)
            </summary>
        </member>
        <member name="P:DOL.Database.Account.Password">
            <summary>
            The password of this account encode in MD5 or clear when start with ##
            </summary>
        </member>
        <member name="P:DOL.Database.Account.CreationDate">
            <summary>
            The date of creation of this account
            </summary>
        </member>
        <member name="P:DOL.Database.Account.LastLogin">
            <summary>
            The date of last login of this account
            </summary>
        </member>
        <member name="P:DOL.Database.Account.Realm">
            <summary>
            The realm of this account
            </summary>
        </member>
        <member name="P:DOL.Database.Account.PrivLevel">
            <summary>
            The private level of this account (admin=3, GM=2 or player=1)
            </summary>
        </member>
        <member name="P:DOL.Database.Account.Status">
            <summary>
            Status of this account
            </summary>
        </member>
        <member name="P:DOL.Database.Account.Mail">
            <summary>
            The mail of this account
            </summary>
        </member>
        <member name="P:DOL.Database.Account.LastLoginIP">
            <summary>
            The last IP logged onto this account
            </summary>
        </member>
        <member name="P:DOL.Database.Account.Language">
            <summary>
            The player language
            </summary>
        </member>
        <member name="T:MySql.Data.Types.MySqlInt16">
            <summary>
            Summary description for MySqlInt16.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.PacketWriter">
            <summary>
            Summary description for PacketWriter.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.PacketWriter.WriteInteger(System.Int64,System.Int32)">
            <summary>
            WriteInteger
            </summary>
            <param name="v"></param>
            <param name="numbytes"></param>
        </member>
        <member name="T:MySql.Data.MySqlClient.PacketReader">
            <summary>
            Summary description for PacketWriter.
            </summary>
        </member>
        <member name="T:DOL.Database.WorldObject">
            <summary>
            Objects as Tables, Lights, Bags non static in Game.
            </summary>
        </member>
        <member name="T:DOL.Database.DBKeepComponent">
            <summary>
            DB Keep component is database of keep
            </summary>
        </member>
        <member name="M:DOL.Database.DBKeepComponent.#ctor">
            <summary>
            Create a component of keep (wall, tower,gate, ...)
            </summary>
        </member>
        <member name="M:DOL.Database.DBKeepComponent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a component of keep (wall, tower,gate, ...)
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepComponent.AutoSave">
            <summary>
            autosave table
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepComponent.X">
            <summary>
            X position of component
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepComponent.Y">
            <summary>
            Y position of component
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepComponent.Heading">
            <summary>
            Heading of component
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepComponent.Health">
            <summary>
            Health of component
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepComponent.Skin">
            <summary>
            Skin of component (see enum skin in GameKeepComponent)
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepComponent.KeepID">
            <summary>
            Index of keep
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepComponent.ID">
            <summary>
            Index of component
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlDataReader">
            <summary>
            Provides a means of reading a forward-only stream of rows from a MySQL database. This class cannot be inherited.
            </summary>
            <remarks>
	<para>To create a <B>MySQLDataReader</B>, you must call the <see cref="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteReader"/>
	method of the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object, rather than directly using a constructor.
	</para>
	<para>While the <B>MySqlDataReader</B> is in use, the associated <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>
	 is busy serving the <B>MySqlDataReader</B>, and no other operations can be performed 
	 on the <B>MySqlConnection</B> other than closing it. This is the case until the 
	 <see cref="M:MySql.Data.MySqlClient.MySqlDataReader.Close"/> method of the <B>MySqlDataReader</B> is called. 
	 </para>
	<para><see cref="P:MySql.Data.MySqlClient.MySqlDataReader.IsClosed"/> and <see cref="P:MySql.Data.MySqlClient.MySqlDataReader.RecordsAffected"/> 
	are the only properties that you can call after the <B>MySqlDataReader</B> is 
	closed. Though the <B>RecordsAffected</B> property may be accessed at any time 
	while the <B>MySqlDataReader</B> exists, always call <B>Close</B> before returning 
	the value of <B>RecordsAffected</B> to ensure an accurate return value.
	</para>
	<para>For optimal performance, <B>MySqlDataReader</B> avoids creating 
	unnecessary objects or making unnecessary copies of data. As a result, multiple calls 
	to methods such as <see cref="M:MySql.Data.MySqlClient.MySqlDataReader.GetValue(System.Int32)"/> return a reference to the 
	same object. Use caution if you are modifying the underlying value of the objects 
	returned by methods such as <B>GetValue</B>.
	</para>
</remarks><example>
	The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, 
	a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, and a <B>MySqlDataReader</B>. The example reads through 
	the data, writing it out to the console. Finally, the example closes the <B>MySqlDataReader</B>, then the 
	<B>MySqlConnection</B>.
	<code lang="Visual Basic">
Public Sub ReadMyData(myConnString As String)
    Dim mySelectQuery As String = "SELECT OrderID, CustomerID FROM Orders"
    Dim myConnection As New MySqlConnection(myConnString)
    Dim myCommand As New MySqlCommand(mySelectQuery, myConnection)
    myConnection.Open()
    Dim myReader As MySqlDataReader
    myReader = myCommand.ExecuteReader()
    ' Always call Read before accessing data.
    While myReader.Read()
        Console.WriteLine((myReader.GetInt32(0) &amp; ", " &amp; myReader.GetString(1)))
    End While
    ' always call Close when done reading.
    myReader.Close()
    ' Close the connection when done with it.
    myConnection.Close()
End Sub 'ReadMyData
	</code>
	<code lang="C#">
public void ReadMyData(string myConnString) {
    string mySelectQuery = "SELECT OrderID, CustomerID FROM Orders";
    MySqlConnection myConnection = new MySqlConnection(myConnString);
    MySqlCommand myCommand = new MySqlCommand(mySelectQuery,myConnection);
    myConnection.Open();
    MySqlDataReader myReader;
    myReader = myCommand.ExecuteReader();
    // Always call Read before accessing data.
    while (myReader.Read()) {
       Console.WriteLine(myReader.GetInt32(0) + ", " + myReader.GetString(1));
    }
    // always call Close when done reading.
    myReader.Close();
    // Close the connection when done with it.
    myConnection.Close();
 }
	</code>
</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.Close">
            <summary>
            Closes the MySqlDataReader object.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a byte.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer an array starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal. </param>
            <param name="dataIndex">The index within the field from which to begin the read operation. </param>
            <param name="buffer">The buffer into which to read the stream of bytes. </param>
            <param name="bufferIndex">The index for buffer to begin the read operation. </param>
            <param name="length">The maximum length to copy into the buffer. </param>
            <returns>The actual number of bytes read.</returns>
            <!-- No matching elements were found for the following include tag --><include file="docs/MySqlDataReader.xml" path="MyDocs/MyMembers[@name=&quot;GetBytes&quot;]/*"/>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of the specified column as a single character.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array starting at the given buffer offset.
            </summary>
            <param name="i"></param>
            <param name="fieldOffset"></param>
            <param name="buffer"></param>
            <param name="bufferoffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the source data type.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetMySqlDateTime(System.Int32)">
            <summary>Gets the value of the specified column as a <see cref="T:MySql.Data.Types.MySqlDateTime"/> object.</summary><remarks>
	</remarks><param name="index">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetDateTime(System.Int32)">
            <summary>Gets the value of the specified column as a <see cref="T:System.DateTime"/> object.</summary><remarks>
		<note>
		<para>
		MySql allows date columns to contain the value '0000-00-00' and datetime
		columns to contain the value '0000-00-00 00:00:00'.  The DateTime structure cannot contain
		or represent these values.  To read a datetime value from a column that might
		contain zero values, use <see cref="M:MySql.Data.MySqlClient.MySqlDataReader.GetMySqlDateTime(System.Int32)"/>.
		</para>
		<para>
		The behavior of reading a zero datetime column using this method is defined by the
		<i>ZeroDateTimeBehavior</i> connection string option.  For more information on this option,
		please refer to <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/>.
		</para>
		</note>
	</remarks><param name="index">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetDecimal(System.Int32)">
            <summary>Gets the value of the specified column as a <see cref="T:System.Decimal"/> object.</summary><remarks></remarks><param name="index">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetDouble(System.Int32)">
            <summary>Gets the value of the specified column as a double-precision floating point number.</summary><remarks></remarks><param name="index">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the Type that is the data type of the object.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetFloat(System.Int32)">
            <summary>Gets the value of the specified column as a single-precision floating point number.</summary><param name="index">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetGuid(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="docs/MySqlDataReader.xml" path="docs/GetGuid/*"/>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetInt16(System.Int32)">
            <summary>Gets the value of the specified column as a 16-bit signed integer.</summary><param name="index">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetInt32(System.Int32)">
            <summary>Gets the value of the specified column as a 32-bit signed integer.</summary><param name="index">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetInt64(System.Int32)">
            <summary>Gets the value of the specified column as a 64-bit signed integer.</summary><param name="index">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetName(System.Int32)">
            <summary>
            Gets the name of the specified column.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal, given the name of the column.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the column metadata of the MySqlDataReader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetString(System.Int32)">
            <summary>Gets the value of the specified column as a <see cref="T:System.String"/> object.</summary><remarks></remarks><param name="index">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetTimeSpan(System.Int32)">
            <summary>Gets the value of the specified column as a <see cref="T:System.TimeSpan"/> object.</summary><remarks>
	</remarks><param name="index">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value of the specified column in its native format.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetValues(System.Object[])">
            <summary>
            Gets all attribute columns in the collection for the current row.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetUInt16(System.Int32)">
            <summary>Gets the value of the specified column as a 16-bit unsigned integer.</summary><param name="index">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetUInt32(System.Int32)">
            <summary>Gets the value of the specified column as a 32-bit unsigned integer.</summary><param name="index">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetUInt64(System.Int32)">
            <summary>Gets the value of the specified column as a 64-bit unsigned integer.</summary><param name="index">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.IsDBNull(System.Int32)">
            <summary>
            Gets a value indicating whether the column contains non-existent or missing values.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.NextResult">
            <summary>
            Advances the data reader to the next result, when reading the results of batch SQL statements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.Read">
            <summary>
            Advances the MySqlDataReader to the next record.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.  This method is not 
            supported currently and always returns 0.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataReader.HasRows">
            <summary>
            Gets a value indicating whether the MySqlDataReader contains one or more rows.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataReader.Item(System.Int32)">
            <summary>
            Overloaded. Gets the value of a column in its native format.
            In C#, this property is the indexer for the MySqlDataReader class.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataReader.Item(System.String)">
            <summary>
            Gets the value of a column in its native format.
            [C#] In C#, this property is the indexer for the MySqlDataReader class.
            </summary>
        </member>
        <member name="T:DOL.Database.DBSpecXAbility">
            <summary>
            defines what abilities are available at what speclevels
            </summary>
        </member>
        <member name="T:DOL.Database.DBLineXSpell">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.Database.Attributes.Relation">
            <summary>
            Attribute to indicate an Relationship to another DatabaseObject.
            </summary>
            
        </member>
        <member name="M:DOL.Database.Attributes.Relation.#ctor">
            <summary>
            Constructor for the Relation-Attribute.
            Standartsettings are:
            	AutoLoad = true
            	AutoDelete = false
            </summary>
        </member>
        <member name="P:DOL.Database.Attributes.Relation.LocalField">
            <summary>
            Property to set/get the Name of the LocalField for the Relation
            </summary>
            <value>Name of the Local Field</value>
        </member>
        <member name="P:DOL.Database.Attributes.Relation.RemoteField">
            <summary>
            Property to set/get the RemoteField of the Relation
            </summary>
            <value>Name of the Remote Field</value>
        </member>
        <member name="P:DOL.Database.Attributes.Relation.AutoLoad">
            <summary>
            Property to set/get Autoload
            If Autoload is true the Releation is filled on Object load/reload
            If false you have to fill the Relation with Database.FillObjectRelations(DataObject)
            </summary>
            <value><c>true</c> if Relation sould be filled automatical</value>
        </member>
        <member name="P:DOL.Database.Attributes.Relation.AutoDelete">
            <summary>
            AutoDelete-Property to set/get AutoDelete
            If set to true, all related Objects are deleted from Database when the Object is deleted
            If set to false, the related Objects are NOT deleted.
            </summary>
            <value><c>true</c> if related objects are deleted as well</value>
        </member>
        <member name="T:MySql.Data.Types.MySqlByte">
            <summary>
            Summary description for MySqlByte.
            </summary>
        </member>
        <member name="T:DOL.Database.DBSpell">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.Database.DBNpcTemplate">
            <summary>
            DataTable class for NPC Templates
            </summary>
        </member>
        <member name="M:DOL.Database.DBNpcTemplate.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.AutoSave">
            <summary>
            AutoSave in table?
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.TemplateId">
            <summary>
            Template ID
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.ClassType">
            <summary>
            Class Type
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.GuildName">
            <summary>
            GuildName
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.Model">
            <summary>
            Model
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.Size">
            <summary>
            Size
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.Level">
            <summary>
            Level Range
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.MaxSpeed">
            <summary>
            MaxSpeed
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.EquipmentTemplateID">
            <summary>
            EquipmentTemplateID
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.Ghost">
            <summary>
            Ghost
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.MeleeDamageType">
            <summary>
            MeleeDamageType
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.ParryChance">
            <summary>
            ParryChance
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.EvadeChance">
            <summary>
            EvadeChance
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.BlockChance">
            <summary>
            BlockChance
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.LeftHandSwingChance">
            <summary>
            LeftHandSwingChance
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.Spells">
            <summary>
            Spells
            </summary>
        </member>
        <member name="P:DOL.Database.DBNpcTemplate.Styles">
            <summary>
            Styles
            </summary>
        </member>
        <member name="T:DOL.Database.DBMobXLootTemplate">
            <summary>
            Database Storage of Mob LootTemplate Relation
            </summary>
        </member>
        <member name="M:DOL.Database.DBMobXLootTemplate.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:DOL.Database.DBMobXLootTemplate.AutoSave">
            <summary>
            Auto Save
            </summary>
        </member>
        <member name="P:DOL.Database.DBMobXLootTemplate.MobName">
            <summary>
            Mob Name
            </summary>
        </member>
        <member name="P:DOL.Database.DBMobXLootTemplate.LootTemplateName">
            <summary>
            Loot Template Name
            </summary>
        </member>
        <member name="P:DOL.Database.DBMobXLootTemplate.DropCount">
            <summary>
            Drop Count
            </summary>
        </member>
        <member name="T:DOL.Database.DBLootTemplate">
            <summary>
            Database Storage of Tasks
            </summary>
        </member>
        <member name="T:DOL.Database.DBBannedAccount">
            <summary>
            Bans table
            </summary>
        </member>
        <member name="P:DOL.Database.DBBannedAccount.IDBan">
            <summary>
            Create Banned account or IP
            </summary>
        </member>
        <member name="P:DOL.Database.DBBannedAccount.Author">
            <summary>
            Who have ban player
            </summary>
        </member>
        <member name="P:DOL.Database.DBBannedAccount.Type">
            <summary>
            type of ban (ip, account or both)
            </summary>
        </member>
        <member name="P:DOL.Database.DBBannedAccount.Ip">
            <summary>
            IP banned
            </summary>
        </member>
        <member name="P:DOL.Database.DBBannedAccount.Account">
            <summary>
            Account banned
            </summary>
        </member>
        <member name="P:DOL.Database.DBBannedAccount.DateTime">
            <summary>
            When have been ban this account/IP
            </summary>
        </member>
        <member name="P:DOL.Database.DBBannedAccount.Reason">
            <summary>
            reason of ban
            </summary>
        </member>
        <member name="P:DOL.Database.DBBannedAccount.AutoSave">
            <summary>
            autosave ban table
            </summary>
        </member>
        <member name="T:DOL.Database.Connection.QueryCallback">
            <summary>
            Called after mysql query.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:DOL.Database.Connection.DataConnection">
            <summary>
            Class for Handling the Connection to the ADO.Net Layer of the Databases.
            Funktions for loading and storing the complete Dataset are in there.
            </summary>
        </member>
        <member name="F:DOL.Database.Connection.DataConnection.log">
            <summary>
            Defines a logger for this class.
            </summary>
        </member>
        <member name="M:DOL.Database.Connection.DataConnection.#ctor(DOL.Database.Connection.ConnectionType,System.String)">
            <summary>
            Constructor to set up a Database
            </summary>
            <param name="connType">Connection-Type the Database should use</param>
            <param name="connString">Connection-String to indicate the Parameters of the Datasource.
                XML = Directory where the XML-Files sould be stored
                MYSQL = ADO.NET ConnectionString 
                MSSQL = ADO.NET ConnectionString 
                OLEDB = ADO.NET ConnectionString 
                ODBC = ADO.NET ConnectionString 
            </param>
        </member>
        <member name="M:DOL.Database.Connection.DataConnection.Escape(System.String)">
            <summary>
            escape the strange character from string
            </summary>
            <param name="s">the string</param>
            <returns>the string with escaped character</returns>
        </member>
        <member name="M:DOL.Database.Connection.DataConnection.ExecuteNonQuery(System.String)">
            <summary>
            Execute a non query like update or delete
            </summary>
            <param name="sqlcommand"></param>
            <returns>number of rows affected</returns>
        </member>
        <member name="M:DOL.Database.Connection.DataConnection.ExecuteSelect(System.String,DOL.Database.Connection.QueryCallback)">
            <summary>
            Execute select on sql database
            Close returned datareader when done or use using(reader) { ... }
            </summary>
            <param name="sqlcommand"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.Database.Connection.DataConnection.ExecuteScalar(System.String)">
            <summary>
            Execute scalar on sql database
            </summary>
            <param name="sqlcommand"></param>
            <returns></returns>
        </member>
        <member name="M:DOL.Database.Connection.DataConnection.CheckOrCreateTable(System.Data.DataTable)">
            <summary>
            Create the table in mysql
            </summary>
            <param name="table">the table to create</param>
        </member>
        <member name="M:DOL.Database.Connection.DataConnection.GetDBDateFormat">
            <summary>
            Gets the format for date times
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.Database.Connection.DataConnection.LoadDataSet(System.String,System.Data.DataSet)">
            <summary>
            Load an Dataset with the a Table
            </summary>
            <param name="tableName">Name of the Table to Load in the DataSet</param>
            <param name="dataSet">DataSet that sould be filled</param>
            <exception cref="T:DOL.Database.DatabaseException"></exception>
        </member>
        <member name="M:DOL.Database.Connection.DataConnection.SaveDataSet(System.String,System.Data.DataSet)">
            <summary>
            Writes all Changes in a Dataset to the Table
            </summary>
            <param name="tableName">Name of the Table to update</param>
            <param name="dataSet">DataSet set contains the Changes that sould be written</param>
            <exception cref="T:DOL.Database.DatabaseException"></exception>
        </member>
        <member name="M:DOL.Database.Connection.DataConnection.PrintDatasetErrors(System.Data.DataSet)">
            <summary>
            Print the dataset error
            </summary>
            <param name="dataset">the dataset to check</param>
        </member>
        <member name="P:DOL.Database.Connection.DataConnection.IsSQLConnection">
            <summary>
            Check if SQL connection
            </summary>
        </member>
        <member name="P:DOL.Database.Connection.DataConnection.ConnectionType">
            <summary>
            The connection type to DB (xml, mysql,...)
            </summary>
        </member>
        <member name="T:MySql.Data.Types.MySqlDouble">
            <summary>
            Summary description for MySqlDouble.
            </summary>
        </member>
        <member name="T:MySql.Data.Types.MySqlConversionException">
            <summary>
            Summary description for MySqlConversionException.
            </summary>
        </member>
        <member name="M:MySql.Data.Types.MySqlConversionException.#ctor(System.String)">
            <summary>Ctor</summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.PreparedStatement">
            <summary>
            Summary description for PreparedStatement.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlHelper">
            <summary>
            Helper class that makes it easier to work with the provider.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single command against a MySQL database.  The <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is assumed to be
            open when the method is called and remains open after the method completes.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">SQL command to be executed</param>
            <param name="commandParameters">Array of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> objects to use with the command.</param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteNonQuery(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single command against a MySQL database.  A new <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is created
            using the <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/> given.
            </summary>
            <param name="connectionString"><see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/> to use</param>
            <param name="commandText">SQL command to be executed</param>
            <param name="parms">Array of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> objects to use with the command.</param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteDataRow(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single SQL command and returns the first row of the resultset.  A new MySqlConnection object
            is created, opened, and closed during this method.
            </summary>
            <param name="connectionString">Settings to be used for the connection</param>
            <param name="commandText">Command to execute</param>
            <param name="parms">Parameters to use for the command</param>
            <returns>DataRow containing the first row of the resultset</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteDataset(System.String,System.String)">
            <summary>
            Executes a single SQL command and returns the resultset in a <see cref="T:System.Data.DataSet"/>.  
            A new MySqlConnection object is created, opened, and closed during this method.
            </summary>
            <param name="connectionString">Settings to be used for the connection</param>
            <param name="commandText">Command to execute</param>
            <returns><see cref="T:System.Data.DataSet"/> containing the resultset</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteDataset(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single SQL command and returns the resultset in a <see cref="T:System.Data.DataSet"/>.  
            A new MySqlConnection object is created, opened, and closed during this method.
            </summary>
            <param name="connectionString">Settings to be used for the connection</param>
            <param name="commandText">Command to execute</param>
            <param name="commandParameters">Parameters to use for the command</param>
            <returns><see cref="T:System.Data.DataSet"/> containing the resultset</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            Executes a single SQL command and returns the resultset in a <see cref="T:System.Data.DataSet"/>.  
            The state of the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object remains unchanged after execution
            of this method.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">Command to execute</param>
            <returns><see cref="T:System.Data.DataSet"/> containing the resultset</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlConnection,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single SQL command and returns the resultset in a <see cref="T:System.Data.DataSet"/>.  
            The state of the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object remains unchanged after execution
            of this method.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">Command to execute</param>
            <param name="commandParameters">Parameters to use for the command</param>
            <returns><see cref="T:System.Data.DataSet"/> containing the resultset</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.UpdateDataSet(System.String,System.String,System.Data.DataSet,System.String)">
            <summary>
            Updates the given table with data from the given <see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="connectionString">Settings to use for the update</param>
            <param name="commandText">Command text to use for the update</param>
            <param name="ds"><see cref="T:System.Data.DataSet"/> containing the new data to use in the update</param>
            <param name="tablename">Tablename in the dataset to update</param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.String,MySql.Data.MySqlClient.MySqlParameter[],System.Boolean)">
            <summary>
            Executes a single command against a MySQL database, possibly inside an existing transaction.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use for the command</param>
            <param name="transaction"><see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/> object to use for the command</param>
            <param name="commandText">Command text to use</param>
            <param name="commandParameters">Array of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> objects to use with the command</param>
            <param name="ExternalConn">True if the connection should be preserved, false if not</param>
            <returns><see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> object ready to read the results of the command</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteReader(System.String,System.String)">
            <summary>
            Executes a single command against a MySQL database.
            </summary>
            <param name="connectionString">Settings to use for this command</param>
            <param name="commandText">Command text to use</param>
            <returns><see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> object ready to read the results of the command</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteReader(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single command against a MySQL database.
            </summary>
            <param name="connectionString">Settings to use for this command</param>
            <param name="commandText">Command text to use</param>
            <param name="commandParameters">Array of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> objects to use with the command</param>
            <returns><see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> object ready to read the results of the command</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteScalar(System.String,System.String)">
            <summary>
            Execute a single command against a MySQL database.
            </summary>
            <param name="connectionString">Settings to use for the update</param>
            <param name="commandText">Command text to use for the update</param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteScalar(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a single command against a MySQL database.
            </summary>
            <param name="connectionString">Settings to use for the command</param>
            <param name="commandText">Command text to use for the command</param>
            <param name="commandParameters">Parameters to use for the command</param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            Execute a single command against a MySQL database.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">Command text to use for the command</param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a single command against a MySQL database.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">Command text to use for the command</param>
            <param name="commandParameters">Parameters to use for the command</param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="T:MySql.Data.Common.StreamCreator">
            <summary>
            Summary description for StreamCreator.
            </summary>
        </member>
        <member name="T:DOL.Database.DBSpecialization">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.Database.DBSalvage">
            <summary>
            The salvage table
            </summary>
        </member>
        <member name="M:DOL.Database.DBSalvage.#ctor">
            <summary>
            Create salvage
            </summary>
        </member>
        <member name="F:DOL.Database.DBSalvage.RawMaterial">
            <summary>
            The raw material to give when salvage
            </summary>
        </member>
        <member name="P:DOL.Database.DBSalvage.AutoSave">
            <summary>
            auto save Db or not
            </summary>
        </member>
        <member name="P:DOL.Database.DBSalvage.ObjectType">
            <summary>
            Object type of item to salvage
            </summary>
        </member>
        <member name="P:DOL.Database.DBSalvage.SalvageLevel">
            <summary>
            The salvage level of the row
            </summary>
        </member>
        <member name="P:DOL.Database.DBSalvage.Id_nb">
            <summary>
            Index of item to craft
            </summary>
        </member>
        <member name="T:DOL.Database.DBRank">
            <summary>
            Rank rules in guild
            </summary>
        </member>
        <member name="M:DOL.Database.DBRank.#ctor">
            <summary>
            create rank rules
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.AutoSave">
            <summary>
            autosave table
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.GuildID">
            <summary>
            ID of guild
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.Title">
            <summary>
            Title of rank
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.RankLevel">
            <summary>
            rank level between 1 and 10
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.Alli">
            <summary>
            Is player allowed to make alliance
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.Emblem">
            <summary>
            is member alowed to wear alliance
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.GcHear">
            <summary>
            Can player with this rank hear guild chat
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.GcSpeak">
            <summary>
            Can player with this rank talk on guild chat
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.OcHear">
            <summary>
            Can player with this rank hear officier chat
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.OcSpeak">
            <summary>
            Can player with this rank talk on officier chat
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.AcHear">
            <summary>
            Can player with this rank hear alliance chat
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.AcSpeak">
            <summary>
            Can player with this rank talk on alliance chat
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.Invite">
            <summary>
            Can player with this rank invite player to join the guild
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.Promote">
            <summary>
            Can player with this rank promote player in the guild
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.Remove">
            <summary>
            Can player with this rank removed player from the guild
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.View">
            <summary>
            Can player with this rank view player in the guild
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.Claim">
            <summary>
            Can player with this rank claim keep
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.Upgrade">
            <summary>
            Can player with this rank upgrade keep
            </summary>
        </member>
        <member name="P:DOL.Database.DBRank.Release">
            <summary>
            Can player with this rank released the keep claimed
            </summary>
        </member>
        <member name="T:DOL.Database.DBLinkedFaction">
            <summary>
            Factions object for database
            </summary>
        </member>
        <member name="M:DOL.Database.DBLinkedFaction.#ctor">
            <summary>
            Create faction linked to an other
            </summary>
        </member>
        <member name="P:DOL.Database.DBLinkedFaction.AutoSave">
            <summary>
            autosave table
            </summary>
        </member>
        <member name="P:DOL.Database.DBLinkedFaction.FactionID">
            <summary>
            Index of faction 
            </summary>
        </member>
        <member name="P:DOL.Database.DBLinkedFaction.LinkedFactionID">
            <summary>
            The linked faction index
            </summary>
        </member>
        <member name="P:DOL.Database.DBLinkedFaction.IsFriend">
            <summary>
            Is faction linked is friend or enemy
            </summary>
        </member>
        <member name="T:DOL.Database.DBKeepHookPoint">
            <summary>
            keep hook point in DB
            </summary>
            
        </member>
        <member name="M:DOL.Database.DBKeepHookPoint.#ctor">
            <summary>
            Create faction aggro level against character
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepHookPoint.AutoSave">
            <summary>
            Autosave table
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepHookPoint.HookPointID">
            <summary>
            Hook Point
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepHookPoint.KeepComponentSkinID">
            <summary>
            skin of component with hookpoint is linked
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepHookPoint.Z">
            <summary>
            Z position of door
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepHookPoint.Y">
            <summary>
            Y position of door
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepHookPoint.X">
            <summary>
            X position of door
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepHookPoint.Heading">
            <summary>
            Heading of door
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepHookPoint.Height">
            <summary>
            Height of door
            </summary>
        </member>
        <member name="T:DOL.Database.Attributes.DataElement">
            <summary>
            Attribute that Marks a Property or Field as Column of the Table
            </summary>
        </member>
        <member name="M:DOL.Database.Attributes.DataElement.#ctor">
            <summary>
            Constructor that sets Options of the Column to AllowDBNull and not Unique
            </summary>
        </member>
        <member name="P:DOL.Database.Attributes.DataElement.AllowDbNull">
            <summary>
            Indicates if a value of null is allowed for this Collumn
            </summary>
            <value><c>true</c> if <c>null</c> is allowed</value>
        </member>
        <member name="P:DOL.Database.Attributes.DataElement.Unique">
            <summary>
            Indicates if a Value has to be Unique in the Table
            </summary>
            <value><c>true</c> if a Value as to be Unique</value>
        </member>
        <member name="P:DOL.Database.Attributes.DataElement.Index">
            <summary>
            Indicates if the value gets indexed in sql databases
            for optimizing performance
            </summary>
            <value><c>true</c>if column of value should be indexed</value>
        </member>
        <member name="T:MySql.Data.Types.MySqlDecimal">
            <summary>
            Summary description for MySqlDecimal.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlPoolManager">
            <summary>
            Summary description for MySqlPoolManager.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlPoolManager.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="T:DOL.Database.DBGuild">
            <summary>
            Guild table
            </summary>
        </member>
        <member name="M:DOL.Database.DBGuild.#ctor">
            <summary>
            Create a guild
            </summary>
        </member>
        <member name="F:DOL.Database.DBGuild.Ranks">
            <summary>
            rank rules
            </summary>
        </member>
        <member name="P:DOL.Database.DBGuild.AutoSave">
            <summary>
            Autosave table
            </summary>
        </member>
        <member name="P:DOL.Database.DBGuild.GuildID">
            <summary>
            A uniq ID for the guild
            </summary>
        </member>
        <member name="P:DOL.Database.DBGuild.GuildName">
            <summary>
            Name of guild
            </summary>
        </member>
        <member name="P:DOL.Database.DBGuild.Motd">
            <summary>
            Message of the day of the guild
            </summary>
        </member>
        <member name="P:DOL.Database.DBGuild.oMotd">
            <summary>
            officier message of the day
            </summary>
        </member>
        <member name="P:DOL.Database.DBGuild.AllianceID">
            <summary>
            alliance id when guild join an alliance
            </summary>
        </member>
        <member name="P:DOL.Database.DBGuild.Emblem">
            <summary>
            emblem of guild
            </summary>
        </member>
        <member name="P:DOL.Database.DBGuild.RealmPoints">
            <summary>
            realm point of guild
            </summary>
        </member>
        <member name="P:DOL.Database.DBGuild.BountyPoints">
            <summary>
            bounty point of guild
            </summary>
        </member>
        <member name="P:DOL.Database.DBGuild.Webpage">
            <summary>
            Webpage for the guild
            </summary>
        </member>
        <member name="P:DOL.Database.DBGuild.Email">
            <summary>
            Email for the guild
            </summary>
        </member>
        <member name="T:DOL.Database.DBRelic">
            <summary>
            DB relic is database of relic
            </summary>
        </member>
        <member name="M:DOL.Database.DBRelic.#ctor">
            <summary>
            Create a relic row
            </summary>
        </member>
        <member name="P:DOL.Database.DBRelic.AutoSave">
            <summary>
            autosave this table
            </summary>
        </member>
        <member name="P:DOL.Database.DBRelic.RelicID">
            <summary>
            Index of relic
            </summary>
        </member>
        <member name="P:DOL.Database.DBRelic.Region">
            <summary>
            Region of relic
            </summary>
        </member>
        <member name="P:DOL.Database.DBRelic.X">
            <summary>
            X position of relic
            </summary>
        </member>
        <member name="P:DOL.Database.DBRelic.Y">
            <summary>
            Y position of relic
            </summary>
        </member>
        <member name="P:DOL.Database.DBRelic.Z">
            <summary>
            Z position of relic
            </summary>
        </member>
        <member name="P:DOL.Database.DBRelic.Heading">
            <summary>
            heading of relic
            </summary>
        </member>
        <member name="P:DOL.Database.DBRelic.Realm">
            <summary>
            Realm of relic
            </summary>
        </member>
        <member name="P:DOL.Database.DBRelic.OriginalRealm">
            <summary>
            Realm at start
            </summary>
        </member>
        <member name="P:DOL.Database.DBRelic.relicType">
            <summary>
            relic type, 0 is melee, 1 is magic
            </summary>
        </member>
        <member name="T:DOL.Database.DBKeepPosition">
            <summary>
            Table to hold positions of various Keep objects
            </summary>
        </member>
        <member name="M:DOL.Database.DBKeepPosition.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepPosition.ComponentSkin">
            <summary>
            The Skin ID of the Keep Component the Position is assigned to
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepPosition.ComponentRotation">
            <summary>
            The Rotation of the Keep Component the Position is assigned to
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepPosition.TemplateID">
            <summary>
            The KeepObjectID, consider this a template ID
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepPosition.Height">
            <summary>
            The Height that this position is stored for, 0,1,2,3
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepPosition.XOff">
            <summary>
            X Offset Position of the object for the component
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepPosition.YOff">
            <summary>
            Y Offset Position of the object for the component
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepPosition.ZOff">
            <summary>
            Z Offset Position of the object for the component
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepPosition.HOff">
            <summary>
            Heading Offset Position of the object for the component
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepPosition.ClassType">
            <summary>
            The type of object this position will hold
            </summary>
        </member>
        <member name="P:DOL.Database.DBKeepPosition.TemplateType">
            <summary>
            The type of object
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.StoredProcedure">
            <summary>
            Summary description for StoredProcedure.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.StoredProcedure.Prepare(MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
            Creates the proper command text for executing the given stored procedure
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlDataAdapter">
            <summary>
	Represents a set of data commands and a database connection that are used to fill a dataset and update a MySQL database. This class cannot be inherited.
	</summary><remarks>
	<para>
	The <B>MySQLDataAdapter</B>, serves as a bridge between a <see cref="T:System.Data.DataSet"/>
	and MySQL for retrieving and saving data. The <B>MySQLDataAdapter</B> provides this 
	bridge by mapping <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/>, which changes the data in the 
	<B>DataSet</B> to match the data in the data source, and <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>, 
	which changes the data in the data source to match the data in the <B>DataSet</B>, 
	using the appropriate SQL statements against the data source.
	</para>
	<para>
	When the <B>MySQLDataAdapter</B> fills a <B>DataSet</B>, it will create the necessary 
	tables and columns for the returned data if they do not already exist. However, primary 
	key information will not be included in the implicitly created schema unless the 
	<see cref="T:System.Data.MissingSchemaAction"/> property is set to <see cref="F:System.Data.MissingSchemaAction.AddWithKey"/>. 
	You may also have the <B>MySQLDataAdapter</B> create the schema of the <B>DataSet</B>, 
	including primary key information, before filling it with data using <see cref="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)"/>. 
	</para>
	<para><B>MySQLDataAdapter</B> is used in conjunction with <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>
	and <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> to increase performance when connecting to a MySQL database.
	</para>
	<para>The <B>MySQLDataAdapter</B> also includes the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/>, 
	<see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.InsertCommand"/>, <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.DeleteCommand"/>, 
	<see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.UpdateCommand"/>, and <see cref="P:System.Data.Common.DataAdapter.TableMappings"/> 
	properties to facilitate the loading and updating of data.
	</para>
	<para>When an instance of <B>MySQLDataAdapter</B> is created, the read/write properties 
	are set to initial values. For a list of these values, see the <B>MySQLDataAdapter</B> 
	constructor.
	</para>
	<note>
	Please be aware that the <see cref="T:System.Data.DataColumn"/> class in .NET 1.0 and 1.1 does not allow columns
	with type of UInt16, UInt32, or UInt64 to be autoincrement columns.  If you plan to use autoincremement
	columns with MySQL, you should consider using signed integer columns.
	</note>
</remarks><example>
	The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>. 
	The <B>MySqlConnection</B> is opened and set as the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.Connection"/> for the 
	<B>MySqlCommand</B>. The example then calls <see cref="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery"/>, and closes 
	the connection. To accomplish this, the <B>ExecuteNonQuery</B> is 
	passed a connection string and a query string that is a SQL INSERT 
	statement.
	<code lang="Visual Basic">
Public Function SelectRows(dataSet As DataSet, connection As String, query As String) As DataSet
    Dim conn As New MySqlConnection(connection)
    Dim adapter As New MySqlDataAdapter()
    adapter.SelectCommand = new MySqlCommand(query, conn)
    adapter.Fill(dataset)
    Return dataset
End Function
	</code>
	<code lang="C#">
public DataSet SelectRows(DataSet dataset,string connection,string query) 
{
    MySqlConnection conn = new MySqlConnection(connection);
    MySqlDataAdapter adapter = new MySqlDataAdapter();
    adapter.SelectCommand = new MySqlCommand(query, conn);
    adapter.Fill(dataset);
    return dataset;
}
	</code>
</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.#ctor">
            <overloads></overloads><summary>
	Initializes a new instance of the MySqlDataAdapter class.
	</summary><remarks>
	<para>
	When an instance of <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> is created, 
	the following read/write properties are set to the following initial 
	values.
	</para>
	<list type="table">
		<listheader><term>Properties</term><term>Initial Value</term></listheader>
		<item><term><see cref="T:System.Data.MissingMappingAction"/></term><term><B>MissingMappingAction.Passthrough</B></term></item>
		<item><term><see cref="T:System.Data.MissingSchemaAction"/></term><term><B>MissingSchemaAction.Add</B></term></item>
	</list>
	<para>
	You can change the value of any of these properties through a separate call 
	to the property.
	</para>
	</remarks><example>
The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets some of 
its properties.
<code lang="Visual Basic"> 
Public Sub CreateSqlDataAdapter()
    Dim conn As MySqlConnection = New MySqlConnection("Data Source=localhost;" &amp; _
		"database=test")
    Dim da As MySqlDataAdapter = New MySqlDataAdapter
    da.MissingSchemaAction = MissingSchemaAction.AddWithKey    
   
    da.SelectCommand = New MySqlCommand("SELECT id, name FROM mytable", conn)
    da.InsertCommand = New MySqlCommand("INSERT INTO mytable (id, name) " &amp; _
                                            "VALUES (?id, ?name)", conn)
    da.UpdateCommand = New MySqlCommand("UPDATE mytable SET id=?id, name=?name " &amp; _
                                            "WHERE id=?oldId", conn)
    da.DeleteCommand = New MySqlCommand("DELETE FROM mytable WHERE id=?id", conn)

    da.InsertCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id")
    da.InsertCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name")
 
    da.UpdateCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id")
    da.UpdateCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name")
    da.UpdateCommand.Parameters.Add("?oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original

    da.DeleteCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original
End Sub
</code>
<code lang="C#">
public static void CreateSqlDataAdapter() 
{
    MySqlConnection conn = new MySqlConnection("Data Source=localhost;database=test");
    MySqlDataAdapter da = new MySqlDataAdapter();
    da.MissingSchemaAction = MissingSchemaAction.AddWithKey;
   
    da.SelectCommand = new MySqlCommand("SELECT id, name FROM mytable", conn);
    da.InsertCommand = new MySqlCommand("INSERT INTO mytable (id, name) " +
                                            "VALUES (?id, ?name)", conn);
    da.UpdateCommand = new MySqlCommand("UPDATE mytable SET id=?id, name=?name " +
                                            "WHERE id=?oldId", conn);
    da.DeleteCommand = new MySqlCommand("DELETE FROM mytable WHERE id=?id", conn);

    da.InsertCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id");
    da.InsertCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name");
 
    da.UpdateCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id");
    da.UpdateCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name");
    da.UpdateCommand.Parameters.Add("?oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;

    da.DeleteCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;
}	
</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.#ctor(MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
	Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> class with 
	the specified <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> as the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/>
	property.
	</summary><param name="selectCommand">
		<see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> that is a SQL SELECT statement or stored procedure and is set 
		as the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> property of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>. 
	</param><remarks>
	<para>
	When an instance of <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> is created, 
	the following read/write properties are set to the following initial 
	values.
	</para>
	<list type="table">
		<listheader><term>Properties</term><term>Initial Value</term></listheader>
		<item><term><see cref="T:System.Data.MissingMappingAction"/></term><term><B>MissingMappingAction.Passthrough</B></term></item>
		<item><term><see cref="T:System.Data.MissingSchemaAction"/></term><term><B>MissingSchemaAction.Add</B></term></item>
	</list>
	<para>
	You can change the value of any of these properties through a separate call 
	to the property.
	</para>
	<para>
	When <B>SelectCommand</B> (or any of the other command properties) is assigned 
	to a previously created <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, the <B>MySqlCommand</B> is not cloned. 
	The <B>SelectCommand</B> maintains a reference to the previously created <B>MySqlCommand</B> 
	object.
	</para>
	</remarks><example>
The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets some of 
its properties.
<code lang="Visual Basic"> 
Public Sub CreateSqlDataAdapter()
    Dim conn As MySqlConnection = New MySqlConnection("Data Source=localhost;" &amp; _
		"database=test")
	Dim cmd as new MySqlCommand("SELECT id, name FROM mytable", conn)
    Dim da As MySqlDataAdapter = New MySqlDataAdapter(cmd)
    da.MissingSchemaAction = MissingSchemaAction.AddWithKey    
   
    da.InsertCommand = New MySqlCommand("INSERT INTO mytable (id, name) " &amp; _
                                            "VALUES (?id, ?name)", conn)
    da.UpdateCommand = New MySqlCommand("UPDATE mytable SET id=?id, name=?name " &amp; _
                                            "WHERE id=?oldId", conn)
    da.DeleteCommand = New MySqlCommand("DELETE FROM mytable WHERE id=?id", conn)

    da.InsertCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id")
    da.InsertCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name")
 
    da.UpdateCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id")
    da.UpdateCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name")
    da.UpdateCommand.Parameters.Add("?oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original

    da.DeleteCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original
End Sub
</code>
<code lang="C#">
public static void CreateSqlDataAdapter() 
{
    MySqlConnection conn = new MySqlConnection("Data Source=localhost;database=test");
    MySqlCommand cmd = new MySqlCommand("SELECT id, name FROM mytable", conn);
    MySqlDataAdapter da = new MySqlDataAdapter(cmd);
    da.MissingSchemaAction = MissingSchemaAction.AddWithKey;
   
    da.InsertCommand = new MySqlCommand("INSERT INTO mytable (id, name) " +
                                            "VALUES (?id, ?name)", conn);
    da.UpdateCommand = new MySqlCommand("UPDATE mytable SET id=?id, name=?name " +
                                            "WHERE id=?oldId", conn);
    da.DeleteCommand = new MySqlCommand("DELETE FROM mytable WHERE id=?id", conn);

    da.InsertCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id");
    da.InsertCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name");
 
    da.UpdateCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id");
    da.UpdateCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name");
    da.UpdateCommand.Parameters.Add("?oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;

    da.DeleteCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;
}	
</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.#ctor(System.String,MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
	Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> class with 
	a <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> and a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object.
	</summary><param name="selectCommandText">
	A <b>String</b> that is a SQL SELECT statement or stored procedure to be used by 
	the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> property of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>. 
	</param><param name="connection">A <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> that represents the connection.</param><remarks>
	<para>
	This implementation of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> opens and closes a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>
	if it is not already open. This can be useful in a an application that must call the 
	<see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/> method for two or more <B>MySqlDataAdapter</B> objects. 
	If the <B>MySqlConnection</B> is already open, you must explicitly call 
	<see cref="M:MySql.Data.MySqlClient.MySqlConnection.Close"/> or <see cref="M:MySql.Data.MySqlClient.MySqlConnection.Dispose(System.Boolean)"/> to close it.
	</para>
	<para>
	When an instance of <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> is created, 
	the following read/write properties are set to the following initial 
	values.
	</para>
	<list type="table">
		<listheader><term>Properties</term><term>Initial Value</term></listheader>
		<item><term><see cref="T:System.Data.MissingMappingAction"/></term><term><B>MissingMappingAction.Passthrough</B></term></item>
		<item><term><see cref="T:System.Data.MissingSchemaAction"/></term><term><B>MissingSchemaAction.Add</B></term></item>
	</list>
	<para>
	You can change the value of any of these properties through a separate call 
	to the property.
	</para>
	</remarks><example>
The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets some of 
its properties.
<code lang="Visual Basic"> 
Public Sub CreateSqlDataAdapter()
    Dim conn As MySqlConnection = New MySqlConnection("Data Source=localhost;" &amp; _
		"database=test")
    Dim da As MySqlDataAdapter = New MySqlDataAdapter("SELECT id, name FROM mytable", conn)
    da.MissingSchemaAction = MissingSchemaAction.AddWithKey    
   
    da.InsertCommand = New MySqlCommand("INSERT INTO mytable (id, name) " &amp; _
                                            "VALUES (?id, ?name)", conn)
    da.UpdateCommand = New MySqlCommand("UPDATE mytable SET id=?id, name=?name " &amp; _
                                            "WHERE id=?oldId", conn)
    da.DeleteCommand = New MySqlCommand("DELETE FROM mytable WHERE id=?id", conn)

    da.InsertCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id")
    da.InsertCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name")
 
    da.UpdateCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id")
    da.UpdateCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name")
    da.UpdateCommand.Parameters.Add("?oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original

    da.DeleteCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original
End Sub
</code>
<code lang="C#">
public static void CreateSqlDataAdapter() 
{
    MySqlConnection conn = new MySqlConnection("Data Source=localhost;database=test");
    MySqlDataAdapter da = new MySqlDataAdapter("SELECT id, name FROM mytable", conn);
    da.MissingSchemaAction = MissingSchemaAction.AddWithKey;
   
    da.InsertCommand = new MySqlCommand("INSERT INTO mytable (id, name) " +
                                            "VALUES (?id, ?name)", conn);
    da.UpdateCommand = new MySqlCommand("UPDATE mytable SET id=?id, name=?name " +
                                            "WHERE id=?oldId", conn);
    da.DeleteCommand = new MySqlCommand("DELETE FROM mytable WHERE id=?id", conn);

    da.InsertCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id");
    da.InsertCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name");
 
    da.UpdateCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id");
    da.UpdateCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name");
    da.UpdateCommand.Parameters.Add("?oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;

    da.DeleteCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;
}	
</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.#ctor(System.String,System.String)">
            <summary>
		Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> class with 
		a <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> and a connection string.
	</summary><param name="selectCommandText">
		A <see cref="T:System.String"/> that is a SQL SELECT statement or stored procedure to 
		be used by the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> property of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.
	</param><param name="selectConnString">The connection string</param><remarks>
		<para>
		When an instance of <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> is created, 
		the following read/write properties are set to the following initial 
		values.
		</para>
		<list type="table">
			<listheader><term>Properties</term><term>Initial Value</term></listheader>
			<item><term><see cref="T:System.Data.MissingMappingAction"/></term><term><B>MissingMappingAction.Passthrough</B></term></item>
			<item><term><see cref="T:System.Data.MissingSchemaAction"/></term><term><B>MissingSchemaAction.Add</B></term></item>
		</list>
		<para>
		You can change the value of any of these properties through a separate call 
		to the property.
		</para>
	</remarks><example>
The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets some of 
its properties.
<code lang="Visual Basic"> 
Public Sub CreateSqlDataAdapter()
    Dim da As MySqlDataAdapter = New MySqlDataAdapter("SELECT id, name FROM mytable", "Data Source=localhost;database=test")
    Dim conn As MySqlConnection = da.SelectCommand.Connection
    da.MissingSchemaAction = MissingSchemaAction.AddWithKey    
   
    da.InsertCommand = New MySqlCommand("INSERT INTO mytable (id, name) " &amp; _
                                            "VALUES (?id, ?name)", conn)
    da.UpdateCommand = New MySqlCommand("UPDATE mytable SET id=?id, name=?name " &amp; _
                                            "WHERE id=?oldId", conn)
    da.DeleteCommand = New MySqlCommand("DELETE FROM mytable WHERE id=?id", conn)

    da.InsertCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id")
    da.InsertCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name")
 
    da.UpdateCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id")
    da.UpdateCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name")
    da.UpdateCommand.Parameters.Add("?oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original

    da.DeleteCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original
End Sub
</code>
<code lang="C#">
public static void CreateSqlDataAdapter() 
{
    MySqlDataAdapter da = new MySqlDataAdapter("SELECT id, name FROM mytable", "Data Source=localhost;database=test");
    MySqlConnection conn = da.SelectCommand.Connection;
    da.MissingSchemaAction = MissingSchemaAction.AddWithKey;
   
    da.InsertCommand = new MySqlCommand("INSERT INTO mytable (id, name) " +
                                            "VALUES (?id, ?name)", conn);
    da.UpdateCommand = new MySqlCommand("UPDATE mytable SET id=?id, name=?name " +
                                            "WHERE id=?oldId", conn);
    da.DeleteCommand = new MySqlCommand("DELETE FROM mytable WHERE id=?id", conn);

    da.InsertCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id");
    da.InsertCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name");
 
    da.UpdateCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id");
    da.UpdateCommand.Parameters.Add("?name", MySqlDbType.VarChar, 40, "name");
    da.UpdateCommand.Parameters.Add("?oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;

    da.DeleteCommand.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;
}	
</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Overridden. See <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)"/>.
            </summary>
            <param name="dataRow"></param>
            <param name="command"></param>
            <param name="statementType"></param>
            <param name="tableMapping"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Overridden. See <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)"/>.
            </summary>
            <param name="dataRow"></param>
            <param name="command"></param>
            <param name="statementType"></param>
            <param name="tableMapping"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Overridden. Raises the RowUpdating event.
            </summary>
            <param name="value">A MySqlRowUpdatingEventArgs that contains the event data.</param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Overridden. Raises the RowUpdated event.
            </summary>
            <param name="value">A MySqlRowUpdatedEventArgs that contains the event data. </param>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataAdapter.DeleteCommand">
            <summary>
	Gets or sets a SQL statement or stored procedure used to delete records from the data set.
	</summary><value>
	A <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> used during <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)"/> to delete records in the 
	database that correspond to deleted rows in the <see cref="T:System.Data.DataSet"/>.
	</value><remarks>
	<para>During <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)"/>, if this property is not set and primary key information 
	is present in the <see cref="T:System.Data.DataSet"/>, the <B>DeleteCommand</B> can be generated 
	automatically if you set the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> property and use the 
	<see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/>.  Then, any additional commands that you do not set are 
	generated by the <B>MySqlCommandBuilder</B>. This generation logic requires key column 
	information to be present in the <B>DataSet</B>. 
	</para>
	<para>
	When <B>DeleteCommand</B> is assigned to a previously created <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, 
	the <B>MySqlCommand</B> is not cloned. The <B>DeleteCommand</B> maintains a reference 
	to the previously created <B>MySqlCommand</B> object.
	</para>
	</remarks><example>
The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets the 
<see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> and <B>DeleteCommand</B> properties. It assumes you have already 
created a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object.
<code lang="Visual Basic">
Public Shared Function CreateCustomerAdapter(conn As MySqlConnection) As MySqlDataAdapter 
  
  Dim da As MySqlDataAdapter = New MySqlDataAdapter()
  Dim cmd As MySqlCommand
  Dim parm As MySqlParameter

  ' Create the SelectCommand.
  cmd = New MySqlCommand("SELECT * FROM mytable WHERE id=?id AND name=?name", conn)

  cmd.Parameters.Add("?id", MySqlDbType.VarChar, 15)
  cmd.Parameters.Add("?name", MySqlDbType.VarChar, 15)

  da.SelectCommand = cmd

  ' Create the DeleteCommand.
  cmd = New MySqlCommand("DELETE FROM mytable WHERE id=?id", conn)

  parm = cmd.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id")
  parm.SourceVersion = DataRowVersion.Original

  da.DeleteCommand = cmd

  Return da
End Function
</code>
<code lang="C#">
public static MySqlDataAdapter CreateCustomerAdapter(MySqlConnection conn)
{
  MySqlDataAdapter da = new MySqlDataAdapter();
  MySqlCommand cmd;
  MySqlParameter parm;

  // Create the SelectCommand.
  cmd = new MySqlCommand("SELECT * FROM mytable WHERE id=?id AND name=?name", conn);

  cmd.Parameters.Add("?id", MySqlDbType.VarChar, 15);
  cmd.Parameters.Add("?name", MySqlDbType.VarChar, 15);

  da.SelectCommand = cmd;

  // Create the DeleteCommand.
  cmd = new MySqlCommand("DELETE FROM mytable WHERE id=?id", conn);

  parm = cmd.Parameters.Add("?id", MySqlDbType.VarChar, 5, "id");
  parm.SourceVersion = DataRowVersion.Original;

  da.DeleteCommand = cmd;

  return da;
}
</code>	
	</example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataAdapter.InsertCommand">
            <summary>
	Gets or sets a SQL statement or stored procedure used to insert records into the data set.
	</summary><value>
	A <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> used during <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)"/> to insert records into the 
	database that correspond to new rows in the <see cref="T:System.Data.DataSet"/>.
	</value><remarks>
	<para>During <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)"/>, if this property is not set and primary key information 
	is present in the <see cref="T:System.Data.DataSet"/>, the <B>InsertCommand</B> can be generated 
	automatically if you set the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> property and use the 
	<see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/>.  Then, any additional commands that you do not set are 
	generated by the <B>MySqlCommandBuilder</B>. This generation logic requires key column 
	information to be present in the <B>DataSet</B>. 
	</para>
	<para>
	When <B>InsertCommand</B> is assigned to a previously created <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, 
	the <B>MySqlCommand</B> is not cloned. The <B>InsertCommand</B> maintains a reference 
	to the previously created <B>MySqlCommand</B> object.
	</para>
		<note>
		If execution of this command returns rows, these rows may be added to the <B>DataSet</B> 
		depending on how you set the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.UpdatedRowSource"/> property of the <B>MySqlCommand</B> object.
		</note>
	</remarks><example>
The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets the 
<see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> and <B>InsertCommand</B> properties. It assumes you have already 
created a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object.
<code lang="Visual Basic">
Public Shared Function CreateCustomerAdapter(conn As MySqlConnection) As MySqlDataAdapter 
  
	Dim da As MySqlDataAdapter = New MySqlDataAdapter()
	Dim cmd As MySqlCommand
	Dim parm As MySqlParameter

	' Create the SelectCommand.
	cmd = New MySqlCommand("SELECT * FROM mytable WHERE id=?id AND name=?name", conn)

	cmd.Parameters.Add("?id", MySqlDbType.VarChar, 15)
	cmd.Parameters.Add("?name", MySqlDbType.VarChar, 15)

	da.SelectCommand = cmd

	' Create the InsertCommand.
	cmd = New MySqlCommand("INSERT INTO mytable (id,name) VALUES (?id, ?name)", conn)

	cmd.Parameters.Add( "?id", MySqlDbType.VarChar, 15, "id" )
	cmd.Parameters.Add( "?name", MySqlDbType.VarChar, 15, "name" )	
	da.InsertCommand = cmd
	
	Return da
End Function
</code>
<code lang="C#">
public static MySqlDataAdapter CreateCustomerAdapter(MySqlConnection conn)
{
	MySqlDataAdapter da = new MySqlDataAdapter();
	MySqlCommand cmd;
	MySqlParameter parm;

	// Create the SelectCommand.
	cmd = new MySqlCommand("SELECT * FROM mytable WHERE id=?id AND name=?name", conn);

	cmd.Parameters.Add("?id", MySqlDbType.VarChar, 15);
	cmd.Parameters.Add("?name", MySqlDbType.VarChar, 15);

	da.SelectCommand = cmd;

	// Create the InsertCommand.
	cmd = new MySqlCommand("INSERT INTO mytable (id,name) VALUES (?id,?name)", conn);
	cmd.Parameters.Add("?id", MySqlDbType.VarChar, 15, "id" );
	cmd.Parameters.Add("?name", MySqlDbType.VarChar, 15, "name" );
	
	da.InsertCommand = cmd;	

	return da;
}
</code>	
	</example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand">
            <summary>
	Gets or sets a SQL statement or stored procedure used to select records in the data source.
	</summary><value>
	A <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> used during <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/> to select records from the 
	database for placement in the <see cref="T:System.Data.DataSet"/>.
	</value><remarks>
	<para>When <B>SelectCommand</B> is assigned to a previously created <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, 
	the <B>MySqlCommand</B> is not cloned. The <B>SelectCommand</B> maintains a reference to the 
	previously created <B>MySqlCommand</B> object.
	</para>
	<para>
	If the <B>SelectCommand</B> does not return any rows, no tables are added to the 
	<see cref="T:System.Data.DataSet"/>, and no exception is raised.
	</para>
	</remarks><example>
The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets the 
<see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> and <B>InsertCommand</B> properties. It assumes you have already 
created a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object.
<code lang="Visual Basic">
Public Shared Function CreateCustomerAdapter(conn As MySqlConnection) As MySqlDataAdapter 
  
	Dim da As MySqlDataAdapter = New MySqlDataAdapter()
	Dim cmd As MySqlCommand
	Dim parm As MySqlParameter

	' Create the SelectCommand.
	cmd = New MySqlCommand("SELECT * FROM mytable WHERE id=?id AND name=?name", conn)

	cmd.Parameters.Add("?id", MySqlDbType.VarChar, 15)
	cmd.Parameters.Add("?name", MySqlDbType.VarChar, 15)

	da.SelectCommand = cmd

	' Create the InsertCommand.
	cmd = New MySqlCommand("INSERT INTO mytable (id,name) VALUES (?id, ?name)", conn)

	cmd.Parameters.Add( "?id", MySqlDbType.VarChar, 15, "id" )
	cmd.Parameters.Add( "?name", MySqlDbType.VarChar, 15, "name" )	
	da.InsertCommand = cmd
	
	Return da
End Function
</code>
<code lang="C#">
public static MySqlDataAdapter CreateCustomerAdapter(MySqlConnection conn)
{
	MySqlDataAdapter da = new MySqlDataAdapter();
	MySqlCommand cmd;
	MySqlParameter parm;

	// Create the SelectCommand.
	cmd = new MySqlCommand("SELECT * FROM mytable WHERE id=?id AND name=?name", conn);

	cmd.Parameters.Add("?id", MySqlDbType.VarChar, 15);
	cmd.Parameters.Add("?name", MySqlDbType.VarChar, 15);

	da.SelectCommand = cmd;

	// Create the InsertCommand.
	cmd = new MySqlCommand("INSERT INTO mytable (id,name) VALUES (?id,?name)", conn);
	cmd.Parameters.Add("?id", MySqlDbType.VarChar, 15, "id" );
	cmd.Parameters.Add("?name", MySqlDbType.VarChar, 15, "name" );
	
	da.InsertCommand = cmd;	

	return da;
}
</code>	
	</example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataAdapter.UpdateCommand">
            <summary>
	Gets or sets a SQL statement or stored procedure used to updated records in the data source.
	</summary><value>
	A <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> used during <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)"/> to update records in the 
	database with data from the <see cref="T:System.Data.DataSet"/>.
	</value><remarks>
	<para>During <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)"/>, if this property is not set and primary key information 
	is present in the <see cref="T:System.Data.DataSet"/>, the <B>UpdateCommand</B> can be generated 
	automatically if you set the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> property and use the 
	<see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/>.  Then, any additional commands that you do not set are 
	generated by the <B>MySqlCommandBuilder</B>. This generation logic requires key column 
	information to be present in the <B>DataSet</B>. 
	</para>
	<para>
	When <B>UpdateCommand</B> is assigned to a previously created <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, 
	the <B>MySqlCommand</B> is not cloned. The <B>UpdateCommand</B> maintains a reference 
	to the previously created <B>MySqlCommand</B> object.
	</para>
		<note>
		If execution of this command returns rows, these rows may be merged with the DataSet
		depending on how you set the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.UpdatedRowSource"/> property of the <B>MySqlCommand</B> object.
		</note>
	</remarks><example>
The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets the 
<see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> and <B>UpdateCommand</B> properties. It assumes you have already 
created a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object.
<code lang="Visual Basic">
Public Shared Function CreateCustomerAdapter(conn As MySqlConnection) As MySqlDataAdapter 
  
	Dim da As MySqlDataAdapter = New MySqlDataAdapter()
	Dim cmd As MySqlCommand
	Dim parm As MySqlParameter

	' Create the SelectCommand.
	cmd = New MySqlCommand("SELECT * FROM mytable WHERE id=?id AND name=?name", conn)

	cmd.Parameters.Add("?id", MySqlDbType.VarChar, 15)
	cmd.Parameters.Add("?name", MySqlDbType.VarChar, 15)

	da.SelectCommand = cmd

	' Create the UpdateCommand.
	cmd = New MySqlCommand("UPDATE mytable SET id=?id, name=?name WHERE id=?oldId", conn)

	cmd.Parameters.Add( "?id", MySqlDbType.VarChar, 15, "id" )
	cmd.Parameters.Add( "?name", MySqlDbType.VarChar, 15, "name" )	
	
	parm = cmd.Parameters.Add("?oldId", MySqlDbType.VarChar, 15, "id")
	parm.SourceVersion = DataRowVersion.Original
	
	da.UpdateCommand = cmd
	
	Return da
End Function
</code>
<code lang="C#">
public static MySqlDataAdapter CreateCustomerAdapter(MySqlConnection conn)
{
	MySqlDataAdapter da = new MySqlDataAdapter();
	MySqlCommand cmd;
	MySqlParameter parm;

	// Create the SelectCommand.
	cmd = new MySqlCommand("SELECT * FROM mytable WHERE id=?id AND name=?name", conn);

	cmd.Parameters.Add("?id", MySqlDbType.VarChar, 15);
	cmd.Parameters.Add("?name", MySqlDbType.VarChar, 15);

	da.SelectCommand = cmd;

	// Create the UpdateCommand.
	cmd = new MySqlCommand("UPDATE mytable SET id=?id, name=?name WHERE id=?oldId", conn);
	cmd.Parameters.Add("?id", MySqlDbType.VarChar, 15, "id" );
	cmd.Parameters.Add("?name", MySqlDbType.VarChar, 15, "name" );
	
	parm = cmd.Parameters.Add( "?oldId", MySqlDbType.VarChar, 15, "id" );
	parm.SourceVersion = DataRowVersion.Original;
	
	da.UpdateCommand = cmd;	

	return da;
}
</code>	
	</example>
        </member>
        <member name="E:MySql.Data.MySqlClient.MySqlDataAdapter.RowUpdating">
            <summary>
            Occurs during Update before a command is executed against the data source. The attempt to update is made, so the event fires.
            </summary>
        </member>
        <member name="E:MySql.Data.MySqlClient.MySqlDataAdapter.RowUpdated">
            <summary>
            Occurs during Update after a command is executed against the data source. The attempt to update is made, so the event fires.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlRowUpdatingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:MySql.Data.MySqlClient.MySqlDataAdapter.RowUpdating"/> event of a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlRowUpdatedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:MySql.Data.MySqlClient.MySqlDataAdapter.RowUpdated"/> event of a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlRowUpdatingEventArgs">
            <summary>
            Provides data for the RowUpdating event. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Initializes a new instance of the MySqlRowUpdatingEventArgs class.
            </summary>
            <param name="row">The <see cref="T:System.Data.DataRow"/> to <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>.</param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to execute during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>.</param>
            <param name="statementType">One of the <see cref="T:System.Data.StatementType"/> values that specifies the type of query executed.</param>
            <param name="tableMapping">The <see cref="T:System.Data.Common.DataTableMapping"/> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>.</param>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlRowUpdatingEventArgs.Command">
            <summary>
            Gets or sets the MySqlCommand to execute when performing the Update.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlRowUpdatedEventArgs">
            <summary>
            Provides data for the RowUpdated event. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Initializes a new instance of the MySqlRowUpdatedEventArgs class.
            </summary>
            <param name="row">The <see cref="T:System.Data.DataRow"/> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>.</param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> executed when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/> is called.</param>
            <param name="statementType">One of the <see cref="T:System.Data.StatementType"/> values that specifies the type of query executed.</param>
            <param name="tableMapping">The <see cref="T:System.Data.Common.DataTableMapping"/> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>.</param>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlRowUpdatedEventArgs.Command">
            <summary>
            Gets or sets the MySqlCommand executed when Update is called.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.Crypt">
            <summary>
            Summary description for Crypt.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.Crypt.XorScramble(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Simple XOR scramble
            </summary>
            <param name="from">Source array</param>
            <param name="fromIndex">Index inside source array</param>
            <param name="to">Destination array</param>
            <param name="toIndex">Index inside destination array</param>
            <param name="password">Password used to xor the bits</param>
            <param name="length">Number of bytes to scramble</param>
        </member>
        <member name="M:MySql.Data.MySqlClient.Crypt.Get410Password(System.String,System.Byte[])">
            <summary>
            Generate a scrambled password for 4.1.0 using new passwords
            </summary>
            <param name="password">The password to scramble</param>
            <param name="seedBytes">The seedbytes used to scramble</param>
            <returns>Array of bytes containing the scrambled password</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.Crypt.GetOld410Password(System.String,System.Byte[])">
            <summary>
            Generates a proper hash for old style 4.1.0 passwords.  This would be used
            if a 4.1.0 server contained old 16 byte hashes.
            </summary>
            <param name="password">The password to hash</param>
            <param name="seedBytes">Seed bytes received from the server</param>
            <returns>Byte array containing the password hash</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.Crypt.Get411Password(System.String,System.String)">
            <summary>
            Returns a byte array containing the proper encryption of the 
            given password/seed according to the new 4.1.1 authentication scheme.
            </summary>
            <param name="password"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.Crypt.EncryptPassword(System.String,System.String,System.Boolean)">
            <summary>
            Encrypts a password using the MySql encryption scheme
            </summary>
            <param name="password">The password to encrypt</param>
            <param name="seed">The encryption seed the server gave us</param>
            <param name="new_ver">Indicates if we should use the old or new encryption scheme</param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.Crypt.Hash(System.String)">
            <summary>
            Hashes a password using the algorithm from Monty's code.
            The first element in the return is the result of the "old" hash.
            The second element is the rest of the "new" hash.
            </summary>
            <param name="P">Password to be hashed</param>
            <returns>Two element array containing the hashed values</returns>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlConnectionString">
            <summary>
            Summary description for MySqlConnectionString.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnectionString.GetConnectionString(System.Boolean)">
            <summary>
            Takes a given connection string and returns it, possible
            stripping out the password info
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnectionString.CreateConnectionString">
            <summary>
            Uses the values in the keyValues hash to create a
            connection string
            </summary>
            <returns></returns>
        </member>
        <member name="M:DOL.Database.ItemTemplate.GetName(System.Int32,System.Boolean)">
            <summary>
            Returns name with article for nouns
            </summary>
            <param name="article">0=definite, 1=indefinite</param>
            <param name="firstLetterUppercase"></param>
            <returns>name of this object (includes article if needed)</returns>
        </member>
        <member name="P:DOL.Database.ItemTemplate.MaxCount">
            <summary>
            Max amount allowed in one stack
            </summary>
        </member>
        <member name="P:DOL.Database.ItemTemplate.PackSize">
            <summary>
            Amount of items sold at once
            </summary>
        </member>
        <member name="P:DOL.Database.ItemTemplate.Charges">
            <summary>
            Charge of item when he have some charge of a spell
            </summary>
        </member>
        <member name="P:DOL.Database.ItemTemplate.MaxCharges">
            <summary>
            Max charge of item when he have some charge of a spell
            </summary>
        </member>
        <member name="P:DOL.Database.ItemTemplate.MaxCharges1">
            <summary>
            Max charge of item when he have some charge of a spell
            </summary>
        </member>
        <member name="P:DOL.Database.ItemTemplate.SpellID">
            <summary>
            Spell id for items with charge
            </summary>
        </member>
        <member name="P:DOL.Database.ItemTemplate.SpellID1">
            <summary>
            Spell id for items with charge
            </summary>
        </member>
        <member name="P:DOL.Database.ItemTemplate.ProcSpellID">
            <summary>
            ProcSpell id for items
            </summary>
        </member>
        <member name="P:DOL.Database.ItemTemplate.AllowedClasses">
            <summary>
            the serialized allowed classes of item
            </summary>
        </member>
        <member name="T:DOL.Database.DBLootOTD">
            <summary>
            Account table
            </summary>
        </member>
        <member name="M:DOL.Database.DBLootOTD.#ctor">
            <summary>
            Create account row in DB
            </summary>
        </member>
        <member name="F:DOL.Database.DBLootOTD.item">
            <summary>
            List of charcter the account own
            </summary>
        </member>
        <member name="P:DOL.Database.DBLootOTD.AutoSave">
            <summary>
            Auto save this table
            </summary>
        </member>
        <member name="P:DOL.Database.DBLootOTD.ItemTemplateID">
            <summary>
            The item template id of the OTD
            </summary>
        </member>
        <member name="P:DOL.Database.DBLootOTD.MinLevel">
            <summary>
            The minimum level require to drop the OTD
            </summary>
        </member>
        <member name="P:DOL.Database.DBLootOTD.SerializedClassAllowed">
            <summary>
            The class allowed to drop OTD
            </summary>
        </member>
        <member name="P:DOL.Database.DBLootOTD.MobName">
            <summary>
            The mob who drop the OTD
            </summary>
        </member>
        <member name="T:DOL.Database.DBHouseOutdoorItem">
            <summary>
            The Database Entry for an Outdoor Housing Item
            </summary>
        </member>
        <member name="M:DOL.Database.DBHouseOutdoorItem.#ctor">
            <summary>
            The Constructor
            </summary>
        </member>
        <member name="P:DOL.Database.DBHouseOutdoorItem.HouseNumber">
            <summary>
            The House Number
            </summary>
        </member>
        <member name="P:DOL.Database.DBHouseOutdoorItem.Model">
            <summary>
            The Model
            </summary>
        </member>
        <member name="P:DOL.Database.DBHouseOutdoorItem.Position">
            <summary>
            The Position
            </summary>
        </member>
        <member name="P:DOL.Database.DBHouseOutdoorItem.Rotation">
            <summary>
            The Rotation
            </summary>
        </member>
        <member name="P:DOL.Database.DBHouseOutdoorItem.BaseItemID">
            <summary>
            The Base Item ID
            </summary>
        </member>
        <member name="P:DOL.Database.DBHouseOutdoorItem.AutoSave">
            <summary>
            Autosave
            </summary>
        </member>
        <member name="T:DOL.Database.DBCraftedXItem">
            <summary>
            raw materials for craft item
            </summary>
        </member>
        <member name="M:DOL.Database.DBCraftedXItem.#ctor">
            <summary>
            create a raw material
            </summary>
        </member>
        <member name="F:DOL.Database.DBCraftedXItem.ItemTemplate">
            <summary>
            the raw material
            </summary>
        </member>
        <member name="P:DOL.Database.DBCraftedXItem.CraftedItemId_nb">
            <summary>
            the index
            </summary>
        </member>
        <member name="P:DOL.Database.DBCraftedXItem.IngredientId_nb">
            <summary>
            the raw material used to craft
            </summary>
        </member>
        <member name="P:DOL.Database.DBCraftedXItem.Count">
            <summary>
            The count of the raw material to use
            </summary>
        </member>
        <member name="T:DOL.Database.PlayerXEffect">
            <summary>
            Account table
            </summary>
        </member>
        <member name="T:DOL.Database.ClassXRealmAbility">
            <summary>
            Class => Realm abilities collection
            </summary>
        </member>
        <member name="P:DOL.Database.ClassXRealmAbility.AutoSave">
            <summary>
            auto save Db or not
            </summary>
        </member>
        <member name="P:DOL.Database.ClassXRealmAbility.CharClass">
            <summary>
            Char class that can get this ability
            </summary>
        </member>
        <member name="P:DOL.Database.ClassXRealmAbility.AbilityKey">
            <summary>
            The key of this ability
            </summary>
        </member>
        <member name="T:DOL.Database.Cache.CacheException">
            <summary>
            Represents any exception from an <c>ICache</c>
            </summary>
        </member>
        <member name="T:DOL.Database.DatabaseException">
            <summary>
            Any exception that occurs in the O-R persistence layer.
            </summary>
        </member>
        <member name="M:DOL.Database.DatabaseException.#ctor(System.Exception)">
            <summary>
            Constructor for an DatabaseException
            </summary>
            <param name="e">Baseexeption for this error</param>
        </member>
        <member name="M:DOL.Database.DatabaseException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for an DatabaseException
            </summary>
            <param name="str">Reason that describes the Problem</param>
            <param name="e">Baseexeption for this error</param>
        </member>
        <member name="M:DOL.Database.DatabaseException.#ctor(System.String)">
            <summary>
            Constructor for an DatabaseException
            </summary>
            <param name="str">Reason that describes the Problem</param>
        </member>
        <member name="M:DOL.Database.Cache.CacheException.#ctor(System.String)">
            <summary>
            Constructor for an CacheException that indicates a Problem with the Cache
            </summary>
            <param name="s">String that describes the Error</param>
        </member>
        <member name="M:DOL.Database.Cache.CacheException.#ctor(System.Exception)">
            <summary>
            Constructor for an CacheException that indicates a Problem with the Cache
            </summary>
            <param name="e">Exception that is the Reason for the Cache-Problem</param>
        </member>
        <member name="T:MySql.Data.Types.MySqlInt32">
            <summary>
            Summary description for MySqlInt32.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlTransaction">
            <summary>
	Represents a SQL transaction to be made in a MySQL database. This class cannot be inherited.
	</summary><remarks>
	The application creates a <B>MySqlTransaction</B> object by calling <see cref="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction"/>
	on the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object. All subsequent operations associated with the 
	transaction (for example, committing or aborting the transaction), are performed on the 
	<B>MySqlTransaction</B> object.
</remarks><example>
	The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and a <B>MySqlTransaction</B>. 
	It also demonstrates how to use the <see cref="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction"/>, 
	<see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Commit"/>, and <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Rollback"/> methods.
	<code lang="Visual Basic">
Public Sub RunTransaction(myConnString As String)
    Dim myConnection As New MySqlConnection(myConnString)
    myConnection.Open()
    
    Dim myCommand As MySqlCommand = myConnection.CreateCommand()
    Dim myTrans As MySqlTransaction
    
    ' Start a local transaction
    myTrans = myConnection.BeginTransaction()
    ' Must assign both transaction object and connection
    ' to Command object for a pending local transaction
    myCommand.Connection = myConnection
    myCommand.Transaction = myTrans
    
    Try
      myCommand.CommandText = "Insert into Region (RegionID, RegionDescription) VALUES (100, 'Description')"
      myCommand.ExecuteNonQuery()
      myCommand.CommandText = "Insert into Region (RegionID, RegionDescription) VALUES (101, 'Description')"
      myCommand.ExecuteNonQuery()
      myTrans.Commit()
      Console.WriteLine("Both records are written to database.")
    Catch e As Exception
      Try
        myTrans.Rollback()
      Catch ex As MySqlException
        If Not myTrans.Connection Is Nothing Then
          Console.WriteLine("An exception of type " &amp; ex.GetType().ToString() &amp; _
                            " was encountered while attempting to roll back the transaction.")
        End If
      End Try
    
      Console.WriteLine("An exception of type " &amp; e.GetType().ToString() &amp; _
                      "was encountered while inserting the data.")
      Console.WriteLine("Neither record was written to database.")
    Finally
      myConnection.Close()
    End Try
End Sub 'RunTransaction
	</code>
	<code lang="C#">
public void RunTransaction(string myConnString) 
 {
    MySqlConnection myConnection = new MySqlConnection(myConnString);
    myConnection.Open();

    MySqlCommand myCommand = myConnection.CreateCommand();
    MySqlTransaction myTrans;

    // Start a local transaction
    myTrans = myConnection.BeginTransaction();
    // Must assign both transaction object and connection
    // to Command object for a pending local transaction
    myCommand.Connection = myConnection;
    myCommand.Transaction = myTrans;

    try
    {
      myCommand.CommandText = "Insert into Region (RegionID, RegionDescription) VALUES (100, 'Description')";
      myCommand.ExecuteNonQuery();
      myCommand.CommandText = "Insert into Region (RegionID, RegionDescription) VALUES (101, 'Description')";
      myCommand.ExecuteNonQuery();
      myTrans.Commit();
      Console.WriteLine("Both records are written to database.");
    }
    catch(Exception e)
    {
      try
      {
        myTrans.Rollback();
      }
      catch (MySqlException ex)
      {
        if (myTrans.Connection != null)
        {
          Console.WriteLine("An exception of type " + ex.GetType() +
                            " was encountered while attempting to roll back the transaction.");
        }
      }
    
      Console.WriteLine("An exception of type " + e.GetType() +
                        " was encountered while inserting the data.");
      Console.WriteLine("Neither record was written to database.");
    }
    finally 
    {
      myConnection.Close();
    }
}
	</code>
</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlTransaction.Commit">
            <summary>
	Commits the database transaction.
	</summary><remarks>
	The <b>Commit</b> method is equivalent to the MySQL SQL statement
	COMMIT.
	</remarks><example>
The following example creates <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and a 
<see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/>. It also demonstrates how to use the 
<see cref="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction"/>, <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Commit"/>, and <B>Rollback</B> 
methods.
<code lang="Visual Basic">
Public Sub RunSqlTransaction(myConnString As String)
    Dim myConnection As New MySqlConnection(myConnString)
    myConnection.Open()
    
    Dim myCommand As MySqlCommand = myConnection.CreateCommand()
    Dim myTrans As MySqlTransaction
    
    ' Start a local transaction
    myTrans = myConnection.BeginTransaction()
    
    ' Must assign both transaction object and connection
    ' to Command object for a pending local transaction
    myCommand.Connection = myConnection
    myCommand.Transaction = myTrans
    
    Try
      myCommand.CommandText = "Insert into mytable (id, desc) VALUES (100, 'Description')"
      myCommand.ExecuteNonQuery()
      myCommand.CommandText = "Insert into mytable (id, desc) VALUES (101, 'Description')"
      myCommand.ExecuteNonQuery()
      myTrans.Commit()
      Console.WriteLine("Success.")
    Catch e As Exception
      Try
        myTrans.Rollback()
      Catch ex As MySqlException
        If Not myTrans.Connection Is Nothing Then
          Console.WriteLine("An exception of type " &amp; ex.GetType().ToString() &amp; _
                            " was encountered while attempting to roll back the transaction.")
        End If
      End Try
    
      Console.WriteLine("An exception of type " &amp; e.GetType().ToString() &amp; _
                      "was encountered while inserting the data.")
      Console.WriteLine("Neither record was written to database.")
    Finally
      myConnection.Close()
    End Try
End Sub
</code>
<code lang="C#">
public void RunSqlTransaction(string myConnString) 
 {
    MySqlConnection myConnection = new MySqlConnection(myConnString);
    myConnection.Open();

    MySqlCommand myCommand = myConnection.CreateCommand();
    MySqlTransaction myTrans;

    // Start a local transaction
    myTrans = myConnection.BeginTransaction();
    // Must assign both transaction object and connection
    // to Command object for a pending local transaction
    myCommand.Connection = myConnection;
    myCommand.Transaction = myTrans;

    try
    {
      myCommand.CommandText = "Insert into mytable (id, desc) VALUES (100, 'Description')";
      myCommand.ExecuteNonQuery();
      myCommand.CommandText = "Insert into mytable (id, desc) VALUES (101, 'Description')";
      myCommand.ExecuteNonQuery();
      myTrans.Commit();
      Console.WriteLine("Both records are written to database.");
    }
    catch(Exception e)
    {
      try
      {
        myTrans.Rollback();
      }
      catch (MySqlException ex)
      {
        if (myTrans.Connection != null)
        {
          Console.WriteLine("An exception of type " + ex.GetType() +
                            " was encountered while attempting to roll back the transaction.");
        }
      }
    
      Console.WriteLine("An exception of type " + e.GetType() +
                        " was encountered while inserting the data.");
      Console.WriteLine("Neither record was written to database.");
    }
    finally 
    {
      myConnection.Close();
    }
}	
</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlTransaction.Rollback">
            <summary>
	Rolls back a transaction from a pending state.
	</summary><remarks>
	The Rollback method is equivalent to the MySQL statement ROLLBACK.  
	The transaction can only be rolled back from a pending state 
	(after BeginTransaction has been called, but before Commit is 
	called).
	</remarks><example>
The following example creates <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and a 
<see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/>. It also demonstrates how to use the 
<see cref="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction"/>, <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Commit"/>, and <B>Rollback</B> 
methods.
<code lang="Visual Basic">
Public Sub RunSqlTransaction(myConnString As String)
    Dim myConnection As New MySqlConnection(myConnString)
    myConnection.Open()
    
    Dim myCommand As MySqlCommand = myConnection.CreateCommand()
    Dim myTrans As MySqlTransaction
    
    ' Start a local transaction
    myTrans = myConnection.BeginTransaction()
    
    ' Must assign both transaction object and connection
    ' to Command object for a pending local transaction
    myCommand.Connection = myConnection
    myCommand.Transaction = myTrans
    
    Try
      myCommand.CommandText = "Insert into mytable (id, desc) VALUES (100, 'Description')"
      myCommand.ExecuteNonQuery()
      myCommand.CommandText = "Insert into mytable (id, desc) VALUES (101, 'Description')"
      myCommand.ExecuteNonQuery()
      myTrans.Commit()
      Console.WriteLine("Success.")
    Catch e As Exception
      Try
        myTrans.Rollback()
      Catch ex As MySqlException
        If Not myTrans.Connection Is Nothing Then
          Console.WriteLine("An exception of type " &amp; ex.GetType().ToString() &amp; _
                            " was encountered while attempting to roll back the transaction.")
        End If
      End Try
    
      Console.WriteLine("An exception of type " &amp; e.GetType().ToString() &amp; _
                      "was encountered while inserting the data.")
      Console.WriteLine("Neither record was written to database.")
    Finally
      myConnection.Close()
    End Try
End Sub
</code>
<code lang="C#">
public void RunSqlTransaction(string myConnString) 
 {
    MySqlConnection myConnection = new MySqlConnection(myConnString);
    myConnection.Open();

    MySqlCommand myCommand = myConnection.CreateCommand();
    MySqlTransaction myTrans;

    // Start a local transaction
    myTrans = myConnection.BeginTransaction();
    // Must assign both transaction object and connection
    // to Command object for a pending local transaction
    myCommand.Connection = myConnection;
    myCommand.Transaction = myTrans;

    try
    {
      myCommand.CommandText = "Insert into mytable (id, desc) VALUES (100, 'Description')";
      myCommand.ExecuteNonQuery();
      myCommand.CommandText = "Insert into mytable (id, desc) VALUES (101, 'Description')";
      myCommand.ExecuteNonQuery();
      myTrans.Commit();
      Console.WriteLine("Both records are written to database.");
    }
    catch(Exception e)
    {
      try
      {
        myTrans.Rollback();
      }
      catch (MySqlException ex)
      {
        if (myTrans.Connection != null)
        {
          Console.WriteLine("An exception of type " + ex.GetType() +
                            " was encountered while attempting to roll back the transaction.");
        }
      }
    
      Console.WriteLine("An exception of type " + e.GetType() +
                        " was encountered while inserting the data.");
      Console.WriteLine("Neither record was written to database.");
    }
    finally 
    {
      myConnection.Close();
    }
}	
</code>
	</example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlTransaction.Connection">
            <summary>
            Gets the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object associated with the transaction, or a null reference (Nothing in Visual Basic) if the transaction is no longer valid.
            </summary>
            <value>The <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object associated with this transaction.</value>
            <remarks>
            A single application may have multiple database connections, each 
            with zero or more transactions. This property enables you to 
            determine the connection object associated with a particular 
            transaction created by <see cref="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction"/>.
            </remarks>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlTransaction.IsolationLevel">
            <summary>
            Specifies the <see cref="P:MySql.Data.MySqlClient.MySqlTransaction.IsolationLevel"/> for this transaction.
            </summary>
            <value>
            The <see cref="P:MySql.Data.MySqlClient.MySqlTransaction.IsolationLevel"/> for this transaction. The default is <b>ReadCommitted</b>.
            </value>
            <remarks>
            Parallel transactions are not supported. Therefore, the IsolationLevel 
            applies to the entire transaction.
            </remarks>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlException">
            <summary>
            The exception that is thrown when MySQL returns an error. This class cannot be inherited.
            </summary>
            <remarks>
	<para>
	This class is created whenever the MySql Data Provider encounters an error generated from the server.
	</para>
	<para>
	Any open connections are not automatically closed when an exception is thrown.  If 
	the client application determines that the exception is fatal, it should close any open
	<see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> objects or <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> objects.
	</para>
</remarks><example>
	The following example generates a <B>MySqlException</B> due to a missing server, 
	and then displays the exception.
	
	<code lang="Visual Basic">
Public Sub ShowException()
     Dim mySelectQuery As String = "SELECT column1 FROM table1"
     Dim myConnection As New MySqlConnection ("Data Source=localhost;Database=Sample;")
     Dim myCommand As New MySqlCommand(mySelectQuery, myConnection)

     Try
         myCommand.Connection.Open()
     Catch e As MySqlException
		MessageBox.Show( e.Message )
     End Try
 End Sub
	</code>
	<code lang="C#">
public void ShowException() 
{
   string mySelectQuery = "SELECT column1 FROM table1";
   MySqlConnection myConnection =
      new MySqlConnection("Data Source=localhost;Database=Sample;");
   MySqlCommand myCommand = new MySqlCommand(mySelectQuery,myConnection);

   try 
   {
      myCommand.Connection.Open();
   }
   catch (MySqlException e) 
   {
		MessageBox.Show( e.Message );
   }
}
	</code>
</example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlException.Number">
            <summary>
            Gets a number that identifies the type of error.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlException.IsFatal">
            <summary>
            True if this exception was fatal and cause the closing of the connection, false otherwise.
            </summary>
        </member>
        <member name="T:MySql.Data.Common.SocketStream">
            <summary>
            Summary description for MySqlSocket.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlCommandBuilder">
            <summary>
	Automatically generates single-table commands used to reconcile changes made to a DataSet with the associated MySQL database. This class cannot be inherited.
	</summary><remarks>
	<para>The <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> does not automatically generate the SQL statements required to 
	reconcile changes made to a <see cref="T:System.Data.DataSet">DataSet</see> with the associated instance of MySQL. 
	However, you can create a <B>MySqlCommandBuilder</B> object to automatically generate SQL statements for 
	single-table updates if you set the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand">SelectCommand</see> property 
	of the <B>MySqlDataAdapter</B>. Then, any additional SQL statements that you do not set are generated by the 
	<B>MySqlCommandBuilder</B>.</para>

	<para>The <B>MySqlCommandBuilder</B> registers itself as a listener for <see cref="M:MySql.Data.MySqlClient.MySqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">RowUpdating</see> 
	events whenever you set the <see cref="P:MySql.Data.MySqlClient.MySqlCommandBuilder.DataAdapter"/> property. You can only associate one 
	<B>MySqlDataAdapter</B> or <B>MySqlCommandBuilder</B> object with each other at one time.</para>

	<para>To generate INSERT, UPDATE, or DELETE statements, the <B>MySqlCommandBuilder</B> uses the 
	<B>SelectCommand</B> property to retrieve a required set of metadata automatically. If you change 
	the <B>SelectCommand</B> after the metadata has is retrieved (for example, after the first update), you 
	should call the <see cref="M:MySql.Data.MySqlClient.MySqlCommandBuilder.RefreshSchema"/> method to update the metadata.</para>

	<para>The <B>SelectCommand</B> must also return at least one primary key or unique 
	column. If none are present, an <I>InvalidOperation</I> exception is generated, 
	and the commands are not generated.</para>

	<para>The <B>MySqlCommandBuilder</B> also uses the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.Connection">Connection</see>, 
	<see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout">CommandTimeout</see>, and <see cref="P:MySql.Data.MySqlClient.MySqlCommand.Transaction">Transaction</see>
	properties referenced by the <B>SelectCommand</B>. The user should call 
	<B>RefreshSchema</B> if any of these properties are modified, or if the 
	<B>SelectCommand</B> itself is replaced. Otherwise the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.InsertCommand">InsertCommand</see>, 
	<see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.UpdateCommand">UpdateCommand</see>, and
	<see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.DeleteCommand">DeleteCommand</see> properties retain 
	their previous values.</para>

	<para>If you call <i>Dispose</i>, the <B>MySqlCommandBuilder</B> is disassociated 
	from the <B>MySqlDataAdapter</B>, and the generated commands are no longer used.
	</para>
	
	<note>
	Caution must be used when using MySqlCOmmandBuilder on MySql 4.0 systems.  With MySql 4.0, 
	database/schema information is not provided to the connector for a query.  This means that
	a query that pulls columns from two identically named tables in two or more different databases
	will not cause an exception to be thrown but will not work correctly.  Even more dangerous
	is the situation where your select statement references database X but is executed in 
	database Y and both databases have tables with similar layouts.  This situation can cause
	unwanted changes or deletes.
	This note does not apply to MySQL versions 4.1 and later.
	</note>
	
	</remarks><example>
		The	following example uses the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, along 
		<see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, to 
		select rows from a data source. The example is passed an initialized 
		<see cref="T:System.Data.DataSet"/>, a connection string, a 
		query string that is a SQL SELECT statement, and a string that is the 
		name of the database table. The example then creates a <B>MySqlCommandBuilder</B>.
		
		<code lang="Visual Basic">
	Public Shared Function SelectRows(myConnection As String, mySelectQuery As String, myTableName As String) As DataSet
		Dim myConn As New MySqlConnection(myConnection)
		Dim myDataAdapter As New MySqlDataAdapter()
		myDataAdapter.SelectCommand = New MySqlCommand(mySelectQuery, myConn)
		Dim cb As SqlCommandBuilder = New MySqlCommandBuilder(myDataAdapter)

		myConn.Open()

		Dim ds As DataSet = New DataSet
		myDataAdapter.Fill(ds, myTableName)

		' Code to modify data in DataSet here 

		' Without the MySqlCommandBuilder this line would fail.
		myDataAdapter.Update(ds, myTableName)

		myConn.Close()
	End Function 'SelectRows
		</code>
		<code lang="C#">
	public static DataSet SelectRows(string myConnection, string mySelectQuery, string myTableName)
	{
	MySqlConnection myConn = new MySqlConnection(myConnection);
	MySqlDataAdapter myDataAdapter = new MySqlDataAdapter();
	myDataAdapter.SelectCommand = new MySqlCommand(mySelectQuery, myConn);
	MySqlCommandBuilder cb = new MySqlCommandBuilder(myDataAdapter);

	myConn.Open();

	DataSet ds = new DataSet();
	myDataAdapter.Fill(ds, myTableName);

	//code to modify data in DataSet here

	//Without the MySqlCommandBuilder this line would fail
	myDataAdapter.Update(ds, myTableName);

	myConn.Close();

	return ds;
	}

		</code>
	</example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.#ctor">
            <summary>
	Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/> class.
	</summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.#ctor(System.Boolean)">
            <summary>
	Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/> class 
	and sets the last one wins property.
	</summary><param name="lastOneWins">False to generate change protection code.  True otherwise.</param><remarks>
	<para>
	The <i>lastOneWins</i> parameter indicates whether SQL code should be included
	with the generated DELETE and UPDATE commands that checks the underlying data
	for changes.  If <i>lastOneWins</i> is true then this code is not included and
	data records could be overwritten in a multi-user or multi-threaded environments.
	Setting <i>lastOneWins</i> to false will include this check which will cause a
	concurrency exception to be thrown if the underlying data record has changed without
	our knowledge.
	</para>
	</remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.#ctor(MySql.Data.MySqlClient.MySqlDataAdapter)">
            <summary>
	Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/> class 
	with the associated <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> object.
	</summary><param name="adapter">The <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> to use.</param><remarks>
	<para>
		The <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/> registers itself as a listener for 
		<see cref="E:MySql.Data.MySqlClient.MySqlDataAdapter.RowUpdating"/> events that are generated by the 
		<see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> specified in this property.
	</para>
	<para>
		When you create a new instance <B>MySqlCommandBuilder</B>, any existing 
		<B>MySqlCommandBuilder</B> associated with this <B>MySqlDataAdapter</B> 
		is released.
	</para>
	</remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.#ctor(MySql.Data.MySqlClient.MySqlDataAdapter,System.Boolean)">
            <summary>
	Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/> class 
	with the associated <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> object.
	</summary><param name="adapter">The <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> to use.</param><param name="lastOneWins">False to generate change protection code.  True otherwise.</param><remarks>
	<para>
		The <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/> registers itself as a listener for 
		<see cref="E:MySql.Data.MySqlClient.MySqlDataAdapter.RowUpdating"/> events that are generated by the 
		<see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> specified in this property.
	</para>
	<para>
		When you create a new instance <B>MySqlCommandBuilder</B>, any existing 
		<B>MySqlCommandBuilder</B> associated with this <B>MySqlDataAdapter</B> 
		is released.
	</para>
	<para>
	The <i>lastOneWins</i> parameter indicates whether SQL code should be included
	with the generated DELETE and UPDATE commands that checks the underlying data
	for changes.  If <i>lastOneWins</i> is true then this code is not included and
	data records could be overwritten in a multi-user or multi-threaded environments.
	Setting <i>lastOneWins</i> to false will include this check which will cause a
	concurrency exception to be thrown if the underlying data record has changed without
	our knowledge.
	</para>
	</remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.DeriveParameters(MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified 
            in the MySqlCommand and populates the Parameters collection of the 
            specified MySqlCommand object.
            This method is not currently supported since stored procedures are 
            not available in MySql.
            </summary>
            <param name="command">The MySqlCommand referencing the stored 
            procedure from which the parameter information is to be derived. 
            The derived parameters are added to the Parameters collection of the 
            MySqlCommand.</param>
            <exception cref="T:System.InvalidOperationException">The command text is not 
            a valid stored procedure name.</exception>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.GetDeleteCommand">
            <summary>
	Gets the automatically generated <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object 
	required to perform deletions on the database.
	</summary><returns>
	The <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object generated to handle delete operations.
	</returns><remarks>
	<para>
	An application can use the <B>GetDeleteCommand</B> method for informational 
	or troubleshooting purposes because it returns the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>
	object to be executed.
	</para>
	<para>
	You can also use <B>GetDeleteCommand</B> as the basis of a modified command. 
	For example, you might call <B>GetDeleteCommand</B> and modify the 
	<see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout"/> value, and then explicitly set that on the 
	<see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.
	</para>
	<para>
	After the SQL statement is first generated, the application must explicitly 
	call <see cref="M:MySql.Data.MySqlClient.MySqlCommandBuilder.RefreshSchema"/> if it changes the statement in any way. 
	Otherwise, the <B>GetDeleteCommand</B> will be still be using information 
	from the previous statement, which might not be correct. The SQL statements 
	are first generated either when the application calls 
	<see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)"/> or <B>GetDeleteCommand</B>.
	</para>
	</remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.GetInsertCommand">
            <summary>
	Gets the automatically generated <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object 
	required to perform insertions on the database.
	</summary><returns>
	The <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object generated to handle insert operations.
	</returns><remarks>
	<para>
	An application can use the <B>GetInsertCommand</B> method for informational 
	or troubleshooting purposes because it returns the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>
	object to be executed.
	</para>
	<para>
	You can also use the <B>GetInsertCommand</B> as the basis of a modified command. 
	For example, you might call <B>GetInsertCommand</B> and modify the 
	<see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout"/> value, and then explicitly set that on the 
	<see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.
	</para>
	<para>
	After the SQL statement is first generated, the application must explicitly 
	call <see cref="M:MySql.Data.MySqlClient.MySqlCommandBuilder.RefreshSchema"/> if it changes the statement in any way. 
	Otherwise, the <B>GetInsertCommand</B> will be still be using information 
	from the previous statement, which might not be correct. The SQL statements 
	are first generated either when the application calls 
	<see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)"/> or <B>GetInsertCommand</B>.
	</para>
	</remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.GetUpdateCommand">
            <summary>
	Gets the automatically generated <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object 
	required to perform updates on the database.
	</summary><returns>
	The <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object generated to handle update operations.
	</returns><remarks>
	<para>
	An application can use the <B>GetUpdateCommand</B> method for informational 
	or troubleshooting purposes because it returns the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>
	object to be executed.
	</para>
	<para>
	You can also use <B>GetUpdateCommand</B> as the basis of a modified command. 
	For example, you might call <B>GetUpdateCommand</B> and modify the 
	<see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout"/> value, and then explicitly set that on the 
	<see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.
	</para>
	<para>
	After the SQL statement is first generated, the application must explicitly 
	call <see cref="M:MySql.Data.MySqlClient.MySqlCommandBuilder.RefreshSchema"/> if it changes the statement in any way. 
	Otherwise, the <B>GetUpdateCommand</B> will be still be using information 
	from the previous statement, which might not be correct. The SQL statements 
	are first generated either when the application calls 
	<see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)"/> or <B>GetUpdateCommand</B>.
	</para>
	</remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.RefreshSchema">
            <summary>
	Refreshes the database schema information used to generate INSERT, UPDATE, or 
	DELETE statements.
	</summary><remarks>
	<para>
	An application should call <B>RefreshSchema</B> whenever the SELECT statement 
	associated with the <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/> changes.
	</para>
	<para>
	An application should call <B>RefreshSchema</B> whenever the 
	<see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> value of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> changes.
	</para>
	</remarks>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommandBuilder.DataAdapter">
            <summary>
	Gets or sets a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> object for which SQL statements are automatically generated.
	</summary><value>
	A <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> object.
	</value><remarks>
	<para>
	The <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/> registers itself as a listener for 
	<see cref="E:MySql.Data.MySqlClient.MySqlDataAdapter.RowUpdating"/> events that are generated by the 
	<see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> specified in this property.
	</para>
	<para>
	When you create a new instance <B>MySqlCommandBuilder</B>, any existing 
	<B>MySqlCommandBuilder</B> associated with this <B>MySqlDataAdapter</B> 
	is released.
	</para>
	</remarks>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommandBuilder.QuotePrefix">
            <summary>
	Gets or sets the beginning character or characters to use when specifying MySQL 
	database objects (for example, tables or columns) whose names contain 
	characters such as spaces or reserved tokens.
	</summary><value>
	The beginning character or characters to use.  The default value is `.
	</value><remarks>
	Database objects in MySQL can contain special characters such as spaces that would
	make normal SQL strings impossible to correctly parse.  Use of the <b>QuotePrefix</b>
	and the <see cref="P:MySql.Data.MySqlClient.MySqlCommandBuilder.QuoteSuffix"/> properties allows the <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/>
	to build SQL commands that handle this situation.
	</remarks>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommandBuilder.QuoteSuffix">
            <summary>
	Gets or sets the beginning character or characters to use when specifying MySQL 
	database objects (for example, tables or columns) whose names contain 
	characters such as spaces or reserved tokens.
	</summary><value>
	The beginning character or characters to use.  The default value is `.
	</value><remarks>
	Database objects in MySQL can contain special characters such as spaces that would
	make normal SQL strings impossible to correctly parse.  Use of the <see cref="P:MySql.Data.MySqlClient.MySqlCommandBuilder.QuotePrefix"/>
	and the <b>QuoteSuffix</b> properties allows the <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/>
	to build SQL commands that handle this situation.
	</remarks>
        </member>
        <member name="T:DOL.Database.DBAlliance">
            <summary>
            DBalliance is table for alliance of guild
            </summary>
        </member>
        <member name="M:DOL.Database.DBAlliance.#ctor">
            <summary>
            create an alliance
            </summary>
        </member>
        <member name="F:DOL.Database.DBAlliance.DBguildleader">
            <summary>
            Guild leader of alliance
            </summary>
        </member>
        <member name="F:DOL.Database.DBAlliance.DBguilds">
            <summary>
            All guild in this alliance
            </summary>
        </member>
        <member name="P:DOL.Database.DBAlliance.AutoSave">
            <summary>
            autosave table
            </summary>
        </member>
        <member name="P:DOL.Database.DBAlliance.AllianceName">
            <summary>
            Name of the alliance 
            </summary>
        </member>
        <member name="P:DOL.Database.DBAlliance.Motd">
            <summary>
            Message Of The Day  of the Alliance
            </summary>
        </member>
        <member name="T:DOL.Database.DBAbility">
            <summary>
            The ability table
            </summary>
        </member>
        <member name="M:DOL.Database.DBAbility.#ctor">
            <summary>
            Create ability
            </summary>
        </member>
        <member name="P:DOL.Database.DBAbility.AutoSave">
            <summary>
            auto save Db or not
            </summary>
        </member>
        <member name="P:DOL.Database.DBAbility.KeyName">
            <summary>
            The key of this ability
            </summary>
        </member>
        <member name="P:DOL.Database.DBAbility.Name">
            <summary>
            Name of this ability
            </summary>
        </member>
        <member name="P:DOL.Database.DBAbility.Description">
            <summary>
            Small description of this ability
            </summary>
        </member>
        <member name="P:DOL.Database.DBAbility.IconID">
            <summary>
            icon of ability
            </summary>
        </member>
        <member name="P:DOL.Database.DBAbility.Implementation">
            <summary>
            Implementierungsklasse
            </summary>
        </member>
        <member name="T:DOL.Database.DBStyleXSpell">
            <summary>
            (procs) Database Storage of StyleXSpell
            </summary>
        </member>
        <member name="M:DOL.Database.DBStyleXSpell.#ctor">
            <summary>
            The Constructor
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyleXSpell.SpellID">
            <summary>
            The Spell ID
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyleXSpell.ClassID">
            <summary>
            The ClassID, required for style subsitute procs (0 is not a substitute style)
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyleXSpell.StyleID">
            <summary>
            The StyleID
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyleXSpell.Chance">
            <summary>
            The Chance to add to the styleeffect list
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyleXSpell.AutoSave">
            <summary>
            Auto save is not needed the value aren't changed in game
            </summary>
        </member>
        <member name="T:DOL.Database.DataTableHandler">
            <summary>
            Zusammenfassung für DataTableHandler.
            </summary>
        </member>
        <member name="M:DOL.Database.DataTableHandler.#ctor(System.Data.DataSet)">
            <summary>
            The Constructor
            </summary>
            <param name="dataSet"></param>
        </member>
        <member name="M:DOL.Database.DataTableHandler.SetCacheObject(System.Object,DOL.Database.DataObject)">
            <summary>
            Set Cache Object
            </summary>
            <param name="Key">The key object</param>
            <param name="Obj">The value DataObject</param>
        </member>
        <member name="M:DOL.Database.DataTableHandler.GetCacheObject(System.Object)">
            <summary>
            Get Cache Object
            </summary>
            <param name="Key">The key object</param>
            <returns>The value DataObject</returns>
        </member>
        <member name="M:DOL.Database.DataTableHandler.SetPreCachedObject(System.Object,DOL.Database.DataObject)">
            <summary>
            Set Pre-Cached Object
            </summary>
            <param name="key">The key object</param>
            <param name="obj">The value DataObject</param>
        </member>
        <member name="M:DOL.Database.DataTableHandler.GetPreCachedObject(System.Object)">
            <summary>
            Get Pre-Cached Object
            </summary>
            <param name="key">The key object</param>
            <returns>The value DataObject</returns>
        </member>
        <member name="P:DOL.Database.DataTableHandler.HasRelations">
            <summary>
            Has Relations
            </summary>
        </member>
        <member name="P:DOL.Database.DataTableHandler.Cache">
            <summary>
            Cache
            </summary>
        </member>
        <member name="P:DOL.Database.DataTableHandler.DataSet">
            <summary>
            DataSet
            </summary>
        </member>
        <member name="P:DOL.Database.DataTableHandler.UsesPreCaching">
            <summary>
            Uses Precaching
            </summary>
        </member>
        <member name="T:DOL.Database.UniqueID.IdGenerator">
            <summary>
            Generates an UniqeID for every Object.
            </summary>
        </member>
        <member name="M:DOL.Database.UniqueID.IdGenerator.generateId">
            <summary>
            
            </summary>
            <returns>a new unique Key</returns>
        </member>
        <member name="T:MySql.Data.Types.MySqlTimeSpan">
            <summary>
            Summary description for MySqlDateTime.
            </summary>
        </member>
        <member name="T:MySql.Data.Types.MySqlString">
            <summary>
            Summary description for MySqlString.
            </summary>
        </member>
        <member name="T:MySql.Data.Types.MySqlFloat">
            <summary>
            Summary description for MySqlFloat.
            </summary>
        </member>
        <member name="T:MySql.Data.Types.MySqlInt64">
            <summary>
            Summary description for MySqlInt64.
            </summary>
        </member>
        <member name="T:MySql.Data.Types.MySqlBinary">
            <summary>
            Summary description for MySqlBinary
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.SharedMemoryStream">
            <summary>
            Summary description for SharedMemoryStream.
            </summary>
        </member>
        <member name="T:DOL.Database.DBDoor">
            <summary>
            DBDoor is database of door with state of door and X,Y,Z
            </summary>
        </member>
        <member name="M:DOL.Database.DBDoor.#ctor">
            <summary>
            Create a door row
            </summary>
        </member>
        <member name="P:DOL.Database.DBDoor.AutoSave">
            <summary>
            Auto save table
            </summary>
        </member>
        <member name="P:DOL.Database.DBDoor.Name">
            <summary>
            Name of door
            </summary>
        </member>
        <member name="P:DOL.Database.DBDoor.Z">
            <summary>
            Z position of door
            </summary>
        </member>
        <member name="P:DOL.Database.DBDoor.Y">
            <summary>
            Y position of door
            </summary>
        </member>
        <member name="P:DOL.Database.DBDoor.X">
            <summary>
            X position of door
            </summary>
        </member>
        <member name="P:DOL.Database.DBDoor.Heading">
            <summary>
            Heading of door
            </summary>
        </member>
        <member name="P:DOL.Database.DBDoor.InternalID">
            <summary>
            Internal index of Door
            </summary>
        </member>
        <member name="T:DOL.Database.DBCraftedItem">
            <summary>
            Crafted item table
            </summary>
        </member>
        <member name="M:DOL.Database.DBCraftedItem.#ctor">
            <summary>
            Create an crafted item
            </summary>
        </member>
        <member name="F:DOL.Database.DBCraftedItem.RawMaterials">
            <summary>
            List of raw material needed
            </summary>
        </member>
        <member name="F:DOL.Database.DBCraftedItem.ItemTemplate">
            <summary>
            The item to craft
            </summary>
        </member>
        <member name="P:DOL.Database.DBCraftedItem.AutoSave">
            <summary>
            AutoSave
            </summary>
        </member>
        <member name="P:DOL.Database.DBCraftedItem.CraftedItemID">
            <summary>
            Crafting id of item to craft
            </summary>
        </member>
        <member name="P:DOL.Database.DBCraftedItem.Id_nb">
            <summary>
            Index of item to craft
            </summary>
        </member>
        <member name="P:DOL.Database.DBCraftedItem.CraftingLevel">
            <summary>
            Crafting level of this item
            </summary>
        </member>
        <member name="P:DOL.Database.DBCraftedItem.CraftingSkillType">
            <summary>
            Crafting skill needed to craft this item
            </summary>
        </member>
        <member name="T:DOL.Database.Attributes.PrimaryKey">
            <summary>
            Attribute to indicate the PrimaryKey of an DatabaseObject .
            </summary>
            
        </member>
        <member name="M:DOL.Database.Attributes.PrimaryKey.#ctor">
            <summary>
            Constructor for Attribute
            </summary>
        </member>
        <member name="T:MySql.Data.Types.MySqlBit">
            <summary>
            Summary description for MySqlUInt64.
            </summary>
        </member>
        <member name="T:DOL.Database.eItemBonusType">
            <summary>
            The Bonus Type ID
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Strength">
            <summary>
            Strength
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Dexterity">
            <summary>
            Dexterity
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Constitution">
            <summary>
            Constitution
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Quickness">
            <summary>
            Quickness
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Intelligence">
            <summary>
            Intelligence
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Piety">
            <summary>
            Piety
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Empathy">
            <summary>
            Empathy
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Charisma">
            <summary>
            Charisma
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Mana">
            <summary>
            Max Mana
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Health">
            <summary>
            Max Health
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Resist_Body">
            <summary>
            Body Resist
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Resist_Cold">
            <summary>
            Cold Resist
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Resist_Crush">
            <summary>
            Crush Resist
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Resist_Energy">
            <summary>
            Energy Resist
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Resist_Heat">
            <summary>
            Heat Resist
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Resist_Matter">
            <summary>
            Matter Resist
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Resist_Slash">
            <summary>
            Slash Resist
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Resist_Spirit">
            <summary>
            Spirit Resist
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Resist_Thrust">
            <summary>
            Thrust Resist
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Two_Handed">
            <summary>
            Two Handed Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Body">
            <summary>
            Body Magic Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Chants">
            <summary>
            Chants Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Critical_Strike">
            <summary>
            Critical Strike Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Cross_Bows">
            <summary>
            Cross Bows Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Crushing">
            <summary>
            Crushing Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Death_Servant">
            <summary>
            Death Servant Magic Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_DeathSight">
            <summary>
            Death Sight Magic Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Dual_Wield">
            <summary>
            Dual Wield Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Earth">
            <summary>
            Earth Magic Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Enhancement">
            <summary>
            Enhancement Magic Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Envenom">
            <summary>
            Envenom Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Fire">
            <summary>
            Fire Magic Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Flexible_Weapon">
            <summary>
            Flexible Weapon Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Ice">
            <summary>
            Ice Magic Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Instruments">
            <summary>
            Instruments Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Longbows">
            <summary>
            Longbow Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Matter">
            <summary>
            Matter Magic Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Mind">
            <summary>
            Mind Magic Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Painworking">
            <summary>
            Painworking Magic Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Parry">
            <summary>
            Parry Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Polearms">
            <summary>
            Polearms Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Rejuvenation">
            <summary>
            Rejuvenation Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Shields">
            <summary>
            Shields Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Slashing">
            <summary>
            Slashing Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Smiting">
            <summary>
            Smiting Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_SoulRending">
            <summary>
            Soulrending Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Spirit">
            <summary>
            Spirit Magic Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Staff">
            <summary>
            Staff Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Stealth">
            <summary>
            Stealth Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Thrusting">
            <summary>
            Thrusting Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Skill_Wind">
            <summary>
            Wind Magic Skill
            </summary>
        </member>
        <member name="F:DOL.Database.eItemBonusType.Focus">
            <summary>
            Focus Magics.....
            </summary>
        </member>
        <member name="T:DOL.Database.InventoryItem">
            <summary>
            The InventoryItem table holds all values from the
            ItemTemplate table and also some more values that
            are neccessary to store the inventory position
            </summary>
        </member>
        <member name="F:DOL.Database.InventoryItem.m_count">
            <summary>
            The count of items (for stack!)
            </summary>
        </member>
        <member name="M:DOL.Database.InventoryItem.#ctor(DOL.Database.ItemTemplate)">
            <summary>
            Creates a new Inventoryitem based on the given ItemTemplate
            </summary>
            <param name="itemTemplate"></param>
        </member>
        <member name="M:DOL.Database.InventoryItem.#ctor(DOL.Database.InventoryItem)">
            <summary>
            Creates a new Inventoryitem based on the given ItemTemplate
            </summary>
            <param name="inventoryItem"></param>
        </member>
        <member name="T:DOL.Database.DBStyle">
            <summary>
            TODO: add neccessary fields for styles
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_ID">
            <summary>
            The ID of this style
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_classId">
            <summary>
            The class ID of the style
            </summary>		
        </member>
        <member name="F:DOL.Database.DBStyle.m_Name">
            <summary>
            The name of this style
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_SpecKeyName">
            <summary>
            The name of the spec needed for this style "None" for no requirement
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_SpecLevelRequirement">
            <summary>
            The level of specialisation required to gain this style
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_Icon">
            <summary>
            The icon for this style
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_EnduranceCost">
            <summary>
            The fatique cost for this style in % of total fatique
            Will be modified by weapon speed and Realm Abilities
            	>=5(low), >=10(medium), >=15(high)
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_StealthRequirement">
            <summary>
            Style requires stealth
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_openingRequirementType">
            <summary>
            The opening requirement of this style
            	0 = offensive opening eg. style in reply to your previous action
            	1 = defensive opening eg. style in reply to enemy previous action
            	2 = positional opening eg. front, side, or back
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_openingRequirementValue">
            <summary>
            opening requirement value
            for offensive openings the styleid of the required style before this
            for defensive openings the styleid of the enemy style required before this
            for positional openings:
            	0 = back of enemy
            	1 = side of enemy
            	2 = front of enemy
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_AttackResultRequirement">
            <summary>
            The required result of the previous attack.
            For offensive styles the attack result of your last attack
            For defensive styles the attack result of your enemies last attack
            	0 = any
            	1 = miss
            	2 = hit
            	3 = parry
            	4 = block
            	5 = evade
            	6 = fumble
            	7 = style
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_WeaponTypeRequirement">
            <summary>
            This holds the type of weapon needed for this style
            See "eObjectType" for values
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_growthRate">
            <summary>
            GrowthRate as used in Wyrd's spreadsheet
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_BonusToHit">
            <summary>
            The bonus to hit value for this style
            below 0 = penalty
            above 0 = bonus
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_BonusToDefense">
            <summary>
            The bonus to defense for this style
            below 0 = penalty
            above 0 = bonus
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_TwoHandAnimation">
            <summary>
            The animation ID for 2h weapon styles
            </summary>
        </member>
        <member name="F:DOL.Database.DBStyle.m_RandomProc">
            <summary>
            Randomly cast a proc
            </summary>
        </member>
        <member name="M:DOL.Database.DBStyle.#ctor">
            <summary>
            The Constructor
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.ID">
            <summary>
            The Style ID
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.ClassId">
            <summary>
            The ClassID
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.Name">
            <summary>
            The Style Name
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.SpecKeyName">
            <summary>
            The Style SpecKeyName
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.SpecLevelRequirement">
            <summary>
            The Style Spec Level Requirement
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.EnduranceCost">
            <summary>
            The Style Endurance Cost
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.StealthRequirement">
            <summary>
            The Style Stealth Requirement
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.OpeningRequirementType">
            <summary>
            The Style Opening Requirement Type
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.OpeningRequirementValue">
            <summary>
            The Style Opening Requirement Value
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.AttackResultRequirement">
            <summary>
            The Style Attack Result Requirement
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.WeaponTypeRequirement">
            <summary>
            The Style Weapon Type Requirement
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.GrowthRate">
            <summary>
            The Style Growth Rate
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.BonusToHit">
            <summary>
            The Style Bonus To Hit
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.BonusToDefense">
            <summary>
            The Style Bonus to Defense
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.TwoHandAnimation">
            <summary>
            The Style Two Hand Animation
            </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.RandomProc">
             <summary>
            (procs) The Style should Randomly cast a proc 
             </summary>
        </member>
        <member name="P:DOL.Database.DBStyle.AutoSave">
            <summary>
            Autosave in table?
            </summary>
        </member>
        <member name="P:DOL.Database.ServerProperty.AutoSave">
            <summary>
            Auto save this table
            </summary>
        </member>
        <member name="T:DOL.Database.Character">
            <summary>
            The character the account own. it store GamePlayer in DB
            </summary>
        </member>
        <member name="M:DOL.Database.Character.#ctor">
            <summary>
            Create the character row in table
            </summary>
        </member>
        <member name="P:DOL.Database.Character.HasGravestone">
            <summary>
            Gets/sets if this character has xp in a gravestone
            </summary>
        </member>
        <member name="P:DOL.Database.Character.GravestoneRegion">
            <summary>
            Gets/sets the region id where the gravestone of the player is located
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Constitution">
            <summary>
            Gets/sets character constitution
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Dexterity">
            <summary>
            Gets/sets character dexterity
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Strength">
            <summary>
            Gets/sets character strength
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Quickness">
            <summary>
            Gets/sets character quickness
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Intelligence">
            <summary>
            Gets/sets character intelligence
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Piety">
            <summary>
            Gets/sets character piety
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Empathy">
            <summary>
            Gets/sets character empathy
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Charisma">
            <summary>
            Gets/sets character charisma
            </summary>
        </member>
        <member name="P:DOL.Database.Character.BountyPoints">
            <summary>
            Gets/sets chracter bounty points
            </summary>
        </member>
        <member name="P:DOL.Database.Character.RealmPoints">
            <summary>
            Gets/sets character realm points
            </summary>
        </member>
        <member name="P:DOL.Database.Character.SkillSpecialtyPoints">
            <summary>
            Gets/sets character skill specialty points
            </summary>
        </member>
        <member name="P:DOL.Database.Character.RealmSpecialtyPoints">
            <summary>
            Gets/sets realm specialty points
            </summary>
        </member>
        <member name="P:DOL.Database.Character.RealmLevel">
            <summary>
            Gets/sets realm rank
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Experience">
            <summary>
            Gets/sets experience
            </summary>
        </member>
        <member name="P:DOL.Database.Character.MaxEndurance">
            <summary>
            Gets/sets max endurance
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Health">
            <summary>
            Gets/sets maximum health
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Mana">
            <summary>
            Gets/sets max mana
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Endurance">
            <summary>
            Gets/sets max endurance
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Concentration">
            <summary>
            Gets/sets the object concentration
            </summary>
        </member>
        <member name="P:DOL.Database.Character.AutoSave">
            <summary>
            Auto save the character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.ClassType">
            <summary>
            type of class inherited of gameplayer to invoke
            </summary>
        </member>
        <member name="P:DOL.Database.Character.AccountName">
            <summary>
            Account name of account which own this character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.AccountSlot">
            <summary>
            The slot of character in account
            </summary>
        </member>
        <member name="P:DOL.Database.Character.CreationDate">
            <summary>
            The creation date of this character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.LastPlayed">
            <summary>
            The last time this character have been played
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Name">
            <summary>
            Name of this character. all name of character is unique
            </summary>
        </member>
        <member name="P:DOL.Database.Character.LastName">
            <summary>
            Lastname of this character. You can have family ;)
            </summary>
        </member>
        <member name="P:DOL.Database.Character.GuildID">
            <summary>
            ID of the guild this character is in
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Gender">
            <summary>
            Male or female character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Race">
            <summary>
            Race of character (viking,troll,...)
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Level">
            <summary>
            Level of this character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Class">
            <summary>
            class of this character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Realm">
            <summary>
            Realm of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.CreationModel">
            <summary>
            The model of character when created
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Region">
            <summary>
            The region of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.ActiveWeaponSlot">
            <summary>
            the weapon active to show
            </summary>
        </member>
        <member name="P:DOL.Database.Character.CurrentModel">
            <summary>
            The model used actually in character (main time same than CreationModel)
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Xpos">
            <summary>
            The X position of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Ypos">
            <summary>
            The Y position of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Zpos">
            <summary>
            The Z position of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.BindXpos">
            <summary>
            The bind X position of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.BindYpos">
            <summary>
            The bind Y position of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.BindZpos">
            <summary>
            The bind Z position of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.BindRegion">
            <summary>
            The bind region position of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.BindHeading">
            <summary>
            The bind heading position of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.DeathCount">
            <summary>
            The number of chacter is dead at this level
            </summary>
        </member>
        <member name="P:DOL.Database.Character.ConLostAtDeath">
            <summary>
            Constitution lost at death
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Direction">
            <summary>
            Heading of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.MaxSpeed">
            <summary>
            The max speed of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Copper">
            <summary>
            Money copper part player own
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Silver">
            <summary>
            Money silver part player own
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Gold">
            <summary>
            Money gold part player own
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Platinum">
            <summary>
            Money platinum part player own
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Mithril">
            <summary>
            Money mithril part player own
            </summary>
        </member>
        <member name="P:DOL.Database.Character.SerializedCraftingSkills">
            <summary>
            The crafting skills of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.SerializedAbilities">
            <summary>
            The abilities of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.SerializedSpecs">
            <summary>
            The specs of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.SerializedSpellLines">
            <summary>
            the spell lines of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.SerializedRealmAbilities">
            <summary>
            the realm abilities of character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.DisabledSpells">
            <summary>
            The spells unallowed to character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.DisabledAbilities">
            <summary>
            The abilities unallowed to character
            </summary>
        </member>
        <member name="P:DOL.Database.Character.SerializedFriendsList">
            <summary>
            The Friend list
            </summary>
        </member>
        <member name="P:DOL.Database.Character.IsCloakHoodUp">
            <summary>
            Is cloak hood up
            </summary>
        </member>
        <member name="P:DOL.Database.Character.SpellQueue">
            <summary>
            Spell queue flag
            </summary>
        </member>
        <member name="P:DOL.Database.Character.IsLevelSecondStage">
            <summary>
            Gets/sets half-level flag
            </summary>
        </member>
        <member name="P:DOL.Database.Character.FlagClassName">
            <summary>
            Gets/sets guildname flag to print guildname or crafting title
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Advisor">
            <summary>
            Is the character an advisor
            </summary>
        </member>
        <member name="P:DOL.Database.Character.GuildRank">
            <summary>
            Gets/sets guild rank in the guild
            </summary>
        </member>
        <member name="P:DOL.Database.Character.PlayedTime">
            <summary>
            Gets/sets the characters /played time
            </summary>
        </member>
        <member name="P:DOL.Database.Character.DeathTime">
            <summary>
            Gets/sets the characters death /played time
            </summary>
        </member>
        <member name="P:DOL.Database.Character.RespecAmountAllSkill">
            <summary>
            Gets/sets the characters full skill respecs available
            </summary>
        </member>
        <member name="P:DOL.Database.Character.RespecAmountSingleSkill">
            <summary>
            Gets/sets the characters single-line respecs available
            </summary>
        </member>
        <member name="P:DOL.Database.Character.RespecAmountRealmSkill">
            <summary>
            Gets/Sets the characters realm respecs available
            </summary>
        </member>
        <member name="P:DOL.Database.Character.IsLevelRespecUsed">
            <summary>
            Gets/Sets level respec flag
            </summary>
        </member>
        <member name="P:DOL.Database.Character.SafetyFlag">
            <summary>
            Gets/sets the characters safety flag
            </summary>
        </member>
        <member name="P:DOL.Database.Character.CraftingPrimarySkill">
            <summary>
            Gets/sets the characters safety flag
            </summary>
        </member>
        <member name="P:DOL.Database.Character.CancelStyle">
            <summary>
            the cancel style
            </summary>
        </member>
        <member name="P:DOL.Database.Character.IsAnonymous">
            <summary>
            is anonymous( can not seen him in /who and some other things
            /anon to toggle
            </summary>
        </member>
        <member name="P:DOL.Database.Character.CustomisationStep">
            <summary>
            the face customisation step
            </summary>
        </member>
        <member name="P:DOL.Database.Character.EyeSize">
            <summary>
            Gets/sets character EyeSize
            </summary>
        </member>
        <member name="P:DOL.Database.Character.LipSize">
            <summary>
            Gets/sets character LipSize
            </summary>
        </member>
        <member name="P:DOL.Database.Character.EyeColor">
            <summary>
            Gets/sets character EyeColor
            </summary>
        </member>
        <member name="P:DOL.Database.Character.HairColor">
            <summary>
            Gets/sets character HairColor
            </summary>
        </member>
        <member name="P:DOL.Database.Character.FaceType">
            <summary>
            Gets/sets character FaceType
            </summary>
        </member>
        <member name="P:DOL.Database.Character.HairStyle">
            <summary>
            Gets/sets character HairStyle
            </summary>
        </member>
        <member name="P:DOL.Database.Character.MoodType">
            <summary>
            Gets/sets character MoodType
            </summary>
        </member>
        <member name="P:DOL.Database.Character.UsedLevelCommand">
            <summary>
            Gets/sets weather a character has used /level
            </summary>
        </member>
        <member name="P:DOL.Database.Character.CurrentTitleType">
            <summary>
            Gets/sets selected player title type
            </summary>
        </member>
        <member name="P:DOL.Database.Character.KillsAlbionPlayers">
            <summary>
            Amount of Albion Players Killed
            </summary>
        </member>
        <member name="P:DOL.Database.Character.KillsMidgardPlayers">
            <summary>
            Amount of Midgard Players Killed
            </summary>
        </member>
        <member name="P:DOL.Database.Character.KillsHiberniaPlayers">
            <summary>
            Amount of Hibernia Players Killed
            </summary>
        </member>
        <member name="P:DOL.Database.Character.KillsAlbionDeathBlows">
            <summary>
            Amount of Death Blows on Albion Players
            </summary>
        </member>
        <member name="P:DOL.Database.Character.KillsMidgardDeathBlows">
            <summary>
            Amount of Death Blows on Midgard Players
            </summary>
        </member>
        <member name="P:DOL.Database.Character.KillsHiberniaDeathBlows">
            <summary>
            Amount of Death Blows on Hibernia Players
            </summary>
        </member>
        <member name="P:DOL.Database.Character.KillsAlbionSolo">
            <summary>
            Amount of Solo Albion Kills
            </summary>
        </member>
        <member name="P:DOL.Database.Character.KillsMidgardSolo">
            <summary>
            Amount of Solo Midgard Kills
            </summary>
        </member>
        <member name="P:DOL.Database.Character.KillsHiberniaSolo">
            <summary>
            Amount of Solo Hibernia Kills
            </summary>
        </member>
        <member name="P:DOL.Database.Character.CapturedKeeps">
            <summary>
            Amount of Keeps Captured
            </summary>
        </member>
        <member name="P:DOL.Database.Character.CapturedTowers">
            <summary>
            Amount of Towers Captured
            </summary>
        </member>
        <member name="P:DOL.Database.Character.KillsDragon">
            <summary>
            Amount of Dragons Killed
            </summary>
        </member>
        <member name="P:DOL.Database.Character.DeathsPvP">
            <summary>
            Amount of PvP deaths
            </summary>
        </member>
        <member name="P:DOL.Database.Character.GainXP">
            <summary>
            can gain experience points
            /xp to toggle
            </summary>
        </member>
        <member name="P:DOL.Database.Character.GainRP">
            <summary>
            can gain realm points
            /rp to toggle
            </summary>
        </member>
        <member name="P:DOL.Database.Character.Autoloot">
            <summary>
            autoloot
            </summary>
        </member>
        <member name="P:DOL.Database.Character.LastFreeLeveled">
            <summary>
            Last Date for FreeLevel
            </summary>
        </member>
        <member name="P:DOL.Database.Character.LastFreeLevel">
            <summary>
            Last Level for FreeLevel
            </summary>
        </member>
        <member name="T:DOL.Database.BindPoint">
            <summary>
            Table of BindPoint where player pop when they die and released
            </summary>
        </member>
        <member name="M:DOL.Database.BindPoint.#ctor">
            <summary>
            Create a bind point
            </summary>
        </member>
        <member name="P:DOL.Database.BindPoint.X">
            <summary>
            The X position of bind
            </summary>
        </member>
        <member name="P:DOL.Database.BindPoint.Y">
            <summary>
            The Y position of bind
            </summary>
        </member>
        <member name="P:DOL.Database.BindPoint.Z">
            <summary>
            The Z position of bind
            </summary>
        </member>
        <member name="P:DOL.Database.BindPoint.Radius">
            <summary>
            The radius of bind
            </summary>
        </member>
        <member name="P:DOL.Database.BindPoint.Region">
            <summary>
            The region of bind
            </summary>
        </member>
        <member name="P:DOL.Database.BindPoint.Realm">
            <summary>
            The realm of this bind
            </summary>
        </member>
        <member name="P:DOL.Database.BindPoint.AutoSave">
            <summary>
            autosave this bind or not
            </summary>
        </member>
        <member name="T:DOL.Database.Cache.SimpleCache">
            <summary>
            A simple <c>Hashtable</c> based cache
            </summary>
        </member>
        <member name="P:DOL.Database.Cache.SimpleCache.Keys">
            <summary>
            Return's all Keys that are in the Stored in the Cache
            </summary>
            <value>All Keys that are in the Cache</value>
        </member>
        <member name="P:DOL.Database.Cache.SimpleCache.Item(System.Object)">
            <summary>
            Gets or sets cached data
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="T:DOL.Database.CharacterArchive">
            <summary>
            The character the account own. it store GamePlayer in DB
            </summary>
        </member>
        <member name="T:DOL.Database.AccountArchive">
            <summary>
            Archive Account table
            </summary>
        </member>
        <member name="T:DOL.Database.InventoryItemArchive">
            <summary>
            Archive table for Inventory item
            </summary>
        </member>
    </members>
</doc>
